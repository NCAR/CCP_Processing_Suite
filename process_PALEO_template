#
export MP_TIMEOUT=14400
export MP_PULSE=1800
export MP_DEBUG_NOTIMEOUT=yes
#
# Necessary modules to load
#
eval `/glade/apps/opt/lmod/lmod/libexec/lmod bash load python`
eval `/glade/apps/opt/lmod/lmod/libexec/lmod bash load all-python-libs`
PATH=/glade/u/home/strandwg/.local/bin:${PATH} ; export PATH
#
PYTHONPATH=/glade/u/home/strandwg/.local/lib/python2.7/site-packages:${PYTHONPATH}
#
CASE=xxxCASExxx ; export CASE
HIST=xxxHISTxxx ; export HIST
TPER=xxxTPERxxx ; export TPER
#
echo -n "TS START: " ; date
#
EXPFILE=${HOME}/CCP_Processing_Suite/experiments_PALEO.txt ; export EXPFILE
#
if [ -f $EXPFILE ] ; then
   YEARBEG=`egrep "^$CASE " $EXPFILE | cut -c30-33`
   YEAREND=`egrep "^$CASE " $EXPFILE | cut -c35-38`
  HARDWARE=`egrep "^$CASE " $EXPFILE | cut -c55- | cut -d" " -f1`
else
  echo "Cannot find $EXPFILE. EXIT"
  ./update_status error "$CASE $HIST $TPER"
  exit 1
fi
#
if ! [ $YEARBEG ] ; then
  echo "Unable to set variables because "$CASE" not found in $EXPFILE"
  ./update_status error "$CASE $HIST $TPER"
  exit 1
fi
#
# Acquire PROCHOST
#
PROCHOST=`hostname`;export PROCHOST
#
BASEDIR=${HOME}/CCP_Processing_Suite
NCODIR=/glade/apps/opt/nco/4.4.2/gnu/4.8.2/bin
NCKS=${NCODIR}/ncks      ; export NCKS
#
PROCBASE=/glade/scratch/$USER/$CASE          ; export PROCBASE
################################################################################
#
# Change "LOCALDSK" to the location on glade of the model output history data
#
################################################################################
#
LOCALDSK=/glade/scratch/strandwg/PALEO/CESM/$CASE ; export LOCALDSK
#
################################################################################
#
# Change "ARCHIVE_BASE" to the location on HPSS you want the data archived to
#
################################################################################
#
ARCHIVE_BASE=SOMENAME ; export ARCHIVE_BASE 
#
# Strip off first part of $HIST
#
HTYP=`echo $HIST | cut -d'.' -f1` ; export HTYP
#
# Convert history type to component name
#
case "$HTYP" in
  cam )
    COMP_NAME=atm ;;
  clm2 ) 
    COMP_NAME=lnd ;;
  pop  ) 
    COMP_NAME=ocn ;;
  rtm  ) 
    COMP_NAME=rof ;;
  cice ) 
    COMP_NAME=ice ;;
  * ) 
    echo "Unable to continue because "$HIST" not known."
    ./update_status error "$CASE $HIST $TPER"
    exit 1 ;;
esac
#
# Set up local names and archival names
#
LOCAL_HIST=$LOCALDSK/$COMP_NAME/hist
LOCAL_PROC=$PROCBASE/$COMP_NAME
ARCHIVE_HIST=$HISTBASE/$CASE/$COMP_NAME/hist
#
ARCHIVE_PROC=$ARCHIVE_BASE/$COMP_NAME/proc/tseries
DISK_PROC=$DISK_BASE/$COMP_NAME/proc/tseries
#
case "$TPER" in
  mon )
    ARCHIVE_PROC=${ARCHIVE_PROC}/monthly
       DISK_PROC=${DISK_PROC}/monthly ;;
  day )
    ARCHIVE_PROC=${ARCHIVE_PROC}/daily
       DISK_PROC=${DISK_PROC}/daily ;;
  hr6 )
    ARCHIVE_PROC=${ARCHIVE_PROC}/hourly6
       DISK_PROC=${DISK_PROC}/hourly6 ;;
  * ) 
    echo "Unable to continue because "$TPER" not known."
    ./update_status error "$CASE $HIST $TPER"
    exit 1 ;;
esac
#
LOCAL_PROC=${LOCAL_PROC}/${TPER}
CACHEDIR=${LOCAL_PROC}/to_archive
#
# PyReshaper Arguments
#
VERBOSITY=1
#
# Create output filename time period prefix
#
PREFIX="${CACHEDIR}/${CASE}.${HIST}."
#
case "$HIST" in
  cice.h | cice.h1 )
    ln -s -f $BASEDIR/split_cice_hemis  .
    NCFORMAT=netcdf4  ; export NCFORMAT ;;
  cam.h1  )
    NCFORMAT=netcdf4  ; export NCFORMAT ;;
  *   )
    NCFORMAT=netcdf4c ; export NCFORMAT ;;
esac
#
# Print out values
#
echo "            Case name : "$CASE ; export CASE
echo "    History file type : "$HIST ; export HIST
echo "          Time period : "$TPER ; export TPER
echo "    by var processing : YES"
echo " HPSS processed files : "$ARCHIVE_PROC ; export ARCHIVE_PROC
echo " disk processed files : "$DISK_PROC    ; export DISK_PROC
echo "           Begin year : "$YEARBEG  ; export YEARBEG
echo "             End year : "$YEAREND  ; export YEAREND
echo "           Year count : "$YRCOUNT  ; export YRCOUNT
echo "         Months count : "$MNCOUNT  ; export MNCOUNT
echo ""
echo "PyReshaper"
echo "          Output time : "$OUTTIME       ; export OUTTIME
echo "        Output prefix : "$PREFIX        ; export PREFIX
echo "        Output format : "$NCFORMAT      ; export NCFORMAT
echo "            Verbosity : "$VERBOSITY     ; export VERBOSITY
echo "             NCFORMAT : "$NCFORMAT      ; export NCFORMAT
echo ""
echo "    Archival base dir : "$ARCHIVE_BASE  ; export ARCHIVE_BASE
echo "        History files : "$ARCHIVE_HIST  ; export ARCHIVE_HIST
echo "        History names : "$HIST          ; export HIST
echo ""
echo "      Processing host : "$PROCHOST      ; export PROCHOST
echo "  Local history files : "$LOCAL_HIST    ; export LOCAL_HIST
echo "       Processing dir : "$LOCAL_PROC    ; export LOCAL_PROC
echo "    Archive cache dir : "$CACHEDIR      ; export CACHEDIR
echo "  Processing code dir : "$BASEDIR       ; export BASEDIR
#  
if [ ! -d $LOCAL_PROC ] ; then 
  mkdir -p $LOCAL_PROC 
fi
if [ ! -d ${CACHEDIR} ] ; then 
  mkdir -p $CACHEDIR
fi
cd $LOCAL_PROC
#
ln -s -f $BASEDIR/run_slice2series  Transpose_Data
ln -s -f $BASEDIR/store_to_archive  store_to_archive
ln -s -f $BASEDIR/archive_write     archive_write
ln -s -f $BASEDIR/update_status     .
#
cd $LOCAL_PROC
#
# Start actual processing, extract each field one at a time for all times
#
./update_status start
#
# Link history files - one century at a time
#
################################################################################
#
# Check CENTURY values and change as needed
#
################################################################################
for CENTURY in 00 01 02 03 04 05 ; do
  rm -f ${CASE}.${HIST}.[0-9]*.nc 
  ln -s -f ${LOCAL_HIST}/${CASE}.${HIST}.${CENTURY}*.nc .
#
# Make sure there's the correct number of files
#
  NHISTF=`/bin/ls ${CASE}.${HIST}.${CENTURY}*.nc | wc -l`
#
  case "$HIST" in 
    cam.h0 | cice.h | clm2.h0 | rtm.h0 | pop.h | pop.h.nday1 | cice.h1 )
      GOODHC=1200
      if [ "$CENTURY" = "00" ] ; then
        GOODHC=1188
      fi
      if [ "$CENTURY" = "05" ] ; then
        GOODHC=156
      fi ;;
    cam.h1 | clm2.h1 )
      GOODHC=100
      if [ "$CENTURY" = "00" ] ; then
        GOODHC=99
      fi
      if [ "$CENTURY" = "05" ] ; then
        GOODHC=12
      fi
      if [ $NHISTF -ne $GOODHC ] ; then
       echo ${NHISTF}" should be "${GOODHC}". File count mismatch. Exit."
       exit 1
      fi ;;
  esac
#
  if [ $NHISTF -ne $GOODHC ] ; then
    echo ${NHISTF}" should be "${GOODHC}". File count mismatch. Exit."
    exit 1
  fi
#
# Create eate output filename time period suffix
#
  case "$TPER" in
    mon )
      OUTTIME=${CENTURY}0001-${CENTURY}9912
      if [ "$CENTURY" = "00" ] ; then
        OUTTIME=${CENTURY}0101-${CENTURY}9912
      fi
      if [ "$CENTURY" = "05" ] ; then
        OUTTIME=${CENTURY}0001-${CENTURY}1212
      fi ;;
    day ) 
      OUTTIME=${CENTURY}000101-${CENTURY}991231
      if [ "$CENTURY" = "00" ] ; then
        OUTTIME=${CENTURY}010101-${CENTURY}991231
      fi
      if [ "$CENTURY" = "05" ] ; then
        OUTTIME=${CENTURY}000101-${CENTURY}121231
      fi ;;
  esac
#
  export OUTTIME
  SUFFIX=".${OUTTIME}.nc" ; export SUFFIX
#
# Extract each field from all files
#
  echo -n "TS Transpose_Data start: " ; date
  ./Transpose_Data
  if [ $? -ne 0 ] ; then
    echo "Transpose_Data failed"
    ./update_status error "$CASE $HIST $TPER"
    exit 1
  fi
  echo -n "TS Transpose_Data end  : " ; date
#
# If cice, split hemispheres
#
  case "$HTYP" in
    cice ) 
    cd $CACHEDIR
    echo -n "TS split cice hemis start: " ; date
    ../split_cice_hemis
    echo -n "TS split cice hemis end  : " ; date
    cd $LOCAL_PROC ;;
  esac
#
# Store completed data on archival system
#
  echo -n "TS archive start: " ; date
  ./store_to_archive
  if [ $? -ne 0 ] ; then
    echo "store_to_archive failed"
    ./update_status error "$CASE $HIST $TPER"
    exit 1
  else
    echo -n "TS archive end: " ; date
  fi
done
#
# Completed
#
./update_status complete
echo -n "TS COMPLETE: " ; date
