head	1.2;
access;
symbols;
locks;
comment	@# @;


1.2
date	2012.01.06.20.27.17;	author strandwg;	state Exp;
branches;
next	1.1;

1.1
date	2011.12.02.17.08.12;	author strandwg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@program LImon_CMOR
  ! Convert CESM data from single-field format to CMOR-compliant format
  !
  ! NOTE: 'model_id' and first part of 'source' MUST MATCH or CMOR will throw error
  !
  use cmor_users_functions
  use counters_netcdf_jfl
  use interfaces_netcdf_jfl
  use definitions_netcdf_jfl
  use exp_info
  use files_info
  use table_info
  use xwalk_info
  use grid_info
  use output_times_info
  use mycmor_info
  !
  implicit none
  !
  !  uninitialized variables used in communicating with CMOR:
  !
  integer::error_flag,cmor_var_id
  real,dimension(:,:)  ,allocatable::indat2a,indat2b,indat2c,cmordat2d,psdata
  real,dimension(:,:,:),allocatable::indat3a,indat3b,indat3c,cmordat3d,work3da,work3db
  double precision,dimension(:)  ,allocatable::time
  double precision,dimension(:,:),allocatable::time_bnds
  double precision,dimension(1)  ::tval
  double precision,dimension(2,1)::tbnd
  !
  ! Other variables
  !
  character(len=256)::exp_file,xwalk_file,table_file,svar,tstr,original_name,logfile,cmor_filename
  integer::i,j,k,m,n,tcount,it,ivar,length,iexp,jexp,itab,ixw,ilev,ic
  real::spval
  !
  ! Initialize time indices
  ! 
  tidx1 = -999 ; tidx2 = -999
  !
  ! GO!
  !
  mycmor%table_file = 'Tables/CMIP5_LImon'
  call load_table_info
  !
  ! Get "crossxwalk" (xwalk) information
  !   Provides information on relationship between CMOR variables and
  !   model variables
  !
  xwalk_file = 'xwalk_LImon.txt'
  call load_xwalk(xwalk_file)
  !
  ! Get experiment information
  !
  exp_file = 'experiments.txt'
  call load_exp(exp_file)
  !
  read(*,*) case_read
  read(*,*) comp_read
  !
  ! Get experiment metadata from exp table and input case information
  !
  call get_exp_metadata
  !
  ! Get grid information
  !
  call get_lnd_grid
  !
  ! Set up CMOR subroutine arguments
  !
  call get_cmor_info
  !
  ! Parse RIP code into components
  !
  call parse_rip
  !
  ! Step through CMOR table entries to see what CESM fields we can read and in process, and if so, do it!
  !
  table_loop: do itab = 1,num_tab
     xwalk_loop: do ixw = 1,num_xw
        mycmor%positive = ' '
        time_counter = 0
        var_counter  = 0
        error_flag   = 0
        var_found    = 0
        xw_found     = 0
        time_units   = ' '
        original_name= ' '
        all_continue = .false.
        ncfile(:,:)(1:) = ' '
        nc_nfiles(:)    = 0
        !
        ! The meaty part
        !
        if (xw(ixw)%entry == table(itab)%variable_entry) then
           write(*,'(''MATCH CMIP5: '',a,'' CESM: '',5(a,'',''))') trim(xw(ixw)%entry),(trim(xw(ixw)%cesm_vars(ivar)),ivar=1,xw(ixw)%ncesm_vars)
           do ivar = 1,xw(ixw)%ncesm_vars
              if ((trim(xw(ixw)%cesm_vars(ivar)) == 'UNKNOWN').or.(trim(xw(ixw)%cesm_vars(ivar)) == 'UNAVAILABLE')) then
                 write(*,'(''UNAVAILABLE/UNKNOWN: '',a,'' == '',a)') trim(xw(ixw)%entry),trim(table(itab)%variable_entry)
              else
                 write(*,'(''CHECKING AVAILABILITY OF: '',a,''.'',a,''.'',a,''.* FILES'')') trim(case_read),trim(comp_read),trim(xw(ixw)%cesm_vars(ivar))
                 call build_filenames(case_read,comp_read,xw(ixw)%cesm_vars(ivar),ivar,exp(exp_found)%begyr,exp(exp_found)%endyr)
              endif
           enddo
           !
           ! Open CESM file(s) and get information(s)
           !
           if (all_continue) then
              do ivar = 1,xw(ixw)%ncesm_vars
                 do ifile = 1,nc_nfiles(ivar)
                    call open_cdf(myncid(ifile,ivar),trim(ncfile(ifile,ivar)),.true.)
                    call get_dims(myncid(ifile,ivar))
                    call get_vars(myncid(ifile,ivar))
                    !
                    do n=1,dim_counter
                       length = len_trim(dim_info(n)%name)
                       if(dim_info(n)%name(:length).eq.'time') then
                          ntimes(ifile,ivar) = dim_info(n)%length
                       endif
                    enddo
                    call read_att_text(myncid(ifile,ivar),'time','units',time_units)
                    do n=1,var_counter
                       if (trim(var_info(n)%name) == trim(xw(ixw)%cesm_vars(ivar))) then
                          var_found(ifile,ivar) = n
                       endif
                    enddo
                    if (var_found(ifile,ivar) == 0) then
                       !
                       ! Never found - quit
                       !
                       write(*,'(''NEVER FOUND: '',a,'' STOP. '')') trim(xw(ixw)%cesm_vars(ivar))
                       stop
                    endif
                    call close_cdf(myncid(ifile,ivar))
                 enddo
              enddo
              !
              myncid = 0
              !
              ! Specify path where tables can be found and indicate that existing netCDF files should be overwritten.
              !
              write(logfile,'(''log_cmor.'',a,''.'',a,''_'',a)') &
                   trim(mycmor%experiment_id),&
                   trim(exp(exp_found)%rip_code),&
                   trim(xw(ixw)%entry)
              error_flag = cmor_setup(inpath='CMOR',&
                   netcdf_file_action=CMOR_REPLACE,&
                   logfile=logfile)
              !
              error_flag = cmor_dataset(                              &
                   outpath=mycmor%outpath,                            &
                   experiment_id=mycmor%experiment_id,                &
                   institution=mycmor%institution,                    &
                   source=mycmor%source,                              &
                   calendar=mycmor%calendar,                          &
                   realization=mycmor%realization,                    &
                   contact=mycmor%contact,                            &
                   history=mycmor%history,                            &
                   comment=mycmor%comment,                            &
                   references=mycmor%references,                      &
                   model_id=mycmor%model_id,                          &
                   forcing=mycmor%forcing,                            &
                   initialization_method=mycmor%initialization_method,&
                   physics_version=mycmor%physics_version,            &
                   institute_id=mycmor%institute_id,                  &
                   parent_experiment_id=mycmor%parent_experiment_id,  &
                   parent_experiment_rip=mycmor%parent_experiment_rip,&
                   branch_time=mycmor%branch_time)
              if (error_flag < 0) then
                 write(*,*) 'ERROR on cmor_dataset!'
                 write(*,*) 'outpath               = ',trim(mycmor%outpath)
                 write(*,*) 'experiment_id         = ',trim(mycmor%experiment_id)
                 write(*,*) 'institution           = ',trim(mycmor%institution)
                 write(*,*) 'source                = ',trim(mycmor%source)
                 write(*,*) 'calendar              = ',trim(mycmor%calendar)
                 write(*,*) 'realization           = ',mycmor%realization
                 write(*,*) 'initialization_method = ',mycmor%initialization_method
                 write(*,*) 'physics_version       = ',mycmor%physics_version
                 write(*,*) 'contact               = ',trim(mycmor%contact)
                 write(*,*) 'history               = ',trim(mycmor%history)
                 write(*,*) 'comment               = ',trim(mycmor%comment)
                 write(*,*) 'references            = ',trim(mycmor%references)
                 write(*,*) 'model_id              = ',trim(mycmor%model_id)
                 write(*,*) 'forcing               = ',trim(mycmor%forcing)
                 write(*,*) 'institute_id          = ',trim(mycmor%institute_id)
                 write(*,*) 'parent_experiment_id  = ',trim(mycmor%parent_experiment_id)
                 write(*,*) 'parent_experiment_rip = ',trim(mycmor%parent_experiment_rip)
                 write(*,*) 'branch_time           = ',mycmor%branch_time
                 stop
              endif
              !
              ! Add global metadata
              !
              call add_global_metadata
              !
              ! Define axes via 'cmor_axis'
              !
              call define_lnd_axes(table(itab)%dimensions)
              ! 
              ! Make manual alterations so that CMOR works. Silly code!
              !
              if (xw(ixw)%ncesm_vars == 1) then
                 write(original_name,'(a)') xw(ixw)%cesm_vars(1)
              endif
              if (xw(ixw)%ncesm_vars == 2) then
                 write(original_name,'(a,'','',a)') (trim(xw(ixw)%cesm_vars(ivar)),ivar=1,xw(ixw)%ncesm_vars)
              endif
              if (xw(ixw)%ncesm_vars == 3) then
                 write(original_name,'(a,'','',a,'','',a)') (trim(xw(ixw)%cesm_vars(ivar)),ivar=1,xw(ixw)%ncesm_vars)
              endif
!!$              !
!!$              ! Modify units as necessary to accomodate udunits' inability to convert 
!!$              !
!!$              select case (xw(ixw)%entry)
!!$              case ('tauu','tauv','hfss','rlut','rlutcs','hfls','rlus','rsus','rsuscs','rsut','rsutcs')
!!$                 mycmor%positive = 'up'
!!$              case ('rlds','rldscs','rsds','rsdscs','rsdt','rtmt')
!!$                 mycmor%positive = 'down'
!!$              case ('clt','ci')
!!$                 var_info(var_found(1,1))%units = '1'
!!$              case ('hurs','cl')
!!$                 var_info(var_found(1,1))%units = '%'
!!$              case ('prc','pr','prsn')
!!$                 var_info(var_found(1,1))%units = 'kg m-2 s-1'
!!$              end select
              !
              spval=var_info(var_found(1,1))%missing_value
              !
              write(*,*) 'calling cmor_variable:'
              write(*,*) 'table         = ',trim(mycmor%table_file)
              write(*,*) 'table_entry   = ',trim(xw(ixw)%entry)
              write(*,*) 'dimensions    = ',trim(table(itab)%dimensions)
              write(*,*) 'units         = ',trim(var_info(var_found(1,1))%units)
              write(*,*) 'axis_ids      = ',axis_ids(1:4)
              write(*,*) 'missing_value = ',var_info(var_found(1,1))%missing_value
              write(*,*) 'positive      = ',trim(mycmor%positive)
              write(*,*) 'original_name = ',trim(original_name)
              !
              select case (xw(ixw)%entry)
!!$              case ('ta','ua','va','hus','hur','wap','zg','tro3','tro3Clim','co2','co2Clim','ch4','ch4Clim','n2o','n2oClim')
!!$                 cmor_var_id = cmor_variable(                            &
!!$                      table=mycmor%table_file,                           &
!!$                      table_entry=xw(ixw)%entry,                         &
!!$                      units=var_info(var_found(1,1))%units,                &
!!$                      axis_ids=(/axis_ids(1),axis_ids(2),axis_ids(3),axis_ids(4)/),  &
!!$                      missing_value=var_info(var_found(1,1))%missing_value,&
!!$                      positive=mycmor%positive,                          &
!!$                      original_name=original_name,                       &
!!$                      comment=xw(ixw)%comment)
!!$              case ('clw','cli','cl')
!!$                 cmor_var_id = cmor_variable(                            &
!!$                      table=mycmor%table_file,                           &
!!$                      table_entry=xw(ixw)%entry,                         &
!!$                      units=var_info(var_found(1,1))%units,                &
!!$                      axis_ids=(/axis_ids(1),axis_ids(2),axis_ids(3),axis_ids(4)/),  &
!!$                      missing_value=var_info(var_found(1,1))%missing_value,&
!!$                      positive=mycmor%positive,                          &
!!$                      original_name=original_name,                       &
!!$                      comment=xw(ixw)%comment)
              case default
                 cmor_var_id = cmor_variable(                            &
                      table=mycmor%table_file,                           &
                      table_entry=xw(ixw)%entry,                         &
                      units=var_info(var_found(1,1))%units,                &
                      axis_ids=(/axis_ids(1),axis_ids(2),axis_ids(3)/),  &
                      missing_value=var_info(var_found(1,1))%missing_value,&
                      positive=mycmor%positive,                          &
                      original_name=original_name,                       &
                      comment=xw(ixw)%comment)
              end select
              write(*,'(''called cmor_variable; cmor_var_id:'',i8)') cmor_var_id
              !
              ! Perform derivations and cycle through time, writing data too
              !
              select case (xw(ixw)%entry)
!!$              case ('ccb','cct','clivi','clwvi','evspsbl','hfls','hfss','hurs','huss',&
!!$                    'prw','psl','ps','rldscs','rlds','rlutcs','rlut','rsdscs','rsds','rsdt',&
!!$                    'sci','tas','tasmax','tasmin','tauu','tauv','ts')
!!$                 !
!!$                 ! No change
!!$                 !
!!$                 allocate(indat2a(nlons,nlats))
!!$                 do ivar = 1,xw(ixw)%ncesm_vars
!!$                    do ifile = 1,nc_nfiles(ivar)
!!$                       call open_cdf(myncid(ifile,ivar),trim(ncfile(ifile,ivar)),.true.)
!!$                       call get_dims(myncid(ifile,ivar))
!!$                       call get_vars(myncid(ifile,ivar))
!!$                       !
!!$                       if (.not.(allocated(time)))      allocate(time(ntimes(ifile,ivar)))
!!$                       if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(ifile,ivar)))
!!$                       !
!!$                       do n = 1,ntimes(ifile,ivar)
!!$                          time_counter = n
!!$                          call read_var(myncid(ifile,ivar),'time_bnds',time_bnds(:,n))
!!$                       enddo
!!$                       time = (time_bnds(1,:)+time_bnds(2,:))/2.
!!$                       !
!!$                       if (ntimes(ifile,ivar) == 56940) then         ! 20C from 1850-2005, use all times, 4 * 35y + 1 * 16y chunks
!!$                          nchunks(ifile)= 5
!!$                          tidx1(1:nchunks(ifile)) = (/    1, 12776, 25551, 38326, 51101/)      ! 1850, 1885, 1920, 1955, 1990
!!$                          tidx2(1:nchunks(ifile)) = (/12775, 25550, 38325, 51100, 56940/)      ! 1884, 1919, 1954, 1989, 2005
!!$                       endif
!!$                       if (ntimes(ifile,ivar) == 35040) then         ! RCP from 2005-2100, use only 2006 onwards, 2 * 35y + 1 * 25y chunks
!!$                          nchunks(ifile)= 3
!!$                          tidx1(1:nchunks(ifile)) = (/  366, 13141, 25916/)      ! 2006, 2041, 2076
!!$                          tidx2(1:nchunks(ifile)) = (/13140, 25915, 35040/)      ! 2040, 2075, 2100
!!$                       endif
!!$                       if (ntimes(ifile,ivar) == 34675) then         ! RCP from 2006-2100, use all times, 2 * 35y + 1 * 25y chunks
!!$                          nchunks(ifile)= 3
!!$                          tidx1(1:nchunks(ifile)) = (/    1, 12776, 25551/)      ! 2006, 2041, 2076
!!$                          tidx2(1:nchunks(ifile)) = (/12775, 25550, 34675/)      ! 2040, 2075, 2100
!!$                       endif
!!$                       do ic = 1,nchunks(ifile)
!!$                          do it = tidx1(ic),tidx2(ic)
!!$                             time_counter = it
!!$                             !
!!$                             call read_var(myncid(ifile,ivar),var_info(var_found(ifile,ivar))%name,indat2a)
!!$                             !
!!$                             tval(1) = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
!!$                             error_flag = cmor_write(          &
!!$                                  var_id        = cmor_var_id, &
!!$                                  data          = indat2a,     &
!!$                                  ntimes_passed = 1,           &
!!$                                  time_vals     = tval,        &
!!$                                  time_bnds     = tbnd)
!!$                             if (error_flag < 0) then
!!$                                write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
!!$                                stop
!!$                             endif
!!$                          enddo
!!$                          write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
!!$                          !
!!$                          if (ic < nchunks(ifile)) then
!!$                             cmor_filename(1:) = ' '
!!$                             error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
!!$                             if (error_flag < 0) then
!!$                                write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
!!$                                stop
!!$                             else
!!$                                write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
!!$                             endif
!!$                          endif
!!$                       enddo
!!$                    enddo
!!$                 enddo
              case ('snw')
                 !
                 ! snw : Add SNOWICE + SNOWLIQ
                 !
                 allocate(indat2a(nlons,nlats),indat2b(nlons,nlats))
                 allocate(cmordat2d(nlons,nlats))
                 if (nc_nfiles(1) == nc_nfiles(2)) then
                    do ifile = 1,nc_nfiles(1)
                       call open_cdf(myncid(ifile,1),trim(ncfile(ifile,1)),.true.)
                       call get_dims(myncid(ifile,1))
                       call get_vars(myncid(ifile,1))
                       call open_cdf(myncid(ifile,2),trim(ncfile(ifile,2)),.true.)
                       call get_dims(myncid(ifile,2))
                       call get_vars(myncid(ifile,2))
                       !
                       if (.not.(allocated(time)))      allocate(time(ntimes(ifile,1)))
                       if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(ifile,1)))
                       !
                       do n=1,ntimes(ifile,1)
                          time_counter = n
                          call read_var(myncid(ifile,1),'time_bounds',time_bnds(:,n))
                       enddo
                       time = (time_bnds(1,:)+time_bnds(2,:))/2.
                       !
                       select case (ntimes(ifile,1))
                       case ( 1872,1140,3612,6012,12012 )  ! All data
                          nchunks(ifile) = 1
                          tidx1(1:nchunks(ifile)) = 1
                          tidx2(1:nchunks(ifile)) = ntimes(ifile,1)
                       case ( 1152 )  ! RCP, 2005-2100, skip 2006
                          nchunks(ifile) = 1
                          tidx1(1:nchunks(ifile)) = 13
                          tidx2(1:nchunks(ifile)) = ntimes(ifile,1)
                       case ( 4824 )  ! LGM from 1499-1900, 1800-1900 (101y) only
                          nchunks(ifile) = 1
                          tidx1(1:nchunks(ifile)) = 3613
                          tidx2(1:nchunks(ifile)) = ntimes(ifile,1)
                       end select
                       do ic = 1,nchunks(ifile)
                          do it = tidx1(ic),tidx2(ic)
                             time_counter = it
                             write(*,'(i8,'' reading '',a,'' from '',a)') myncid(ifile,1),trim(var_info(var_found(ifile,1))%name),trim(ncfile(ifile,1))
                             call read_var(myncid(1,1),var_info(var_found(1,1))%name,indat2a)
                             write(*,'(i8,'' reading '',a,'' from '',a)') myncid(ifile,2),trim(var_info(var_found(ifile,2))%name),trim(ncfile(ifile,2))
                             call read_var(myncid(1,2),var_info(var_found(1,2))%name,indat2b)
                             where ((indat2a /= spval).and.(indat2b /= spval))
                                cmordat2d = (indat2a + indat2b)
                             elsewhere
                                cmordat2d = spval
                             endwhere
                             tval(1) = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                             error_flag = cmor_write(      &
                                  var_id        = cmor_var_id, &
                                  data          = cmordat2d,   &
                                  ntimes_passed = 1,       &
                                  time_vals     = tval,    &
                                  time_bnds     = tbnd)
                             if (error_flag < 0) then
                                write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                                stop
                             endif
                          enddo
                          write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
                          !
                          if (ic < nchunks(ifile)) then
                             cmor_filename(1:) = ' '
                             error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                             if (error_flag < 0) then
                                write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                                stop
                             else
                                write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                             endif
                          endif
                       enddo
                    enddo
                 endif
                 error_flag = cmor_close()
                 if (error_flag < 0) then
                    write(*,'(''ERROR cmor_close of : '',a,'' flag: '',i6)') ,trim(xw(ixw)%entry),error_flag
                 else
                    write(*,'('' GOOD cmor_close of : '',a,'' flag: '',i6)') ,trim(xw(ixw)%entry),error_flag
                 endif
              end select
              if (allocated(indat2a))   deallocate(indat2a)
              if (allocated(indat2b))   deallocate(indat2b)
              if (allocated(indat2c))   deallocate(indat2c)
              if (allocated(cmordat2d)) deallocate(cmordat2d)
              if (allocated(indat3a))   deallocate(indat3a)
              if (allocated(indat3b))   deallocate(indat3b)
              if (allocated(work3da))   deallocate(work3da)
              if (allocated(work3db))   deallocate(work3db)
              do ivar = 1,xw(ixw)%ncesm_vars
                 do ifile = 1,nc_nfiles(ivar)
                    call close_cdf(myncid(ifile,ivar))
                 enddo
              enddo
              !
              ! Reset
              !
              time_counter = 0
              var_counter  = 0
              error_flag   = 0
              var_found    = 0
              mycmor%positive = ' '
              original_name= ' '
              !
              if (allocated(time))      deallocate(time)
              if (allocated(time_bnds)) deallocate(time_bnds)
              !
!!$              error_flag = cmor_close()
!!$              if (error_flag < 0) then
!!$                 write(*,'(''ERROR cmor_close of : '',a,'' flag: '',i6)') ,trim(xw(ixw)%entry),error_flag
!!$              else
!!$                 write(*,'('' GOOD cmor_close of : '',a,'' flag: '',i6)') ,trim(xw(ixw)%entry),error_flag
!!$              endif
           endif
        endif
     enddo xwalk_loop
  enddo table_loop
end program LImon_CMOR
@


1.1
log
@Initial revision
@
text
@d1 2
a2 3
program Amon_CMOR
  ! Convert CCSM4 atmospheric monthly (cam2.h0) data from single-field format
  ! to CMOR-compliant format
d11 1
d15 1
d22 3
a24 2
  INTEGER::error_flag,var_ids
  REAL,DIMENSION(:,:),ALLOCATABLE::indat2a,indat2b,indat2c,cmordat
d27 2
a28 2
  DOUBLE PRECISION,DIMENSION(1)  ::tval
  DOUBLE PRECISION,DIMENSION(2,1)::tbnd
d32 7
a38 8
  character(len=256)::exp_file,xwalk_file,table_file,svar,tstr,original_name,logfile
  integer::i,j,k,m,n,tcount,it,ivar,length,iexp,jexp,itab,ixw
  logical::all_continue
  !
  character(len=256),dimension(10)::ncfile
  real,dimension(10)::allmax,allmin,scale_factor
  integer,dimension(10)::ncid,var_found
  logical,dimension(10)::continue
d42 2
a43 2
  mycmor%table_file = 'Tables/CMIP5_Amon'
  call load_table
d49 1
a49 1
  xwalk_file = 'xwalk_Amon.txt'
d66 1
a66 1
  call get_atm_grid
d85 1
a85 5
        scale_factor = 1.
        allmax       = -1.e36
        allmin       =  1.e36
        all_continue = .true.
        continue(:)  = .false.
d88 6
a93 3
!
! The meaty part
!
d95 1
d98 1
a98 1
                 write(*,'('' UNAVAILABLE/UNKNOWN: '',a,'' == '',a)') trim(xw(ixw)%entry),trim(table(itab)%variable_entry)
d100 2
a101 24
                 write(ncfile(ivar),'(''data/'',a,''.'',a,''.'',a,''.'',a,''01-'',a,''12.nc'')') &
                      trim(case_read),&
                      trim(comp_read),&
                      trim(xw(ixw)%cesm_vars(ivar)),&
                      exp(exp_found)%begin_end(1:4),&
                      exp(exp_found)%begin_end(6:9)
                 inquire(file=trim(ncfile(ivar)),exist=continue(ivar))
                 if (.not.(continue(ivar))) then
                    write(ncfile(ivar),'(''data/'',a,''.'',a,''.'',a,''.'',a,''-01_cat_'',a,''-12.nc'')') &
                         trim(case_read),&
                         trim(comp_read),&
                         trim(xw(ixw)%cesm_vars(ivar)),&
                         exp(exp_found)%begin_end(1:4),&
                         exp(exp_found)%begin_end(6:9)
                    inquire(file=trim(ncfile(ivar)),exist=continue(ivar))
                 endif
                 if (.not.(continue(ivar))) then
                    write(*,*) trim(ncfile(ivar)),' NOT FOUND.'
                 else
                    write(*,'('' GOOD TO GO : '',a,'' == '',a,'' from CESM file: '',a)') &
                         trim(xw(ixw)%entry),&
                         trim(table(itab)%variable_entry),&
                         trim(ncfile(ivar))
                 endif
a102 4
              !
              ! Check and make sure all files available
              !
              all_continue = all_continue.and.(continue(ivar))
d109 23
a131 16
                 call open_cdf(ncid(ivar),trim(ncfile(ivar)),.true.)
                 write(*,'(''OPENING: '',a80,'' ncid: '',i10)') trim(ncfile(ivar)),ncid(ivar)
                 call get_dims(ncid(ivar))
                 call get_vars(ncid(ivar))
                 !
                 do n=1,dim_counter
                    length = len_trim(dim_info(n)%name)
                    if(dim_info(n)%name(:length).eq.'time') then
                       ntimes = dim_info(n)%length
                    endif
                 enddo
                 call read_att_text(ncid(1),'time','units',time_units)
                 !
                 do n=1,var_counter
                    if (trim(var_info(n)%name) == trim(xw(ixw)%cesm_vars(ivar))) then
                       var_found(ivar) = n
d133 1
a133 19
                 enddo
                 if (var_found(ivar) == 0) then
                    write(*,*) trim(xw(ixw)%cesm_vars(ivar)),' NEVER FOUND. STOP.'
                    stop
                 endif
                 !
                 if (.not.(allocated(time)))      then
                    allocate(time(ntimes))
                    write(*,*) 'allocate(time(ntimes))'
                 endif
                 if (.not.(allocated(time_bnds))) then
                    allocate(time_bnds(2,ntimes))
                    write(*,*) 'allocate(time_bnds(2,ntimes))'
                 endif
                 !
                 do n=1,ntimes
                    time_counter = n
                    call read_var(ncid(ivar),'time_bnds',time_bnds(:,n))
                    time(n) = (time_bnds(1,n)+time_bnds(2,n))/2.
d136 2
a137 2
           endif
           if (all_continue) then
d169 20
a188 19
                 write(*,*) 'Error on cmor_dataset!'
                 write(*,*) 'outpath=',mycmor%outpath
                 write(*,*) 'experiment_id=',mycmor%experiment_id
                 write(*,*) 'institution=',mycmor%institution
                 write(*,*) 'source=',mycmor%source
                 write(*,*) 'calendar=',mycmor%calendar
                 write(*,*) 'realization=',mycmor%realization
                 write(*,*) 'contact=',mycmor%contact
                 write(*,*) 'history=',mycmor%history
                 write(*,*) 'comment=',mycmor%comment
                 write(*,*) 'references=',mycmor%references
                 write(*,*) 'model_id=',mycmor%model_id
                 write(*,*) 'forcing=',mycmor%forcing
                 write(*,*) 'initialization_method=',mycmor%initialization_method
                 write(*,*) 'physics_version=',mycmor%physics_version
                 write(*,*) 'institute_id=',mycmor%institute_id
                 write(*,*) 'parent_experiment_id=',mycmor%parent_experiment_id
                 write(*,*) 'parent_experiment_rip=',mycmor%parent_experiment_rip
                 write(*,*) 'branch_time=',mycmor%branch_time
d197 1
a197 1
              call define_atm_axes(table(itab)%dimensions)
a200 2
              allocate(indat2a(nlons,nlats),cmordat(nlons,nlats))
              write(*,*) 'allocate(indat2a(nlons,nlats),cmordat(nlons,nlats))'
d204 1
a204 3
              if (xw(ixw)%ncesm_vars .ge. 2) then
                 allocate(indat2b(nlons,nlats))
                 write(*,*) 'allocate(indat2b(nlons,nlats))'
d207 1
a207 3
              if (xw(ixw)%ncesm_vars .ge. 3) then
                 allocate(indat2c(nlons,nlats))
                 write(*,*) 'allocate(indat2c(nlons,nlats))'
d210 27
d239 30
a268 10
              case ('tauu','tauv','hfss','rlut','rlutcs','hfls','rlus','rsus','rsuscs','rsut','rsutcs')
                 mycmor%positive = 'up'
              case ('rlds','rldscs','rsds','rsdscs','rsdt','rtmt')
                 mycmor%positive = 'down'
              case ('clt','ci')
                 var_info(var_found(1))%units = '1'
              case ('hurs')
                 var_info(var_found(1))%units = '%'
              case ('prc','pr','prsn')
                 var_info(var_found(1))%units = 'kg m-2 s-1'
d270 76
d347 74
a420 48
              var_ids = cmor_variable(                                &
                   table=mycmor%table_file,                           &
                   table_entry=xw(ixw)%entry,                         &
                   units=var_info(var_found(1))%units,                &
                   axis_ids=(/axis_ids(1),axis_ids(2),axis_ids(3)/),  &
                   missing_value=var_info(var_found(1))%missing_value,&
                   positive=mycmor%positive,                          &
                   original_name=original_name,                       &
                   comment=xw(ixw)%comment)
              !
              write(*,*) 'cmor_variable:'
              write(*,*) 'varids=',var_ids
              write(*,*) 'table=',trim(mycmor%table_file)
              write(*,*) 'table_entry=',trim(xw(ixw)%entry)
              write(*,*) 'dimensions=',trim(table(itab)%dimensions)
              write(*,*) 'units=',trim(var_info(var_found(1))%units)
              write(*,*) 'missing_value=',var_info(var_found(1))%missing_value
              write(*,*) 'positive=',trim(mycmor%positive)
              write(*,*) 'original_name=',trim(original_name)
              !
              ! Cycle through time
              !
              time_loop: DO it=1, ntimes
                 time_counter = it
                 if (xw(ixw)%ncesm_vars == 1) then
                    call read_var(ncid(1),var_info(var_found(1))%name,indat2a)
!                    write(*,'(''Reading '',a20,'' T= '',i10)') trim(var_info(var_found(1))%name),it
                    allmax(1) = max(allmax(1),maxval(indat2a)) ; allmin(1) = min(allmin(1),minval(indat2a))
                    cmordat = indat2a
                 endif
                 if (xw(ixw)%ncesm_vars == 2) then
                    call read_var(ncid(1),var_info(var_found(1))%name,indat2a)
!                    write(*,'(''Reading '',a20,'' T= '',i10)') trim(var_info(var_found(1))%name),it
                    call read_var(ncid(2),var_info(var_found(2))%name,indat2b)
!                    write(*,'(''Reading '',a20,'' T= '',i10)') trim(var_info(var_found(2))%name),it
                    allmax(1) = max(allmax(1),maxval(indat2a)) ; allmin(1) = min(allmin(1),minval(indat2a))
                    allmax(2) = max(allmax(2),maxval(indat2b)) ; allmin(2) = min(allmin(2),minval(indat2b))
                    select case (xw(ixw)%entry)
                    case ('pr','prsn')
                       var_info(var_found(ivar))%units = 'kg m-2 s-1'
                       cmordat = 1000.*(indat2a + indat2b)
                    case ('rlus')
                       cmordat = indat2a + indat2b
                    case ('rsus','rsuscs','rsut','rsutcs','rtmt')
                       cmordat = indat2a - indat2b
                    case default
                       cmordat = indat2a
                    end select
d422 1
a422 22
                 if (xw(ixw)%ncesm_vars == 3) then
                    call read_var(ncid(1),var_info(var_found(1))%name,indat2a)
                    write(*,'(''Reading '',a20,'' T= '',i10)') trim(var_info(var_found(1))%name),it
                    call read_var(ncid(2),var_info(var_found(2))%name,indat2b)
                    write(*,'(''Reading '',a20,'' T= '',i10)') trim(var_info(var_found(2))%name),it
                    call read_var(ncid(3),var_info(var_found(3))%name,indat2b)
                    write(*,'(''Reading '',a20,'' T= '',i10)') trim(var_info(var_found(3))%name),it
                    allmax(1) = max(allmax(1),maxval(indat2a)) ; allmin(1) = min(allmin(1),minval(indat2a))
                    allmax(2) = max(allmax(2),maxval(indat2b)) ; allmin(2) = min(allmin(2),minval(indat2b))
                    allmax(3) = max(allmax(3),maxval(indat2c)) ; allmin(3) = min(allmin(3),minval(indat2c))
                    cmordat = indat2a
                 endif
                 !
                 tval(1)   = time(it)
                 tbnd(1,1) = time_bnds(1,it)
                 tbnd(2,1) = time_bnds(2,it)
                 error_flag = cmor_write(      &
                      var_id        = var_ids, &
                      data          = cmordat, &
                      ntimes_passed = 1,       &
                      time_vals     = tval,    &
                      time_bnds     = tbnd)
d424 3
a426 3
                    write(*,*) 'Error writing ',xw(ixw)%entry, ', which I call ', xw(ixw)%cesm_vars
                    write(*,*) 'Processing time sample: ', time
                    stop
d428 9
a436 1
              end do time_loop
d438 3
a440 1
                 call close_cdf(ncid(ivar))
d443 1
a443 1
              ! Close all files opened by CMOR.
a444 7
              error_flag = cmor_close()
              write(*,'(''********************************************************************************'')')
              write(*,'(''********************************************************************************'')')
              write(*,'(''CMOR executed to completion; T#: '',i5,'' X#: '',i5,'' EXT: '',3(2g10.4))') &
                   itab,ixw,allmin(1:xw(ixw)%ncesm_vars),allmax(1:xw(ixw)%ncesm_vars)
              write(*,'(''********************************************************************************'')')
              write(*,'(''********************************************************************************'')')
a448 4
              scale_factor = 1.
              allmax       = -1.e36
              allmin       =  1.e36
              continue(:)  = .false.
d452 9
a460 24
              if (allocated(time)) then
                 deallocate(time)
                 write(*,*) 'deallocate(time)'
              endif
              if (allocated(time_bnds)) then
                 deallocate(time_bnds)
                 write(*,*) 'deallocate(time_bnds)'
              endif
              if (allocated(indat2a)) then
                 deallocate(indat2a)
                 write(*,*) 'deallocate(indat2a)'
              endif
              if (allocated(indat2b)) then
                 deallocate(indat2b)
                 write(*,*) 'deallocate(indat2b)'
              endif
              if (allocated(indat2c)) then
                 deallocate(indat2c)
                 write(*,*) 'deallocate(indat2c)'
              endif
              if (allocated(cmordat)) then
                 deallocate(cmordat)
                 write(*,*) 'deallocate(cmordat)'
              endif
d465 1
a465 1
end program Amon_CMOR
@
