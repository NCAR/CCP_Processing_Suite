head	1.5;
access;
symbols;
locks;
comment	@# @;


1.5
date	2012.04.25.18.44.06;	author strandwg;	state Exp;
branches;
next	1.4;

1.4
date	2012.04.24.22.22.06;	author strandwg;	state Exp;
branches;
next	1.3;

1.3
date	2012.04.23.20.06.13;	author strandwg;	state Exp;
branches;
next	1.2;

1.2
date	2012.04.12.19.35.54;	author strandwg;	state Exp;
branches;
next	1.1;

1.1
date	2012.02.09.23.32.55;	author strandwg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@program Do3hr_CMOR
  ! Convert CCSM4 atm monthly (cam2.h0) data from single-field format
  ! to CMOR-compliant format
  !
  ! NOTE: 'model_id' and first part of 'source' MUST MATCH or CMOR will throw error
  !
  use cmor_users_functions
  use counters_netcdf_jfl
  use interfaces_netcdf_jfl
  use definitions_netcdf_jfl
  use exp_info
  use files_info
  use table_info
  use xwalk_info
  use grid_info
  use mycmor_info
  use output_times_info
  !
  implicit none
  !
  !  uninitialized variables used in communicating with CMOR:
  !
  integer::error_flag,cmor_var_id
  real,dimension(:,:),allocatable::indat2a,indat2b,indat2c,cmordat2d,psdata
  double precision,dimension(:)  ,allocatable::time
  double precision,dimension(:,:),allocatable::time_bnds
  double precision,dimension(1)  ::tval
  double precision,dimension(2,1)::tbnd
  !
  ! Other variables
  !
  character(len=256)::exp_file,xwalk_file,table_file,svar,tstr,original_name,logfile,cmor_filename
  integer::i,j,k,m,n,tcount,it,ivar,length,iexp,jexp,ixw,ilev,ic
  real::spval
  logical::does_exist
  !
  ! GO!
  !
  mycmor%table_file = '3hr'
  !
  ! Get experiment information
  !
  exp_file = 'experiments.txt'
  call load_exp(exp_file)
  !
  read(*,*) case_read
  read(*,*) comp_read
  !
  ! Get experiment metadata from exp table and input case information
  !
  call get_exp_metadata
  !
  ! Get "crossxwalk" (xwalk) information
  !   Provides information on relationship between CMOR variables and
  !   model variables
  !
  xwalk_file = 'xwalk_'//trim(exp(exp_found)%cmip)//'_'//trim(mycmor%table_file)
  call load_xwalk(xwalk_file)
  !
  ! Get table information
  !
  mycmor%table_file = 'Tables/'//trim(exp(exp_found)%cmip)//'_'//trim(mycmor%table_file)
  inquire(file=mycmor%table_file,exist=does_exist)
  if (.not.(does_exist)) then
     write(*,*) 'Cannot find ',trim(mycmor%table_file),'. Dying.'
     stop
  endif
  !
  ! Get grid information
  !
  call get_atm_grid
  !
  ! Set up CMOR subroutine arguments
  !
  call get_cmor_info
  !
  ! Parse RIP code into components
  !
  call parse_rip
  !
  ! Step through CMOR table entries to see what CESM fields we can read and in process, and if so, do it!
  !
  xwalk_loop: do ixw = 1,num_xw
     call reset_netcdf_var
     mycmor%positive = ' '
     error_flag      = 0
     time_units      = ' '
     !
     ! The meaty part
     !
     if (xw(ixw)%ncesm_vars == 0) then
        write(*,'(a,'' is UNAVAILABLE.'')') trim(xw(ixw)%entry)
        all_continue = .false.
     endif
     !
     do ivar = 1,xw(ixw)%ncesm_vars
        if (trim(xw(ixw)%cesm_vars(ivar)) == 'UNKNOWN') then
           write(*,'(a,'' has UNKNOWN equivalence.'')') trim(xw(ixw)%entry)
           xw(ixw)%ncesm_vars = 0
           all_continue = .false.
        else
           write(*,'(''CHECKING AVAILABILITY OF: '',a,''.'',a,''.'',a,''.* FILES'')') trim(case_read),trim(comp_read),trim(xw(ixw)%cesm_vars(ivar))
           call build_filenames(case_read,comp_read,xw(ixw)%cesm_vars(ivar),ivar,exp(exp_found)%begyr,exp(exp_found)%endyr,mycmor%table_file)
        endif
     enddo
     !
     ! Open CESM file(s) and get information(s)
     !
     if (all_continue) then
        do ivar = 1,xw(ixw)%ncesm_vars
           do ifile = 1,nc_nfiles(ivar)
              call open_cdf(myncid(ifile,ivar),trim(ncfile(ifile,ivar)),.true.)
              call get_dims(myncid(ifile,ivar))
              call get_vars(myncid(ifile,ivar))
              !
              do n=1,dim_counter
                 length = len_trim(dim_info(n)%name)
                 if(dim_info(n)%name(:length).eq.'time') then
                    ntimes(ifile,ivar) = dim_info(n)%length
                 endif
              enddo
              write(*,'(''OPENED: '',a,'' myncid: '',i10,'' NT: '',i10)') trim(ncfile(ifile,ivar)),myncid(ifile,ivar),ntimes(ifile,ivar)
              call read_att_text(myncid(ifile,ivar),'time','units',time_units)
              !
              do n=1,var_counter
                 if (trim(var_info(n)%name) == trim(xw(ixw)%cesm_vars(ivar))) then
                    var_found(ifile,ivar) = n
                 endif
              enddo
              if (var_found(ifile,ivar) == 0) then
                 write(*,'(''NEVER FOUND: '',a,'' STOP. '')') trim(xw(ixw)%cesm_vars(ivar))
                 stop
              endif
           enddo
        enddo
        !
        ! Specify path where tables can be found and indicate that existing netCDF files should be overwritten.
        !
        write(logfile,'(''log_cmor.'',a,''.'',a,''_'',a)') &
             trim(mycmor%experiment_id),&
             trim(exp(exp_found)%rip_code),&
             trim(xw(ixw)%entry)
        error_flag = cmor_setup(inpath='CMOR',&
             netcdf_file_action=CMOR_REPLACE,&
             logfile=logfile)
        !
        error_flag = cmor_dataset(                              &
             outpath=mycmor%outpath,                            &
             experiment_id=mycmor%experiment_id,                &
             institution=mycmor%institution,                    &
             source=mycmor%source,                              &
             calendar=mycmor%calendar,                          &
             realization=mycmor%realization,                    &
             contact=mycmor%contact,                            &
             history=mycmor%history,                            &
             comment=mycmor%comment,                            &
             references=mycmor%references,                      &
             model_id=mycmor%model_id,                          &
             forcing=mycmor%forcing,                            &
             initialization_method=mycmor%initialization_method,&
             physics_version=mycmor%physics_version,            &
             institute_id=mycmor%institute_id,                  &
             parent_experiment_id=mycmor%parent_experiment_id,  &
             parent_experiment_rip=mycmor%parent_experiment_rip,&
             branch_time=mycmor%branch_time)
        write(*,*) 'comment               = ',trim(mycmor%comment)
        write(*,*) 'realization           = ',mycmor%realization
        write(*,*) 'initialization_method = ',mycmor%initialization_method
        write(*,*) 'physics_version       = ',mycmor%physics_version
        if (error_flag < 0) then
           write(*,*) 'ERROR on cmor_dataset!'
           write(*,*) 'outpath               = ',mycmor%outpath
           write(*,*) 'experiment_id         = ',mycmor%experiment_id
           write(*,*) 'institution           = ',mycmor%institution
           write(*,*) 'source                = ',mycmor%source
           write(*,*) 'calendar              = ',mycmor%calendar
           write(*,*) 'realization           = ',mycmor%realization
           write(*,*) 'contact               = ',mycmor%contact
           write(*,*) 'history               = ',mycmor%history
           write(*,*) 'comment               = ',mycmor%comment
           write(*,*) 'references            = ',mycmor%references
           write(*,*) 'model_id              = ',mycmor%model_id
           write(*,*) 'forcing               = ',mycmor%forcing
           write(*,*) 'initialization_method = ',mycmor%initialization_method
           write(*,*) 'physics_version       = ',mycmor%physics_version
           write(*,*) 'institute_id          = ',mycmor%institute_id
           write(*,*) 'parent_experiment_id  = ',mycmor%parent_experiment_id
           write(*,*) 'parent_experiment_rip = ',mycmor%parent_experiment_rip
           write(*,*) 'branch_time           = ',mycmor%branch_time
        endif
        !
        ! Add global metadata
        !
        call add_global_metadata
        !
        ! Define axes via 'cmor_axis'
        !
        call define_atm_axes(xw(ixw)%dims)
        ! 
        ! Make manual alterations so that CMOR works. Silly code!
        !
        if (xw(ixw)%ncesm_vars == 1) write(original_name,'(a)') xw(ixw)%cesm_vars(1)
        if (xw(ixw)%ncesm_vars == 2) write(original_name,'(a,'','',a)') (trim(xw(ixw)%cesm_vars(i)),i=1,xw(ixw)%ncesm_vars)
        if (xw(ixw)%ncesm_vars == 3) write(original_name,'(a,'','',a,'','',a)') (trim(xw(ixw)%cesm_vars(i)),i=1,xw(ixw)%ncesm_vars)
        !
        ! Modify units as necessary to accomodate udunits' inability to convert 
        !
        select case (xw(ixw)%entry)
        case ('tauu','tauv','hfss','rlut','rlutcs','hfls','rlus','rsus','rsuscs','rsut','rsutcs','mc')
           mycmor%positive = 'up'
        case ('rlds','rldscs','rsds','rsdscs','rsdt','rtmt')
           mycmor%positive = 'down'
        case ('clt','ci','sci')
           var_info(var_found(1,1))%units = '1'
        case ('hurs','cl')
           var_info(var_found(1,1))%units = '%'
        case ('prc','pr','prsn')
           var_info(var_found(1,1))%units = 'kg m-2 s-1'
        end select
        !
        spval=var_info(var_found(1,1))%missing_value
        !
        write(*,*) 'calling cmor_variable:'
        write(*,*) 'table         = ',trim(mycmor%table_file)
        write(*,*) 'table_entry   = ',trim(xw(ixw)%entry)
        write(*,*) 'dimensions    = ',trim(xw(ixw)%dims)
        write(*,*) 'units         = ',var_info(var_found(1,1))%units(1:20)
        write(*,*) 'axis_ids      = ',axis_ids(1:naxes)
        write(*,*) 'missing_value = ',var_info(var_found(1,1))%missing_value
        write(*,*) 'positive      = ',trim(mycmor%positive)
        write(*,*) 'original_name = ',trim(original_name)
        !
        cmor_var_id = cmor_variable(                            &
             table=mycmor%table_file,                           &
             table_entry=xw(ixw)%entry,                         &
             units=var_info(var_found(1,1))%units,                &
             axis_ids=(/axis_ids(2),axis_ids(3),axis_ids(1)/), &
             missing_value=var_info(var_found(1,1))%missing_value,&
             positive=mycmor%positive,                          &
             original_name=original_name,                       &
             comment=xw(ixw)%comment)
        write(*,*) 'called cmor_variable:'
        write(*,*) 'varid         = ',cmor_var_id
        !
        ! Perform derivations and cycle through time, writing data too
        !
        select case (xw(ixw)%entry)
        case ('clt','hfls','hfss','rlds','rldscs','rsds','rsdscs')
           !
           ! No change
           !
           allocate(indat2a(nlons,nlats))
           !
           do ifile = 1,nc_nfiles(1)
              write(*,'(''OPENING: '',a,'' myncid: '',i10,'' NT: '',i10)') trim(ncfile(ifile,1)),myncid(ifile,1)/65536,ntimes(ifile,1)
              if (.not.(allocated(time)))      allocate(time(ntimes(ifile,1)))
              if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(ifile,1)))
              !
              do n=1,ntimes(ifile,1)
                 time_counter = n
                 call read_var(myncid(ifile,1),'time_bnds',time_bnds(:,n))
                 time(n) = (time_bnds(1,n)+time_bnds(2,n))/2.
              enddo
              !
              ! Determine amount of data to write, to keep close to ~2 GB limit
              !
              select case(ntimes(ifile,1))
              case ( 14600, 29200, 32120 )  !
                 nchunks(1) = int(ntimes(ifile,1)/2920)
                 tidx1(1) =    1
                 tidx2(1) = 2920
                 do ic = 2,nchunks(1)
                    tidx1(ic) = tidx2(ic-1) +    1
                    tidx2(ic) = tidx1(ic)   + 2919
                 enddo
                 tidx2(nchunks(1)) = ntimes(ifile,1)
              case default
                 nchunks(1) = 1
                 tidx1(1:nchunks(1)) = 1
              end select
              tidx2(1:nchunks(1)) = ntimes(ifile,1)
              write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),1x))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
              do ic = 1,nchunks(1)
                 do it = tidx1(ic),tidx2(ic)
                    time_counter = it
                    call read_var(myncid(ifile,1),var_info(var_found(ifile,1))%name,indat2a)
                    tval(1)   = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                    error_flag = cmor_write(      &
                         var_id        = cmor_var_id, &
                         data          = indat2a, &
                         ntimes_passed = 1,       &
                         time_vals     = tval,    &
                         time_bnds     = tbnd)
                    if (error_flag < 0) then
                       write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                       stop
                    endif
                 enddo
                 write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
                 !
                 if (ic < nchunks(ifile)) then
                    cmor_filename(1:) = ' '
                    error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                    if (error_flag < 0) then
                       write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                       stop
                    else
                       write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                    endif
                 endif
              enddo
              if (allocated(time))      deallocate(time)
              if (allocated(time_bnds)) deallocate(time_bnds)
           enddo
        case ('tas','huss','ps')
           !
           ! No change - no time bounds, instantaneous values
           !
           allocate(indat2a(nlons,nlats))
           !
           do ifile = 1,nc_nfiles(1)
              write(*,'(''OPENING: '',a,'' myncid: '',i10,'' NT: '',i10)') trim(ncfile(ifile,1)),myncid(ifile,1)/65536,ntimes(ifile,1)
              if (.not.(allocated(time))) allocate(time(ntimes(ifile,1)))
              !
              do n=1,ntimes(ifile,1)
                 time_counter = n
                 call read_var(myncid(ifile,1),'time',time(n))
              enddo
              !
              ! Determine amount of data to write, to keep close to ~2 GB limit
              !
              select case(ntimes(ifile,1))
              case ( 14600, 29200, 32120 )  !
                 nchunks(1) = int(ntimes(ifile,1)/2920)
                 tidx1(1) =    1
                 tidx2(1) = 2920
                 do ic = 2,nchunks(1)
                    tidx1(ic) = tidx2(ic-1) +    1
                    tidx2(ic) = tidx1(ic)   + 2919
                 enddo
                 tidx2(nchunks(1)) = ntimes(ifile,1)
              case default
                 nchunks(1) = 1
                 tidx1(1:nchunks(1)) = 1
              end select
              tidx2(1:nchunks(1)) = ntimes(ifile,1)
              write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),1x))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
              do ic = 1,nchunks(1)
                 do it = tidx1(ic),tidx2(ic)
                    time_counter = it
                    cmordat2d = spval
                    call read_var(myncid(ifile,1),var_info(var_found(ifile,1))%name,indat2a)
                    ! 
                    tval(1)   = time(it)
                    error_flag = cmor_write(      &
                         var_id        = cmor_var_id, &
                         data          = indat2a, &
                         ntimes_passed = 1,       &
                         time_vals     = tval)
                    if (error_flag < 0) then
                       write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                       stop
                    endif
                 enddo
                 write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
                 !
                 if (ic < nchunks(ifile)) then
                    cmor_filename(1:) = ' '
                    error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                    if (error_flag < 0) then
                       write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                       stop
                    else
                       write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                    endif
                 endif
                 if (allocated(time)) deallocate(time)
              enddo
           enddo
        case ('prc')
           !
           ! prc : PRECC, unit change from m s-1 to kg m-2 s-1
           !
           allocate(indat2a(nlons,nlats),cmordat2d(nlons,nlats))
           !
           do ifile = 1,nc_nfiles(1)
              write(*,'(''OPENING: '',a,'' myncid: '',i10,'' NT: '',i10)') trim(ncfile(ifile,1)),myncid(ifile,1)/65536,ntimes(ifile,1)
              write(*,'(''OPENING: '',a,'' myncid: '',i10,'' NT: '',i10)') trim(ncfile(ifile,2)),myncid(ifile,2)/65536,ntimes(ifile,2)
              if (.not.(allocated(time)))      allocate(time(ntimes(ifile,1)))
              if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(ifile,1)))
              !
              do n=1,ntimes(ifile,1)
                 time_counter = n
                 call read_var(myncid(ifile,1),'time_bnds',time_bnds(:,n))
                 time(n) = (time_bnds(1,n)+time_bnds(2,n))/2.
              enddo
              !
              ! Determine amount of data to write, to keep close to ~2 GB limit
              !
              select case(ntimes(ifile,1))
              case ( 14600, 29200, 32120 )  !
                 nchunks(1) = int(ntimes(ifile,1)/2920)
                 tidx1(1) =    1
                 tidx2(1) = 2920
                 do ic = 2,nchunks(1)
                    tidx1(ic) = tidx2(ic-1) +    1
                    tidx2(ic) = tidx1(ic)   + 2919
                 enddo
                 tidx2(nchunks(1)) = ntimes(ifile,1)
              case default
                 nchunks(1) = 1
                 tidx1(1:nchunks(1)) = 1
              end select
              tidx2(1:nchunks(1)) = ntimes(ifile,1)
              write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),1x))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
              do ic = 1,nchunks(1)
                 do it = tidx1(ic),tidx2(ic)
                    time_counter = it
                    cmordat2d = spval
                    call read_var(myncid(ifile,1),var_info(var_found(ifile,1))%name,indat2a)
                    ! 
                    where (indat2a /= spval)
                       cmordat2d = indat2a*1000.
                    elsewhere
                       cmordat2d = spval
                    endwhere
                    tval(1)   = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                    error_flag = cmor_write(      &
                         var_id        = cmor_var_id, &
                         data          = cmordat2d, &
                         ntimes_passed = 1,       &
                         time_vals     = tval,    &
                         time_bnds     = tbnd)
                    if (error_flag < 0) then
                       write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                       stop
                    endif
                 enddo
                 write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
                 !
                 if (ic < nchunks(ifile)) then
                    cmor_filename(1:) = ' '
                    error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                    if (error_flag < 0) then
                       write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                       stop
                    else
                       write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                    endif
                 endif
              enddo
              if (allocated(time))      deallocate(time)
              if (allocated(time_bnds)) deallocate(time_bnds)
           enddo
        case ('pr','prsn')
           !
           ! pr  : Add PRECC + PRECL  , unit change from m s-1 to kg m-2 s-1
           ! prsn: Add PRECSC + PRECSL, unit change from m s-1 to kg m-2 s-1
           !
           allocate(indat2a(nlons,nlats),indat2b(nlons,nlats))
           allocate(cmordat2d(nlons,nlats))
           !
           do ifile = 1,nc_nfiles(1)
              write(*,'(''OPENING: '',a,'' myncid: '',i10,'' NT: '',i10)') trim(ncfile(ifile,1)),myncid(ifile,1)/65536,ntimes(ifile,1)
              write(*,'(''OPENING: '',a,'' myncid: '',i10,'' NT: '',i10)') trim(ncfile(ifile,2)),myncid(ifile,2)/65536,ntimes(ifile,2)
              if (.not.(allocated(time)))      allocate(time(ntimes(ifile,1)))
              if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(ifile,1)))
              !
              do n=1,ntimes(ifile,1)
                 time_counter = n
                 call read_var(myncid(ifile,1),'time_bnds',time_bnds(:,n))
                 time(n) = (time_bnds(1,n)+time_bnds(2,n))/2.
              enddo
              !
              ! Determine amount of data to write, to keep close to ~2 GB limit
              !
              select case(ntimes(ifile,1))
              case ( 14600, 29200, 32120 )  !
                 nchunks(1) = int(ntimes(ifile,1)/2920)
                 tidx1(1) =    1
                 tidx2(1) = 2920
                 do ic = 2,nchunks(1)
                    tidx1(ic) = tidx2(ic-1) +    1
                    tidx2(ic) = tidx1(ic)   + 2919
                 enddo
                 tidx2(nchunks(1)) = ntimes(ifile,1)
              case default
                 nchunks(1) = 1
                 tidx1(1:nchunks(1)) = 1
              end select
              tidx2(1:nchunks(1)) = ntimes(ifile,1)
              write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),1x))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
              do ic = 1,nchunks(1)
                 do it = tidx1(ic),tidx2(ic)
                    time_counter = it
                    cmordat2d = spval
                    call read_var(myncid(ifile,1),var_info(var_found(ifile,1))%name,indat2a)
                    call read_var(myncid(ifile,2),var_info(var_found(ifile,2))%name,indat2b)
                    ! 
                    where ((indat2a /= spval).and.(indat2b /= spval))
                       cmordat2d = (indat2a + indat2b)*1000.
                    elsewhere
                       cmordat2d = spval
                    endwhere
                    tval(1)   = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                    error_flag = cmor_write(      &
                         var_id        = cmor_var_id, &
                         data          = cmordat2d, &
                         ntimes_passed = 1,       &
                         time_vals     = tval,    &
                         time_bnds     = tbnd)
                    if (error_flag < 0) then
                       write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                       stop
                    endif
                 enddo
                 write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
                 !
                 if (ic < nchunks(ifile)) then
                    cmor_filename(1:) = ' '
                    error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                    if (error_flag < 0) then
                       write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                       stop
                    else
                       write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                    endif
                 endif
              enddo
              if (allocated(time))      deallocate(time)
              if (allocated(time_bnds)) deallocate(time_bnds)
           enddo
        case ('rlus')
           !
           ! rlus: Add FLDS + FLNS
           !
           allocate(indat2a(nlons,nlats),indat2b(nlons,nlats))
           allocate(cmordat2d(nlons,nlats))
           !
           do ifile = 1,nc_nfiles(1)
              write(*,'(''OPENING: '',a,'' myncid: '',i10,'' NT: '',i10)') trim(ncfile(ifile,1)),myncid(ifile,1)/65536,ntimes(ifile,1)
              write(*,'(''OPENING: '',a,'' myncid: '',i10,'' NT: '',i10)') trim(ncfile(ifile,2)),myncid(ifile,2)/65536,ntimes(ifile,2)
              if (.not.(allocated(time)))      allocate(time(ntimes(ifile,1)))
              if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(ifile,1)))
              !
              do n=1,ntimes(ifile,1)
                 time_counter = n
                 call read_var(myncid(ifile,1),'time_bnds',time_bnds(:,n))
                 time(n) = (time_bnds(1,n)+time_bnds(2,n))/2.
              enddo
              !
              ! Determine amount of data to write, to keep close to ~2 GB limit
              !
              select case(ntimes(ifile,1))
              case ( 14600, 29200, 32120 )  !
                 nchunks(1) = int(ntimes(ifile,1)/2920)
                 tidx1(1) =    1
                 tidx2(1) = 2920
                 do ic = 2,nchunks(1)
                    tidx1(ic) = tidx2(ic-1) +    1
                    tidx2(ic) = tidx1(ic)   + 2919
                 enddo
                 tidx2(nchunks(1)) = ntimes(ifile,1)
              case default
                 nchunks(1) = 1
                 tidx1(1:nchunks(1)) = 1
              end select
              tidx2(1:nchunks(1)) = ntimes(ifile,1)
              write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),1x))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
              do ic = 1,nchunks(1)
                 do it = tidx1(ic),tidx2(ic)
                    time_counter = it
                    cmordat2d = spval
                    call read_var(myncid(ifile,1),var_info(var_found(ifile,1))%name,indat2a)
                    call read_var(myncid(ifile,2),var_info(var_found(ifile,2))%name,indat2b)
                    ! 
                    where ((indat2a /= spval).and.(indat2b /= spval))
                       cmordat2d = (indat2a + indat2b)
                    elsewhere
                       cmordat2d = spval
                    endwhere
                    tval(1)   = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                    error_flag = cmor_write(      &
                         var_id        = cmor_var_id, &
                         data          = cmordat2d, &
                         ntimes_passed = 1,       &
                         time_vals     = tval,    &
                         time_bnds     = tbnd)
                    if (error_flag < 0) then
                       write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                       stop
                    endif
                 enddo
                 write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
                 !
                 if (ic < nchunks(ifile)) then
                    cmor_filename(1:) = ' '
                    error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                    if (error_flag < 0) then
                       write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                       stop
                    else
                       write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                    endif
                 endif
              enddo
              if (allocated(time))      deallocate(time)
              if (allocated(time_bnds)) deallocate(time_bnds)
           enddo
        case ('rsus','rsuscs')
           !
           ! rsus   : FSDS  - FSNS
           ! rsuscs : FSDSC - FSNSC
           !
           allocate(indat2a(nlons,nlats),indat2b(nlons,nlats))
           allocate(cmordat2d(nlons,nlats))
           !
           do ifile = 1,nc_nfiles(1)
              write(*,'(''OPENING: '',a,'' myncid: '',i10,'' NT: '',i10)') trim(ncfile(ifile,1)),myncid(ifile,1)/65536,ntimes(ifile,1)
              write(*,'(''OPENING: '',a,'' myncid: '',i10,'' NT: '',i10)') trim(ncfile(ifile,2)),myncid(ifile,2)/65536,ntimes(ifile,2)
              if (.not.(allocated(time)))      allocate(time(ntimes(ifile,1)))
              if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(ifile,1)))
              !
              do n=1,ntimes(ifile,1)
                 time_counter = n
                 call read_var(myncid(ifile,1),'time_bnds',time_bnds(:,n))
                 time(n) = (time_bnds(1,n)+time_bnds(2,n))/2.
              enddo
              !
              ! Determine amount of data to write, to keep close to ~2 GB limit
              !
              select case(ntimes(ifile,1))
              case ( 14600, 29200, 32120 )  !
                 nchunks(1) = int(ntimes(ifile,1)/2920)
                 tidx1(1) =    1
                 tidx2(1) = 2920
                 do ic = 2,nchunks(1)
                    tidx1(ic) = tidx2(ic-1) +    1
                    tidx2(ic) = tidx1(ic)   + 2919
                 enddo
                 tidx2(nchunks(1)) = ntimes(ifile,1)
              case default
                 nchunks(1) = 1
                 tidx1(1:nchunks(1)) = 1
              end select
              tidx2(1:nchunks(1)) = ntimes(ifile,1)
              write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),1x))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
              do ic = 1,nchunks(1)
                 do it = tidx1(ic),tidx2(ic)
                    time_counter = it
                    cmordat2d = spval
                    call read_var(myncid(ifile,1),var_info(var_found(ifile,1))%name,indat2a)
                    call read_var(myncid(ifile,2),var_info(var_found(ifile,2))%name,indat2b)
                    ! 
                    where ((indat2a /= spval).and.(indat2b /= spval))
                       cmordat2d = indat2a - indat2b
                    elsewhere
                       cmordat2d = spval
                    endwhere
                    tval(1)   = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                    error_flag = cmor_write(      &
                         var_id        = cmor_var_id, &
                         data          = cmordat2d, &
                         ntimes_passed = 1,       &
                         time_vals     = tval,    &
                         time_bnds     = tbnd)
                    if (error_flag < 0) then
                       write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                       stop
                    endif
                 enddo
                 write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
                 !
                 if (ic < nchunks(ifile)) then
                    cmor_filename(1:) = ' '
                    error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                    if (error_flag < 0) then
                       write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                       stop
                    else
                       write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                    endif
                 endif
              enddo
              if (allocated(time))      deallocate(time)
              if (allocated(time_bnds)) deallocate(time_bnds)
           enddo
        end select
        if (allocated(indat2a))   deallocate(indat2a)
        if (allocated(indat2b))   deallocate(indat2b)
        if (allocated(indat2c))   deallocate(indat2c)
        if (allocated(cmordat2d)) deallocate(cmordat2d)
        do ivar = 1,xw(ixw)%ncesm_vars
           do ifile = 1,nc_nfiles(ivar)
              call close_cdf(myncid(ifile,ivar))
           enddo
        enddo
        !
        ! Reset
        !
        error_flag   = 0
        mycmor%positive = ' '
        original_name= ' '
        !
        if (allocated(time))      deallocate(time)
        if (allocated(time_bnds)) deallocate(time_bnds)
        !
        error_flag = cmor_close()
        if (error_flag < 0) then
           write(*,'(''ERROR cmor_close of : '',a,'' flag: '',i6)') ,trim(xw(ixw)%entry),error_flag
        else
           write(*,'('' GOOD cmor_close of : '',a,'' flag: '',i6)') ,trim(xw(ixw)%entry),error_flag
        endif
        call reset_netcdf_var
     endif
  enddo xwalk_loop
end program Do3hr_CMOR
@


1.4
log
@*** empty log message ***
@
text
@a110 18
<<<<<<< .mine
           do ifile = 1,nc_nfiles(ivar)
              call open_cdf(myncid(ifile,ivar),trim(ncfile(ifile,ivar)),.true.)
              write(*,'(''OPENING: '',a,'' myncid: '',i10)') trim(ncfile(ifile,ivar)),myncid(ifile,ivar)/65536
              call get_dims(myncid(ifile,ivar))
              call get_vars(myncid(ifile,ivar))
              !
              call read_att_text(myncid(ifile,ivar),'time','units',time_units)
              !
              do n=1,var_counter
                 if (trim(var_info(n)%name) == trim(xw(ixw)%cesm_vars(ivar))) then
                    var_found(ifile,ivar) = n
                 endif
              enddo
              if (var_found(ifile,ivar) == 0) then
                 write(*,'(''NEVER FOUND: '',a,'' STOP. '')') trim(xw(ixw)%cesm_vars(ivar))
                 stop
=======
a132 1
>>>>>>> .r698
d254 27
a280 18
           call open_cdf(myncid(1,1),trim(ncfile(1,1)),.true.)
           call get_dims(myncid(1,1))
           call get_vars(myncid(1,1))
           if (.not.(allocated(time)))      allocate(time(ntimes(1,1)))
           if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(1,1)))
           !
           do n=1,ntimes(1,1)
              time_counter = n
              call read_var(myncid(1,1),'time_bnds',time_bnds(:,n))
              time(n) = (time_bnds(1,n)+time_bnds(2,n))/2.
           enddo
           !
           ! Determine amount of data to write, to keep close to ~2 GB limit
           !
           select case(ntimes(ifile,1))
           case ( 14600 )  ! RCP, 2005-2100, skip 2006
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 2921
d282 28
a309 32
           case ( 29199 )  !
              nchunks(1) = 2
              tidx1(1:nchunks(1)) = (/    1,14600/)
              tidx2(1:nchunks(1)) = (/14599,29199/)
           case ( 29200 )  !
              nchunks(1) = 2
              tidx1(1:nchunks(1)) = (/    1,14601/)
              tidx2(1:nchunks(1)) = (/14600,29200/)
           case ( 32120 )  !
              nchunks(1) = 2
              tidx1(1:nchunks(1)) = (/    1,14601/)
              tidx2(1:nchunks(1)) = (/14600,32120/)
           case default
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 1
           end select
           tidx2(1:nchunks(1)) = ntimes(ifile,1)
           write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),1x))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
           do ic = 1,nchunks(1)
              do it = tidx1(ic),tidx2(ic)
                 time_counter = it
                 call read_var(myncid(1,1),var_info(var_found(1,1))%name,indat2a)
                 tval(1) = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                 error_flag = cmor_write(          &
                      var_id        = cmor_var_id, &
                      data          = indat2a,     &
                      ntimes_passed = 1,           &
                      time_vals     = tval,        &
                      time_bnds     = tbnd)
                 if (error_flag < 0) then
                    write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                    stop
d312 2
a313 12
              write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
              !
              if (ic < nchunks(1)) then
                 cmor_filename(1:) = ' '
                 error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                 if (error_flag < 0) then
                    write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                    stop
                 else
                    write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                 endif
              endif
a321 10
<<<<<<< .mine
              call open_cdf(myncid(ifile,1),trim(ncfile(ifile,1)),.true.)
              call get_dims(myncid(ifile,1))
              call get_vars(myncid(ifile,1))
              do n=1,dim_counter
                 length = len_trim(dim_info(n)%name)
                 if(dim_info(n)%name(:length).eq.'time') then
                    ntimes(ifile,1) = dim_info(n)%length
                 endif
              enddo
a323 3
=======
              if (.not.(allocated(time))) allocate(time(ntimes(ifile,1)))
>>>>>>> .r698
d333 10
a342 2
              case ( 14600 )  ! RCP, 2005-2100, skip 2006
<<<<<<< .mine
d344 1
a344 22
                 tidx1(1:nchunks(1)) =  2921
                 tidx2(1:nchunks(1)) = 14600
=======
                 nchunks(ifile) = 1
                 tidx1(1:nchunks(ifile)) = 2921
                 tidx2(1:nchunks(ifile)) = ntimes(ifile,1)
              case ( 29199 )  !
                 nchunks(ifile) = 2
                 tidx1(1:nchunks(ifile)) = (/    1,14600/)
                 tidx2(1:nchunks(ifile)) = (/14599,29199/)
>>>>>>> .r698
              case ( 29200 )  !
                 nchunks(ifile) = 2
                 tidx1(1:nchunks(ifile)) = (/    1,14601/)
                 tidx2(1:nchunks(ifile)) = (/14600,29200/)
              case ( 32120 )  !
                 nchunks(ifile) = 2
                 tidx1(1:nchunks(ifile)) = (/    1,14601/)
                 tidx2(1:nchunks(ifile)) = (/14600,32120/)
              case default
                 nchunks(ifile) = 1
                 tidx1(1:nchunks(ifile)) = 1
d346 1
a346 1
<<<<<<< .mine
a348 4
=======
              write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),1x))') nchunks(ifile),(tidx1(ic),tidx2(ic),ic=1,nchunks(ifile))
              do ic = 1,nchunks(ifile)
>>>>>>> .r698
d351 1
d353 3
a355 2
                    tval(1) = time(it)
                    error_flag = cmor_write(          &
d357 2
a358 2
                         data          = indat2a,     &
                         ntimes_passed = 1,           &
d367 9
a375 7
                 cmor_filename(1:) = ' '
                 error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                 if (error_flag < 0) then
                    write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                    stop
                 else
                    write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
d377 1
a378 5
              if (allocated(time)) deallocate(time)
           enddo
           do ifile = 1,nc_nfiles(1)
              call close_cdf(myncid(ifile,1))
              if (allocated(time)) deallocate(time)
d386 28
a413 18
           call open_cdf(myncid(1,1),trim(ncfile(1,1)),.true.)
           call get_dims(myncid(1,1))
           call get_vars(myncid(1,1))
           if (.not.(allocated(time)))      allocate(time(ntimes(1,1)))
           if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(1,1)))
           !
           do n=1,ntimes(1,1)
              time_counter = n
              call read_var(myncid(1,1),'time_bnds',time_bnds(:,n))
              time(n) = (time_bnds(1,n)+time_bnds(2,n))/2.
           enddo
           !
           ! Determine amount of data to write, to keep close to ~2 GB limit
           !
           select case(ntimes(ifile,1))
           case ( 14600 )  ! RCP, 2005-2100, skip 2006
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 2921
d415 4
a418 23
           case ( 29200 )  !
              nchunks(1) = 2
              tidx1(1:nchunks(1)) = (/    1,14601/)
              tidx2(1:nchunks(1)) = (/14600,29200/)
           case ( 32120 )  !
              nchunks(1) = 2
              tidx1(1:nchunks(1)) = (/    1,14601/)
              tidx2(1:nchunks(1)) = (/14600,32120/)
           case default
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 1
           end select
           tidx2(1:nchunks(1)) = ntimes(ifile,1)
           write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),1x))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
           do ic = 1,nchunks(1)
              do it = tidx1(ic),tidx2(ic)
                 time_counter = it
                 cmordat2d = spval
                 call read_var(myncid(1,1),var_info(var_found(1,1))%name,indat2a)
                 ! 
                 where (indat2a /= spval)
                    cmordat2d = indat2a*1000.
                 elsewhere
d420 30
a449 11
                 endwhere
                 tval(1) = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                 error_flag = cmor_write(      &
                      var_id        = cmor_var_id, &
                      data          = cmordat2d,   &
                      ntimes_passed = 1,       &
                      time_vals     = tval,    &
                      time_bnds     = tbnd)
                 if (error_flag < 0) then
                    write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                    stop
d452 2
a453 12
              write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
              !
              if (ic < nchunks(1)) then
                 cmor_filename(1:) = ' '
                 error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                 if (error_flag < 0) then
                    write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                    stop
                 else
                    write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                 endif
              endif
d463 28
a490 18
           call open_cdf(myncid(1,1),trim(ncfile(1,1)),.true.)
           call get_dims(myncid(1,1))
           call get_vars(myncid(1,1))
           if (.not.(allocated(time)))      allocate(time(ntimes(1,1)))
           if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(1,1)))
           !
           do n=1,ntimes(1,1)
              time_counter = n
              call read_var(myncid(1,1),'time_bnds',time_bnds(:,n))
              time(n) = (time_bnds(1,n)+time_bnds(2,n))/2.
           enddo
           !
           ! Determine amount of data to write, to keep close to ~2 GB limit
           !
           select case(ntimes(ifile,1))
           case ( 14600 )  ! RCP, 2005-2100, skip 2006
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 2921
d492 4
a495 24
           case ( 29200 )  !
              nchunks(1) = 2
              tidx1(1:nchunks(1)) = (/    1,14601/)
              tidx2(1:nchunks(1)) = (/14600,29200/)
           case ( 32120 )  !
              nchunks(1) = 2
              tidx1(1:nchunks(1)) = (/    1,14601/)
              tidx2(1:nchunks(1)) = (/14600,32120/)
           case default
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 1
           end select
           tidx2(1:nchunks(1)) = ntimes(ifile,1)
           write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),1x))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
           do ic = 1,nchunks(1)
              do it = tidx1(ic),tidx2(ic)
                 time_counter = it
                 cmordat2d = spval
                 call read_var(myncid(1,1),var_info(var_found(1,1))%name,indat2a)
                 call read_var(myncid(1,2),var_info(var_found(1,2))%name,indat2b)
                 ! 
                 where ((indat2a /= spval).and.(indat2b /= spval))
                    cmordat2d = (indat2a + indat2b)*1000.
                 elsewhere
d497 31
a527 11
                 endwhere
                 tval(1) = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                 error_flag = cmor_write(      &
                      var_id        = cmor_var_id, &
                      data          = cmordat2d,   &
                      ntimes_passed = 1,       &
                      time_vals     = tval,    &
                      time_bnds     = tbnd)
                 if (error_flag < 0) then
                    write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                    stop
d530 2
a531 12
              write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
              !
              if (ic < nchunks(1)) then
                 cmor_filename(1:) = ' '
                 error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                 if (error_flag < 0) then
                    write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                    stop
                 else
                    write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                 endif
              endif
d540 28
a567 18
           call open_cdf(myncid(1,1),trim(ncfile(1,1)),.true.)
           call get_dims(myncid(1,1))
           call get_vars(myncid(1,1))
           if (.not.(allocated(time)))      allocate(time(ntimes(1,1)))
           if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(1,1)))
           !
           do n=1,ntimes(1,1)
              time_counter = n
              call read_var(myncid(1,1),'time_bnds',time_bnds(:,n))
              time(n) = (time_bnds(1,n)+time_bnds(2,n))/2.
           enddo
           !
           ! Determine amount of data to write, to keep close to ~2 GB limit
           !
           select case(ntimes(ifile,1))
           case ( 14600 )  ! RCP, 2005-2100, skip 2006
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 2921
d569 4
a572 24
           case ( 29200 )  !
              nchunks(1) = 2
              tidx1(1:nchunks(1)) = (/    1,14601/)
              tidx2(1:nchunks(1)) = (/14600,29200/)
           case ( 32120 )  !
              nchunks(1) = 2
              tidx1(1:nchunks(1)) = (/    1,14601/)
              tidx2(1:nchunks(1)) = (/14600,32120/)
           case default
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 1
           end select
           tidx2(1:nchunks(1)) = ntimes(ifile,1)
           write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),1x))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
           do ic = 1,nchunks(1)
              do it = tidx1(ic),tidx2(ic)
                 time_counter = it
                 cmordat2d = spval
                 call read_var(myncid(1,1),var_info(var_found(1,1))%name,indat2a)
                 call read_var(myncid(1,2),var_info(var_found(1,2))%name,indat2b)
                 ! 
                 where ((indat2a /= spval).and.(indat2b /= spval))
                    cmordat2d = (indat2a + indat2b)
                 elsewhere
d574 31
a604 11
                 endwhere
                 tval(1)   = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                 error_flag = cmor_write(      &
                      var_id        = cmor_var_id, &
                      data          = cmordat2d, &
                      ntimes_passed = 1,       &
                      time_vals     = tval,    &
                      time_bnds     = tbnd)
                 if (error_flag < 0) then
                    write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                    stop
d607 2
a608 12
              write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
              !
              if (ic < nchunks(1)) then
                 cmor_filename(1:) = ' '
                 error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                 if (error_flag < 0) then
                    write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                    stop
                 else
                    write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                 endif
              endif
d618 28
a645 18
           call open_cdf(myncid(1,1),trim(ncfile(1,1)),.true.)
           call get_dims(myncid(1,1))
           call get_vars(myncid(1,1))
           if (.not.(allocated(time)))      allocate(time(ntimes(1,1)))
           if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(1,1)))
           !
           do n=1,ntimes(1,1)
              time_counter = n
              call read_var(myncid(1,1),'time_bnds',time_bnds(:,n))
              time(n) = (time_bnds(1,n)+time_bnds(2,n))/2.
           enddo
           !
           ! Determine amount of data to write, to keep close to ~2 GB limit
           !
           select case(ntimes(ifile,1))
           case ( 14600 )  ! RCP, 2005-2100, skip 2006
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 2921
d647 4
a650 24
           case ( 29200 )  !
              nchunks(1) = 2
              tidx1(1:nchunks(1)) = (/    1,14601/)
              tidx2(1:nchunks(1)) = (/14600,29200/)
           case ( 32120 )  !
              nchunks(1) = 2
              tidx1(1:nchunks(1)) = (/    1,14601/)
              tidx2(1:nchunks(1)) = (/14600,32120/)
           case default
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 1
           end select
           tidx2(1:nchunks(1)) = ntimes(ifile,1)
           write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),1x))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
           do ic = 1,nchunks(1)
              do it = tidx1(ic),tidx2(ic)
                 time_counter = it
                 cmordat2d = spval
                 call read_var(myncid(1,1),var_info(var_found(1,1))%name,indat2a)
                 call read_var(myncid(1,2),var_info(var_found(1,2))%name,indat2b)
                 ! 
                 where ((indat2a /= spval).and.(indat2b /= spval))
                    cmordat2d = indat2a - indat2b
                 elsewhere
d652 31
a682 11
                 endwhere
                 tval(1)   = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                 error_flag = cmor_write(      &
                      var_id        = cmor_var_id, &
                      data          = cmordat2d, &
                      ntimes_passed = 1,       &
                      time_vals     = tval,    &
                      time_bnds     = tbnd)
                 if (error_flag < 0) then
                    write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                    stop
d685 2
a686 12
              write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
              !
              if (ic < nchunks(1)) then
                 cmor_filename(1:) = ' '
                 error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                 if (error_flag < 0) then
                    write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                    stop
                 else
                    write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                 endif
              endif
a692 1
<<<<<<< .mine
a697 2
=======
>>>>>>> .r698
@


1.3
log
@*** empty log message ***
@
text
@d111 18
d151 1
d346 13
d360 1
d371 5
d383 1
d396 4
d402 1
d428 3
d747 8
@


1.2
log
@*** empty log message ***
@
text
@d2 2
a3 1
  ! Convert CCSM4 atm data from single-field format to CMOR-compliant format
d24 1
a24 2
  real,dimension(:,:)  ,allocatable::indat2a,indat2b,indat2c,cmordat2d,psdata
  real,dimension(:,:,:),allocatable::indat3a,indat3b,indat3c,cmordat3d,work3da,work3db
d111 22
a132 17
           write(*,'(''TO OPEN: '',a)') trim(ncfile(nc_nfiles(ivar),ivar))
           call open_cdf(myncid(1,ivar),trim(ncfile(1,ivar)),.true.)
           write(*,'(''OPENING: '',a,'' myncid: '',i10)') trim(ncfile(1,ivar)),myncid(1,ivar)
           call get_dims(myncid(1,ivar))
           call get_vars(myncid(1,ivar))
           !
           do n=1,dim_counter
              length = len_trim(dim_info(n)%name)
              if(dim_info(n)%name(:length).eq.'time') then
                 ntimes(1,ivar) = dim_info(n)%length
              endif
           enddo
           call read_att_text(myncid(1,1),'time','units',time_units)
           !
           do n=1,var_counter
              if (trim(var_info(n)%name) == trim(xw(ixw)%cesm_vars(ivar))) then
                 var_found(1,ivar) = n
a134 14
           if (var_found(1,ivar) == 0) then
              write(*,'(''NEVER FOUND: '',a,'' STOP. '')') trim(xw(ixw)%cesm_vars(ivar))
              stop
           endif
           !
           if (.not.(allocated(time)))      allocate(time(ntimes(1,1)))
           if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(1,1)))
           !
           do n=1,ntimes(1,1)
              time_counter = n
              call read_var(myncid(1,ivar),'time_bnds',time_bnds(:,n))
              time(n) = (time_bnds(1,n)+time_bnds(2,n))/2.
              !                    write(*,'(''TIMES: '',3f12.4)') time_bnds(1,n),time(n),time_bnds(2,n)
           enddo
d166 4
d237 1
a237 1
             axis_ids=(/axis_ids(3),axis_ids(1),axis_ids(2)/),  &
d248 1
a248 1
        case ('clt','hfls','hfss','huss','mrro','mrsos','ps','rlds','rldscs','rsds','rsdscs','tas')
d250 1
a250 1
           ! No change, time-mean fields
d254 12
d268 1
a268 1
           select case(ntimes(1,1))
d272 5
a276 1
              tidx2(1:nchunks(1)) = ntimes(1,1)
d289 2
a290 2
           tidx2(1:nchunks(1)) = ntimes(1,1)
           write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),'',''))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
d320 67
d393 12
d407 14
a420 2
           select case(ntimes(1,1))
           case ( 1872,1140,3612,6012,12012 )  ! All data
a422 9
              tidx2(1:nchunks(1)) = ntimes(1,1)
           case ( 1152 )  ! RCP, 2005-2100, skip 2006
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 13
              tidx2(1:nchunks(1)) = ntimes(1,1)
           case ( 4824 )  ! LGM from 1499-1900, 1800-1900 (101y) only
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 3613
              tidx2(1:nchunks(1)) = ntimes(1,1)
d424 2
a425 1
           write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),'',''))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
d470 12
d484 14
a497 2
           select case(ntimes(1,1))
           case ( 1872,1140,3612,6012,12012 )  ! All data
a499 9
              tidx2(1:nchunks(1)) = ntimes(1,1)
           case ( 1152 )  ! RCP, 2005-2100, skip 2006
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 13
              tidx2(1:nchunks(1)) = ntimes(1,1)
           case ( 4824 )  ! LGM from 1499-1900, 1800-1900 (101y) only
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 3613
              tidx2(1:nchunks(1)) = ntimes(1,1)
d501 2
a502 1
           write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),'',''))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
d547 12
d561 14
a574 2
           select case(ntimes(1,1))
           case ( 1872,1140,3612,6012,12012 )  ! All data
a576 9
              tidx2(1:nchunks(1)) = ntimes(1,1)
           case ( 1152 )  ! RCP, 2005-2100, skip 2006
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 13
              tidx2(1:nchunks(1)) = ntimes(1,1)
           case ( 4824 )  ! LGM from 1499-1900, 1800-1900 (101y) only
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 3613
              tidx2(1:nchunks(1)) = ntimes(1,1)
d578 2
a579 1
           write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),'',''))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
d617 1
a617 1
        case ('rsus','rsuscs','rsut','rsutcs','rtmt')
a620 3
           ! rsut   : SOLIN - FSNTOA
           ! rsutcs : SOLIN - FSNTOAC
           ! rtmt   : FSNT  - FLNT
d625 12
d639 14
a652 2
           select case(ntimes(1,1))
           case ( 1872,1140,3612,6012,12012 )  ! All data
a654 9
              tidx2(1:nchunks(1)) = ntimes(1,1)
           case ( 1152 )  ! RCP, 2005-2100, skip 2006
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 13
              tidx2(1:nchunks(1)) = ntimes(1,1)
           case ( 4824 )  ! LGM from 1499-1900, 1800-1900 (101y) only
              nchunks(1) = 1
              tidx1(1:nchunks(1)) = 3613
              tidx2(1:nchunks(1)) = ntimes(1,1)
d656 2
a657 1
           write(*,'(''# chunks '',i3,'':'',10((i6,''-'',i6),'',''))') nchunks(1),(tidx1(ic),tidx2(ic),ic=1,nchunks(1))
a699 7
        if (allocated(indat3a))   deallocate(indat3a)
        if (allocated(indat3b))   deallocate(indat3b)
        if (allocated(work3da))   deallocate(work3da)
        if (allocated(work3db))   deallocate(work3db)
        do ivar = 1,xw(ixw)%ncesm_vars
           call close_cdf(myncid(1,ivar))
        enddo
@


1.1
log
@Initial revision
@
text
@d2 1
a2 2
  ! Convert CCSM4 atm 3-hourly data from single-field format
  ! to CMOR-compliant format
d15 1
a16 1
  use mycmor_info
d23 2
a24 1
  real,dimension(:,:)  ,allocatable::indat2a,indat2b,indat2c,cmordat2d
d33 1
a33 1
  integer::i,j,k,m,n,tcount,it,ivar,length,iexp,jexp,itab,ixw,ilev,ic
d35 1
a35 4
  !
  ! Initialize time indices
  ! 
  tidx1 = -999 ; tidx2 = -999
d39 1
a39 9
  mycmor%table_file = 'CMIP5_3hr'
  call load_table_info
  !
  ! Get "crossxwalk" (xwalk) information
  !   Provides information on relationship between CMOR variables and
  !   model variables
  !
  xwalk_file = 'xwalk_3hr.txt'
  call load_xwalk(xwalk_file)
d53 16
d83 10
a92 10
  table_loop: do itab = 1,num_tab
     xwalk_loop: do ixw = 1,num_xw
        mycmor%positive = ' '
        time_counter = 0
        var_counter  = 0
        error_flag   = 0
        var_found    = 0
        xw_found     = 0
        time_units   = ' '
        original_name= ' '
d94 108
a201 2
        ncfile(:,:)(1:) = ' '
        nc_nfiles(:)    = 0
d203 3
a205 1
        ! The meaty part
d207 100
a306 8
        if (xw(ixw)%entry == table(itab)%variable_entry) then
           write(*,'(''MATCH CMIP5: '',a,'' CESM: '',5(a,'',''))') trim(xw(ixw)%entry),(trim(xw(ixw)%cesm_vars(ivar)),ivar=1,xw(ixw)%ncesm_vars)
           do ivar = 1,xw(ixw)%ncesm_vars
              if ((trim(xw(ixw)%cesm_vars(ivar)) == 'UNKNOWN').or.(trim(xw(ixw)%cesm_vars(ivar)) == 'UNAVAILABLE')) then
                 write(*,'(''UNAVAILABLE/UNKNOWN: '',a,'' == '',a)') trim(xw(ixw)%entry),trim(table(itab)%variable_entry)
              else
                 write(*,'(''CHECKING AVAILABILITY OF: '',a,''.'',a,''.'',a,''.* FILES'')') trim(case_read),trim(comp_read),trim(xw(ixw)%cesm_vars(ivar))
                 call build_filenames(case_read,comp_read,xw(ixw)%cesm_vars(ivar),ivar,exp(exp_found)%begyr,exp(exp_found)%endyr,mycmor%table_file)
d309 3
d313 1
a313 1
           ! Open CESM file(s) and get information(s)
d315 39
a353 29
           if (all_continue) then
              do ivar = 1,xw(ixw)%ncesm_vars
                 do ifile = 1,nc_nfiles(ivar)
                    call open_cdf(myncid(ifile,ivar),trim(ncfile(ifile,ivar)),.true.)
!                    write(*,'(''OPENING: '',a80,'' myncid: '',i10)') trim(ncfile(ifile,ivar)),myncid(ifile,ivar)
                    call get_dims(myncid(ifile,ivar))
                    call get_vars(myncid(ifile,ivar))
                    !
                    do n=1,dim_counter
                       length = len_trim(dim_info(n)%name)
                       if(dim_info(n)%name(:length).eq.'time') then
                          ntimes(ifile,ivar) = dim_info(n)%length
                       endif
                    enddo
                    call read_att_text(myncid(ifile,ivar),'time','units',time_units)
                    do n=1,var_counter
                       if (trim(var_info(n)%name) == trim(xw(ixw)%cesm_vars(ivar))) then
                          var_found(ifile,ivar) = n
                       endif
                    enddo
                    if (var_found(ifile,ivar) == 0) then
                       !
                       ! Never found - quit
                       !
                       write(*,'(''NEVER FOUND: '',a,'' STOP. '')') trim(xw(ixw)%cesm_vars(ivar))
                       stop
                    endif
                    call close_cdf(myncid(ifile,ivar))
                 enddo
d355 1
d357 61
a417 1
              myncid = 0
d419 9
a427 50
              ! Specify path where tables can be found and indicate that existing netCDF files should be overwritten.
              !
              write(logfile,'(''log_cmor.'',a,''.'',a,''_'',a)') &
                   trim(mycmor%experiment_id),&
                   trim(exp(exp_found)%rip_code),&
                   trim(xw(ixw)%entry)
              error_flag = cmor_setup(inpath='CMOR',&
                   netcdf_file_action=CMOR_REPLACE,&
                   logfile=logfile)
              !
              error_flag = cmor_dataset(                              &
                   outpath=mycmor%outpath,                            &
                   experiment_id=mycmor%experiment_id,                &
                   institution=mycmor%institution,                    &
                   source=mycmor%source,                              &
                   calendar=mycmor%calendar,                          &
                   realization=mycmor%realization,                    &
                   contact=mycmor%contact,                            &
                   history=mycmor%history,                            &
                   comment=mycmor%comment,                            &
                   references=mycmor%references,                      &
                   model_id=mycmor%model_id,                          &
                   forcing=mycmor%forcing,                            &
                   initialization_method=mycmor%initialization_method,&
                   physics_version=mycmor%physics_version,            &
                   institute_id=mycmor%institute_id,                  &
                   parent_experiment_id=mycmor%parent_experiment_id,  &
                   parent_experiment_rip=mycmor%parent_experiment_rip,&
                   branch_time=mycmor%branch_time)
              if (error_flag < 0) then
                 write(*,*) 'ERROR on cmor_dataset!'
                 write(*,*) 'outpath               = ',trim(mycmor%outpath)
                 write(*,*) 'experiment_id         = ',trim(mycmor%experiment_id)
                 write(*,*) 'institution           = ',trim(mycmor%institution)
                 write(*,*) 'source                = ',trim(mycmor%source)
                 write(*,*) 'calendar              = ',trim(mycmor%calendar)
                 write(*,*) 'realization           = ',mycmor%realization
                 write(*,*) 'initialization_method = ',mycmor%initialization_method
                 write(*,*) 'physics_version       = ',mycmor%physics_version
                 write(*,*) 'contact               = ',trim(mycmor%contact)
                 write(*,*) 'history               = ',trim(mycmor%history)
                 write(*,*) 'comment               = ',trim(mycmor%comment)
                 write(*,*) 'references            = ',trim(mycmor%references)
                 write(*,*) 'model_id              = ',trim(mycmor%model_id)
                 write(*,*) 'forcing               = ',trim(mycmor%forcing)
                 write(*,*) 'institute_id          = ',trim(mycmor%institute_id)
                 write(*,*) 'parent_experiment_id  = ',trim(mycmor%parent_experiment_id)
                 write(*,*) 'parent_experiment_rip = ',trim(mycmor%parent_experiment_rip)
                 write(*,*) 'branch_time           = ',mycmor%branch_time
                 stop
d429 50
d480 9
a488 12
              ! Add global metadata
              !
              call add_global_metadata
              !
              ! Define axes via 'cmor_axis'
              !
              call define_atm_axes(table(itab)%dimensions)
              ! 
              ! Make manual alterations so that CMOR works. Silly code!
              !
              if (xw(ixw)%ncesm_vars == 1) then
                 write(original_name,'(a)') xw(ixw)%cesm_vars(1)
d490 52
a541 445
              if (xw(ixw)%ncesm_vars == 2) then
                 write(original_name,'(a,'','',a)') (trim(xw(ixw)%cesm_vars(ivar)),ivar=1,xw(ixw)%ncesm_vars)
              endif
              if (xw(ixw)%ncesm_vars == 3) then
                 write(original_name,'(a,'','',a,'','',a)') (trim(xw(ixw)%cesm_vars(ivar)),ivar=1,xw(ixw)%ncesm_vars)
              endif
              !
              ! Modify units as necessary to accomodate udunits' inability to convert 
              !
              select case (xw(ixw)%entry)
              case ('tauu','tauv','hfss','rlut','rlutcs','hfls','rlus','rsus','rsuscs','rsut','rsutcs')
                 mycmor%positive = 'up'
              case ('rlds','rldscs','rsds','rsdscs','rsdt','rtmt')
                 mycmor%positive = 'down'
              case ('clt','ci')
                 var_info(var_found(1,1))%units = '1'
              case ('hurs','cl')
                 var_info(var_found(1,1))%units = '%'
              case ('prc','pr','prsn')
                 var_info(var_found(1,1))%units = 'kg m-2 s-1'
              end select
              !
              spval=var_info(var_found(1,1))%missing_value
              !
              write(*,*) 'calling cmor_variable:'
              write(*,*) 'table         = ',trim(mycmor%table_file)
              write(*,*) 'table_entry   = ',trim(xw(ixw)%entry)
              write(*,*) 'dimensions    = ',trim(table(itab)%dimensions)
              write(*,*) 'units         = ',trim(var_info(var_found(1,1))%units)
              write(*,*) 'axis_ids      = ',axis_ids(1:4)
              write(*,*) 'missing_value = ',var_info(var_found(1,1))%missing_value
              write(*,*) 'positive      = ',trim(mycmor%positive)
              write(*,*) 'original_name = ',trim(original_name)
              !
              select case (xw(ixw)%entry)
              case ('ta','ua','va','hus','hur','wap','zg','tro3','tro3Clim','co2','co2Clim','ch4','ch4Clim','n2o','n2oClim')
                 cmor_var_id = cmor_variable(                            &
                      table=mycmor%table_file,                           &
                      table_entry=xw(ixw)%entry,                         &
                      units=var_info(var_found(1,1))%units,                &
                      axis_ids=(/axis_ids(1),axis_ids(2),axis_ids(3),axis_ids(4)/),  &
                      missing_value=var_info(var_found(1,1))%missing_value,&
                      positive=mycmor%positive,                          &
                      original_name=original_name,                       &
                      comment=xw(ixw)%comment)
              case ('clw','cli','cl')
                 cmor_var_id = cmor_variable(                            &
                      table=mycmor%table_file,                           &
                      table_entry=xw(ixw)%entry,                         &
                      units=var_info(var_found(1,1))%units,                &
                      axis_ids=(/axis_ids(1),axis_ids(2),axis_ids(3),axis_ids(4)/),  &
                      missing_value=var_info(var_found(1,1))%missing_value,&
                      positive=mycmor%positive,                          &
                      original_name=original_name,                       &
                      comment=xw(ixw)%comment)
              case default
                 cmor_var_id = cmor_variable(                            &
                      table=mycmor%table_file,                           &
                      table_entry=xw(ixw)%entry,                         &
                      units=var_info(var_found(1,1))%units,                &
                      axis_ids=(/axis_ids(1),axis_ids(2),axis_ids(3)/),  &
                      missing_value=var_info(var_found(1,1))%missing_value,&
                      positive=mycmor%positive,                          &
                      original_name=original_name,                       &
                      comment=xw(ixw)%comment)
              end select
              write(*,'(''called cmor_variable; cmor_var_id:'',i8)') cmor_var_id
              !
              ! Perform derivations and cycle through time, writing data too
              !
              select case (xw(ixw)%entry)
              case ('ccb','cct','clivi','clwvi','evspsbl','hfls','hfss','hurs','huss',&
                    'prw','psl','ps','rldscs','rlds','rlutcs','rlut','rsdscs','rsds','rsdt',&
                    'sci','tas','tasmax','tasmin','tauu','tauv','ts')
                 !
                 ! No change
                 !
                 allocate(indat2a(nlons,nlats))
                 do ivar = 1,xw(ixw)%ncesm_vars
                    do ifile = 1,nc_nfiles(ivar)
                       call open_cdf(myncid(ifile,ivar),trim(ncfile(ifile,ivar)),.true.)
                       call get_dims(myncid(ifile,ivar))
                       call get_vars(myncid(ifile,ivar))
                       !
                       if (.not.(allocated(time)))      allocate(time(ntimes(ifile,ivar)))
                       if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(ifile,ivar)))
                       !
                       do n = 1,ntimes(ifile,ivar)
                          time_counter = n
                          call read_var(myncid(ifile,ivar),'time_bnds',time_bnds(:,n))
                       enddo
                       time = (time_bnds(1,:)+time_bnds(2,:))/2.
                       !
                       if (ntimes(ifile,ivar) == 29200) then         ! 10 year chunk, split into 5-year chunks
                          nchunks(ifile)= 2
                          tidx1(1:nchunks(ifile)) = (/    1, 14601/)
                          tidx2(1:nchunks(ifile)) = (/14600, ntimes(ifile,ivar)/)
                       endif
                       if (ntimes(ifile,ivar) == 35040) then         ! RCP from 2005-2100, use only 2006 onwards, 2 * 35y + 1 * 25y chunks
                          nchunks(ifile)= 3
                          tidx1(1:nchunks(ifile)) = (/  366, 13141, 25916/)      ! 2006, 2041, 2076
                          tidx2(1:nchunks(ifile)) = (/13140, 25915, 35040/)      ! 2040, 2075, 2100
                       endif
                       if (ntimes(ifile,ivar) == 34675) then         ! RCP from 2006-2100, use all times, 2 * 35y + 1 * 25y chunks
                          nchunks(ifile)= 3
                          tidx1(1:nchunks(ifile)) = (/    1, 12776, 25551/)      ! 2006, 2041, 2076
                          tidx2(1:nchunks(ifile)) = (/12775, 25550, 34675/)      ! 2040, 2075, 2100
                       endif
                       do ic = 1,nchunks(ifile)
                          do it = tidx1(ic),tidx2(ic)
                             time_counter = it
                             !
                             call read_var(myncid(ifile,ivar),var_info(var_found(ifile,ivar))%name,indat2a)
                             !
                             tval(1) = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                             error_flag = cmor_write(          &
                                  var_id        = cmor_var_id, &
                                  data          = indat2a,     &
                                  ntimes_passed = 1,           &
                                  time_vals     = tval,        &
                                  time_bnds     = tbnd)
                             if (error_flag < 0) then
                                write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                                stop
                             endif
                          enddo
                          write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
                          !
                          if (ic < nchunks(ifile)) then
                             cmor_filename(1:) = ' '
                             error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                             if (error_flag < 0) then
                                write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                                stop
                             else
                                write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                             endif
                          endif
                       enddo
                    enddo
                 enddo
              case ('pr','prsn')
                 !
                 ! pr  : Add PRECC + PRECL  , unit change from m s-1 to kg m-2 s-1
                 ! prsn: Add PRECSC + PRECSL, unit change from m s-1 to kg m-2 s-1
                 !
                 allocate(indat2a(nlons,nlats),indat2b(nlons,nlats))
                 allocate(cmordat2d(nlons,nlats))
                 do ivar = 1,xw(ixw)%ncesm_vars
                    do ifile = 1,nc_nfiles(ivar)
                       call open_cdf(myncid(ifile,ivar),trim(ncfile(ifile,ivar)),.true.)
                       call get_dims(myncid(ifile,ivar))
                       call get_vars(myncid(ifile,ivar))
                       !
                       if (.not.(allocated(time)))      allocate(time(ntimes(ifile,ivar)))
                       if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(ifile,ivar)))
                       !
                       do n = 1,ntimes(ifile,ivar)
                          time_counter = n
                          call read_var(myncid(ifile,ivar),'time_bnds',time_bnds(:,n))
                       enddo
                       time = (time_bnds(1,:)+time_bnds(2,:))/2.
                       !
                       if (ntimes(ifile,ivar) == 56940) then         ! 20C from 1850-2005, use all times, 4 * 35y + 1 * 16y chunks
                          nchunks(ifile)= 5
                          tidx1(1:nchunks(ifile)) = (/    1, 12776, 25551, 38326, 51101/)      ! 1850, 1885, 1920, 1955, 1990
                          tidx2(1:nchunks(ifile)) = (/12775, 25550, 38325, 51100, 56940/)      ! 1884, 1919, 1954, 1989, 2005
                       endif
                       if (ntimes(ifile,ivar) == 35040) then         ! RCP from 2005-2100, use only 2006 onwards, 2 * 35y + 1 * 25y chunks
                          nchunks(ifile) = 3
                          tidx1(1:nchunks(ifile)) = (/  366, 13141, 25916/)      ! 2006, 2041, 2076
                          tidx2(1:nchunks(ifile)) = (/13140, 25915, 35040/)      ! 2040, 2075, 2100
                       endif
                       if (ntimes(ifile,ivar) == 34675) then         ! RCP from 2006-2100, use all times, 2 * 35y + 1 * 25y chunks
                          nchunks(ifile) = 3
                          tidx1(1:nchunks(ifile)) = (/    1, 12776, 25551/)      ! 2006, 2041, 2076
                          tidx2(1:nchunks(ifile)) = (/12775, 25550, 34675/)      ! 2040, 2075, 2100
                       endif
                       do ic = 1,nchunks(ifile)
                          do it = tidx1(ic),tidx2(ic)
                             time_counter = it
                             call read_var(myncid(ifile,ivar),var_info(var_found(ifile,ivar))%name,indat2a)
                             call read_var(myncid(ifile,ivar),var_info(var_found(ifile,ivar))%name,indat2b)
                             where ((indat2a /= spval).and.(indat2b /= spval))
                                cmordat2d = (indat2a + indat2b)*1000.
                             elsewhere
                                cmordat2d = spval
                             endwhere
                             tval(1) = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                             error_flag = cmor_write(      &
                                  var_id        = cmor_var_id, &
                                  data          = cmordat2d,   &
                                  ntimes_passed = 1,       &
                                  time_vals     = tval,    &
                                  time_bnds     = tbnd)
                             if (error_flag < 0) then
                                write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                                stop
                             endif
                          enddo
                          write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
                          !
                          if (ic < nchunks(ifile)) then
                             cmor_filename(1:) = ' '
                             error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                             if (error_flag < 0) then
                                write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                                stop
                             else
                                write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                             endif
                          endif
                       enddo
                    enddo
                 enddo
              case ('prc')
                 !
                 ! prc : PRECC, unit change from m s-1 to kg m-2 s-1
                 !
                 allocate(indat2a(nlons,nlats),cmordat2d(nlons,nlats))
                 do ivar = 1,xw(ixw)%ncesm_vars
                    do ifile = 1,nc_nfiles(ivar)
                       call open_cdf(myncid(ifile,ivar),trim(ncfile(ifile,ivar)),.true.)
                       call get_dims(myncid(ifile,ivar))
                       call get_vars(myncid(ifile,ivar))
                       !
                       if (.not.(allocated(time)))      allocate(time(ntimes(ifile,ivar)))
                       if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(ifile,ivar)))
                       !
                       do n = 1,ntimes(ifile,ivar)
                          time_counter = n
                          call read_var(myncid(ifile,ivar),'time_bnds',time_bnds(:,n))
                       enddo
                       time = (time_bnds(1,:)+time_bnds(2,:))/2.
                       !
                       if (ntimes(ifile,ivar) == 56940) then         ! 20C from 1850-2005, use all times, 4 * 35y + 1 * 16y chunks
                          nchunks(ifile) = 5
                          tidx1(1:nchunks(ifile)) = (/    1, 12776, 25551, 38326, 51101/)      ! 1850, 1885, 1920, 1955, 1990
                          tidx2(1:nchunks(ifile)) = (/12775, 25550, 38325, 51100, 56940/)      ! 1884, 1919, 1954, 1989, 2005
                       endif
                       if (ntimes(ifile,ivar) == 35040) then         ! RCP from 2005-2100, use only 2006 onwards, 2 * 35y + 1 * 25y chunks
                          nchunks(ifile) = 3
                          tidx1(1:nchunks(ifile)) = (/  366, 13141, 25916/)      ! 2006, 2041, 2076
                          tidx2(1:nchunks(ifile)) = (/13140, 25915, 35040/)      ! 2040, 2075, 2100
                       endif
                       if (ntimes(ifile,ivar) == 34675) then         ! RCP from 2006-2100, use all times, 2 * 35y + 1 * 25y chunks
                          nchunks(ifile) = 3
                          tidx1(1:nchunks(ifile)) = (/    1, 12776, 25551/)      ! 2006, 2041, 2076
                          tidx2(1:nchunks(ifile)) = (/12775, 25550, 34675/)      ! 2040, 2075, 2100
                       endif
                       do ic = 1,nchunks(ifile)
                          do it = tidx1(ic),tidx2(ic)
                             time_counter = it
                             call read_var(myncid(ifile,ivar),var_info(var_found(ifile,ivar))%name,indat2a)
                             where (indat2a /= spval)
                                cmordat2d = indat2a*1000.
                             elsewhere
                                cmordat2d = spval
                             endwhere
                             tval(1) = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                             error_flag = cmor_write(      &
                                  var_id        = cmor_var_id, &
                                  data          = cmordat2d,   &
                                  ntimes_passed = 1,       &
                                  time_vals     = tval,    &
                                  time_bnds     = tbnd)
                             if (error_flag < 0) then
                                write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                                stop
                             endif
                          enddo
                          write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
                          !
                          if (ic < nchunks(ifile)) then
                             cmor_filename(1:) = ' '
                             error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                             if (error_flag < 0) then
                                write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                                stop
                             else
                                write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                             endif
                          endif
                       enddo
                    enddo
                 enddo
              case ('rlus')
                 !
                 ! rlus: Add FLDS + FLNS
                 !
                 allocate(indat2a(nlons,nlats),indat2b(nlons,nlats))
                 allocate(cmordat2d(nlons,nlats))
                 do ivar = 1,xw(ixw)%ncesm_vars
                    do ifile = 1,nc_nfiles(ivar)
                       call open_cdf(myncid(ifile,ivar),trim(ncfile(ifile,ivar)),.true.)
                       call get_dims(myncid(ifile,ivar))
                       call get_vars(myncid(ifile,ivar))
                       !
                       if (.not.(allocated(time)))      allocate(time(ntimes(ifile,ivar)))
                       if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(ifile,ivar)))
                       !
                       do n = 1,ntimes(ifile,ivar)
                          time_counter = n
                          call read_var(myncid(ifile,ivar),'time_bnds',time_bnds(:,n))
                       enddo
                       time = (time_bnds(1,:)+time_bnds(2,:))/2.
                       !
                       if (ntimes(ifile,ivar) == 56940) then         ! 20C from 1850-2005, use all times, 4 * 35y + 1 * 16y chunks
                          nchunks(ifile) = 5
                          tidx1(1:nchunks(ifile)) = (/    1, 12776, 25551, 38326, 51101/)      ! 1850, 1885, 1920, 1955, 1990
                          tidx2(1:nchunks(ifile)) = (/12775, 25550, 38325, 51100, 56940/)      ! 1884, 1919, 1954, 1989, 2005
                       endif
                       if (ntimes(ifile,ivar) == 35040) then         ! RCP from 2005-2100, use only 2006 onwards, 2 * 35y + 1 * 25y chunks
                          nchunks(ifile) = 3
                          tidx1(1:nchunks(ifile)) = (/  366, 13141, 25916/)      ! 2006, 2041, 2076
                          tidx2(1:nchunks(ifile)) = (/13140, 25915, 35040/)      ! 2040, 2075, 2100
                       endif
                       if (ntimes(ifile,ivar) == 34675) then         ! RCP from 2006-2100, use all times, 2 * 35y + 1 * 25y chunks
                          nchunks(ifile) = 3
                          tidx1(1:nchunks(ifile)) = (/    1, 12776, 25551/)      ! 2006, 2041, 2076
                          tidx2(1:nchunks(ifile)) = (/12775, 25550, 34675/)      ! 2040, 2075, 2100
                       endif
                       do ic = 1,nchunks(ifile)
                          do it = tidx1(ic),tidx2(ic)
                             time_counter = it
                             call read_var(myncid(ifile,ivar),var_info(var_found(ifile,ivar))%name,indat2a)
                             call read_var(myncid(ifile,ivar),var_info(var_found(ifile,ivar))%name,indat2b)
                             where ((indat2a /= spval).and.(indat2b /= spval))
                                cmordat2d = (indat2a + indat2b)
                             elsewhere
                                cmordat2d = spval
                             endwhere
                             tval(1)   = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                             error_flag = cmor_write(      &
                                  var_id        = cmor_var_id, &
                                  data          = cmordat2d, &
                                  ntimes_passed = 1,       &
                                  time_vals     = tval,    &
                                  time_bnds     = tbnd)
                             if (error_flag < 0) then
                                write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                                stop
                             endif
                          enddo
                          write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
                          !
                          if (ic < nchunks(ifile)) then
                             cmor_filename(1:) = ' '
                             error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                             if (error_flag < 0) then
                                write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                                stop
                             else
                                write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                             endif
                          endif
                       enddo
                    enddo
                 enddo
              case ('rsus','rsuscs','rsut','rsutcs','rtmt')
                 !
                 ! rsus   : FSDS  - FSNS
                 ! rsuscs : FSDSC - FSNSC
                 ! rsut   : SOLIN - FSNTOA
                 ! rsutcs : SOLIN - FSNTOAC
                 ! rtmt   : FSNT  - FLNT
                 !
                 allocate(indat2a(nlons,nlats),indat2b(nlons,nlats))
                 allocate(cmordat2d(nlons,nlats))
                 do ivar = 1,xw(ixw)%ncesm_vars
                    do ifile = 1,nc_nfiles(ivar)
                       call open_cdf(myncid(ifile,ivar),trim(ncfile(ifile,ivar)),.true.)
                       call get_dims(myncid(ifile,ivar))
                       call get_vars(myncid(ifile,ivar))
                       !
                       if (.not.(allocated(time)))      allocate(time(ntimes(ifile,ivar)))
                       if (.not.(allocated(time_bnds))) allocate(time_bnds(2,ntimes(ifile,ivar)))
                       !
                       do n = 1,ntimes(ifile,ivar)
                          time_counter = n
                          call read_var(myncid(ifile,ivar),'time_bnds',time_bnds(:,n))
                       enddo
                       time = (time_bnds(1,:)+time_bnds(2,:))/2.
                       !
                       if (ntimes(ifile,ivar) == 56940) then         ! 20C from 1850-2005, use all times, 4 * 35y + 1 * 16y chunks
                          nchunks(ifile) = 5
                          tidx1(1:nchunks(ifile)) = (/    1, 12776, 25551, 38326, 51101/)      ! 1850, 1885, 1920, 1955, 1990
                          tidx2(1:nchunks(ifile)) = (/12775, 25550, 38325, 51100, 56940/)      ! 1884, 1919, 1954, 1989, 2005
                       endif
                       if (ntimes(ifile,ivar) == 35040) then         ! RCP from 2005-2100, use only 2006 onwards, 2 * 35y + 1 * 25y chunks
                          nchunks(ifile) = 3
                          tidx1(1:nchunks(ifile)) = (/  366, 13141, 25916/)      ! 2006, 2041, 2076
                          tidx2(1:nchunks(ifile)) = (/13140, 25915, 35040/)      ! 2040, 2075, 2100
                       endif
                       if (ntimes(ifile,ivar) == 34675) then         ! RCP from 2006-2100, use all times, 2 * 35y + 1 * 25y chunks
                          nchunks(ifile) = 3
                          tidx1(1:nchunks(ifile)) = (/    1, 12776, 25551/)      ! 2006, 2041, 2076
                          tidx2(1:nchunks(ifile)) = (/12775, 25550, 34675/)      ! 2040, 2075, 2100
                       endif
                       do ic = 1,nchunks(ifile)
                          do it = tidx1(ic),tidx2(ic)
                             time_counter = it
                             call read_var(myncid(ifile,ivar),var_info(var_found(ifile,ivar))%name,indat2a)
                             call read_var(myncid(ifile,ivar),var_info(var_found(ifile,ivar))%name,indat2b)
                             where ((indat2a /= spval).and.(indat2b /= spval))
                                cmordat2d = indat2a - indat2b
                             elsewhere
                                cmordat2d = spval
                             endwhere
                             tval(1)   = time(it) ; tbnd(1,1) = time_bnds(1,it) ; tbnd(2,1) = time_bnds(2,it)
                             error_flag = cmor_write(      &
                                  var_id        = cmor_var_id, &
                                  data          = cmordat2d, &
                                  ntimes_passed = 1,       &
                                  time_vals     = tval,    &
                                  time_bnds     = tbnd)
                             if (error_flag < 0) then
                                write(*,'(''ERROR writing '',a,'' T# '',i6)') trim(xw(ixw)%entry),it
                                stop
                             endif
                          enddo
                          write(*,'(''DONE writing '',a,'' T# '',i6,'' chunk# '',i6)') trim(xw(ixw)%entry),it-1,ic
                          !
                          if (ic < nchunks(ifile)) then
                             cmor_filename(1:) = ' '
                             error_flag = cmor_close(var_id=cmor_var_id,file_name=cmor_filename,preserve=1)
                             if (error_flag < 0) then
                                write(*,'(''ERROR close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                                stop
                             else
                                write(*,'(''GOOD close chunk: '',i6,'' of '',a)') ic,cmor_filename(1:128)
                             endif
                          endif
                       enddo
                    enddo
                 enddo
              end select
              if (allocated(indat2a))   deallocate(indat2a)
              if (allocated(indat2b))   deallocate(indat2b)
              if (allocated(indat2c))   deallocate(indat2c)
              if (allocated(cmordat2d)) deallocate(cmordat2d)
              do ivar = 1,xw(ixw)%ncesm_vars
                 do ifile = 1,nc_nfiles(ivar)
                    call close_cdf(myncid(ifile,ivar))
                 enddo
d543 1
d545 38
a582 13
              ! Reset
              !
              time_counter = 0
              var_counter  = 0
              error_flag   = 0
              var_found    = 0
              mycmor%positive = ' '
              original_name= ' '
              !
              if (allocated(time))      deallocate(time)
              if (allocated(time_bnds)) deallocate(time_bnds)
              !
           endif
d584 3
a586 2
     enddo xwalk_loop
  enddo table_loop
@
