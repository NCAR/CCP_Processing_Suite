head	1.5;
access;
symbols;
locks;
comment	@# @;


1.5
date	2016.01.28.20.47.43;	author strandwg;	state Exp;
branches;
next	1.4;

1.4
date	2014.07.02.17.00.47;	author strandwg;	state Exp;
branches;
next	1.3;

1.3
date	2014.06.15.16.45.54;	author strandwg;	state Exp;
branches;
next	1.2;

1.2
date	2014.05.08.17.39.10;	author strandwg;	state Exp;
branches;
next	1.1;

1.1
date	2014.01.23.18.41.27;	author strandwg;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@CASE=xxxCASExxx ; export CASE
HIST=xxxHISTxxx ; export HIST
TPER=xxxTPERxxx ; export TPER
LMEX=xxxLMEXxxx ; export LMEX
#
echo -n "TS START: " ; date
#
# Template for processing last millenium ensemble CESM history netCDF files into single-field format 
#
# Extract relevant information from "experiments.txt"
#
#  Columns   Field
#   1 -  54  CCSM case name
# 105 - 109  MIP (cm3 or cm5) experiment (N/A if not applicable)
# 110 - 149  RUN_REFCASE (parent case)
# 150 - 164  RUN_REFDATE (branch date, yyyy-mm-dd)
# 165 - 174  years of experiment (YYYY if unknown)
# 165 - 174  run years of experiment (YYYY if unknown)
# 175 - 184  CMIP5-requested years
# 185 - 194  GRID (resolution)
# 195 - 214  COMPSET (N/A if not applicable)
# 215 - 234  REPOTAG (N/A if not applicable)
# 234 - 249  Calendar dates of simulation execution (yyyy/mm-yyyy/mm)
# 250 - 259  MACH (hardware)
# 260 - end  DOUT_L_MSROOT (history file location on archive)
#
EXPFILE=${HOME}/CCP_Processing_Suite/experiments.txt ; export EXPFILE
if [ -f $EXPFILE ] ; then
   MIPNAME=`egrep "^$CASE " $EXPFILE | cut -c105-  | cut -d" " -f1`
    PARENT=`egrep "^$CASE " $EXPFILE | cut -c110- | cut -d" " -f1`
    BRANCH=`egrep "^$CASE " $EXPFILE | cut -c150- | cut -d" " -f1`
   YEARBEG=`egrep "^$CASE " $EXPFILE | cut -c165-168`
   YEAREND=`egrep "^$CASE " $EXPFILE | cut -c170-173`
       RES=`egrep "^$CASE " $EXPFILE | cut -c185- | cut -d" " -f1`
   REPOTAG=`egrep "^$CASE " $EXPFILE | cut -c215- | cut -d" " -f1`
  HARDWARE=`egrep "^$CASE " $EXPFILE | cut -c250- | cut -d" " -f1`
  HISTBASE=`egrep "^$CASE " $EXPFILE | cut -c260- | cut -d" " -f1`
else
  echo "Cannot find $EXPFILE. EXIT"
  ./update_status error "$CASE $HIST $TPER"
  exit 1
fi
#
if ! [ $YEARBEG ] ; then
  echo "Unable to set variables because "$CASE" not found in $EXPFILE"
  ./update_status error "$CASE $HIST $TPER"
  exit 1
fi
#
# Acquire PROCHOST
#
PROCHOST=`hostname`;export PROCHOST
#
# resolve machine/site dependencies
#
case "$PROCHOST" in 
  yslogin* | geyser* )                                # Yellowstone (geyser) @@ CISL/NCAR
    BASEDIR=${HOME}/CCP_Processing_Suite
    NCODIR=/glade/apps/opt/nco/4.4.2/gnu/4.8.2/bin
    NCKS=${NCODIR}/ncks      ; export NCKS
    NCRCAT=${NCODIR}/ncrcat  ; export NCRCAT
    if [ `echo $CASE | egrep "tambora" | wc -c` = 0 ] ; then
      PROCBASE=/glade/p/cesm0005/proc/$USER/$CASE  ; export PROCBASE
      LOCALDSK=/glade/p/cesm0005/csm/$CASE         ; export LOCALDSK
      ARCHIVE_BASE=/CCSM/csm/CESM-CAM5-LME         ; export ARCHIVE_BASE 
    else
      PROCBASE=/glade/p/cesm/palwg_dev/LME/proc/$USER/$CASE  ; export PROCBASE
      LOCALDSK=/glade/p/cesm/palwg_dev/LME/archive/$CASE     ; export LOCALDSK
      ARCHIVE_BASE=/CCSM/csm/palwg_dev/cesmLME/CESM-CAM5-LME ; export ARCHIVE_BASE
    fi
    DISK_BASE=/glade/p/cesmLME/CESM-CAM5-LME      ; export DISK_BASE
    HSIOPTS="-a P93300019"                        ; export HSIOPTS
    ;;
  * ) 
    echo "Unable to continue because "$PROCHOST" not known."
    ./update_status error "$CASE $HIST $TPER"
    exit 1 ;;
esac
#
ISTAMB=`echo $CASE | egrep "tambora" | wc -l`
if [ $ISTAMB -ne 0 ] ; then
  DISK_BASE=/glade/p/cesm/palwg_dev/LME/CESM-CAM5-LME ; export DISK_BASE
fi
#
# Strip off first part of $HIST
#
HTYP=`echo $HIST | cut -d'.' -f1` ; export HTYP
#
# Convert history type to component name
#
case "$HTYP" in
  cam )
    COMP_NAME=atm ;;
  clm2 ) 
    COMP_NAME=lnd ;;
  pop  ) 
    COMP_NAME=ocn ;;
  rtm  ) 
    COMP_NAME=rof ;;
  cice ) 
    COMP_NAME=ice ;;
  * ) 
    echo "Unable to continue because "$HIST" not known."
    ./update_status error "$CASE $HIST $TPER"
    exit 1 ;;
esac
#
# Set up local names and archival names
#
LOCAL_HIST=$LOCALDSK/$COMP_NAME/hist
LOCAL_PROC=$PROCBASE/$COMP_NAME
ARCHIVE_HIST=$HISTBASE/$CASE/$COMP_NAME/hist
#
ARCHIVE_PROC=$ARCHIVE_BASE/$COMP_NAME/proc/tseries
DISK_PROC=$DISK_BASE/$COMP_NAME/proc/tseries
#
case "$TPER" in
  mon )
    ARCHIVE_PROC=${ARCHIVE_PROC}/monthly
       DISK_PROC=${DISK_PROC}/monthly ;;
  day )
    ARCHIVE_PROC=${ARCHIVE_PROC}/daily
       DISK_PROC=${DISK_PROC}/daily ;;
  hr6 )
    ARCHIVE_PROC=${ARCHIVE_PROC}/hourly6
       DISK_PROC=${DISK_PROC}/hourly6 ;;
  * ) 
    echo "Unable to continue because "$TPER" not known."
    ./update_status error "$CASE $HIST $TPER"
    exit 1 ;;
esac
#
LOCAL_PROC=${LOCAL_PROC}/${TPER}/${LMEX}
CACHEDIR=${LOCAL_PROC}/to_archive
#
YRCOUNT=`expr '(' $YEAREND '-' $YEARBEG ')' '+' '1'`
MNCOUNT=`expr '(' '(' $YEAREND '-' $YEARBEG ')' '+' '1' ')' '*' '12'`
#
# Print out values
#
echo "            Case name : "$CASE ; export CASE
echo "    History file type : "$HIST ; export HIST
echo "          Time period : "$TPER ; export TPER
echo "    by var processing : YES"
echo " HPSS processed files : "$ARCHIVE_PROC ; export ARCHIVE_PROC
echo " disk processed files : "$DISK_PROC    ; export DISK_PROC
HARDWARE=${HARDWARE}".ucar.edu"
echo "          Branch date : "$BRANCH   ; export BRANCH
echo "           Resolution : "$RES      ; export RES
echo "             Hardware : "$HARDWARE ; export HARDWARE
echo "              Compset : "$COMPSET  ; export COMPSET
echo "       Repository tag : "$REPOTAG  ; export REPOTAG
echo "           Begin year : "$YEARBEG  ; export YEARBEG
echo "             End year : "$YEAREND  ; export YEAREND
echo "           Year count : "$YRCOUNT  ; export YRCOUNT
echo "         Months count : "$MNCOUNT  ; export MNCOUNT
echo ""
echo "    Archival base dir : "$ARCHIVE_BASE  ; export ARCHIVE_BASE
echo "        History files : "$ARCHIVE_HIST  ; export ARCHIVE_HIST
echo "        History names : "$HIST          ; export HIST
echo ""
echo "      Processing host : "$PROCHOST      ; export PROCHOST
echo "  Local history files : "$LOCAL_HIST    ; export LOCAL_HIST
echo "       Processing dir : "$LOCAL_PROC    ; export LOCAL_PROC
echo "    Archive cache dir : "$CACHEDIR      ; export CACHEDIR
echo "  Processing code dir : "$BASEDIR       ; export BASEDIR
#  
if [ ! -d $LOCAL_PROC ] ; then 
  mkdir -p $LOCAL_PROC 
fi
if [ ! -d ${CACHEDIR} ] ; then 
  mkdir -p $CACHEDIR
fi
cd $LOCAL_PROC
#
ln -s -f $BASEDIR/var_extract_compress      var_extract
ln -s -f $BASEDIR/store_to_archive_var_keep store_to_archive_var
ln -s -f $BASEDIR/archive_write_var_keep    archive_write_var_keep
ln -s -f $BASEDIR/disk_move_var             .
ln -s -f $BASEDIR/update_status             .
#
cd $LOCAL_PROC
#
# Start actual processing, extract each field one at a time for all times
#
./update_status start
#
if [ -d $LOCAL_HIST ] ; then
  case "$LMEX" in
    lm )
      NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.{08[5-9],09[0-9],10[0-9],11[0-9],12[0-9],13[0-9],14[0-9],15[0-9],16[0-9],17[0-9],18[0-4]}?-*.nc | wc -l`
      if [ $NHISTF -eq 0 ] ; then
        echo "History files from "${YEARBEG}"-"${YEAREND}" not on "${LOCAL_HIST}". Exiting."
        ./update_status error "$CASE $HIST $TPER"
        exit 1
      fi ;;
    ext ) 
      NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.{18[5-9][0-9],19[0-9][0-9],2000}-*.nc | wc -l`
      if [ $NHISTF -eq 0 ] ; then
        echo "History files from "${YEARBEG}"-"${YEAREND}" not on "${LOCAL_HIST}". Exiting."
        ./update_status error "$CASE $HIST $TPER"
        exit 1
      fi ;;
    rcp ) 
      NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.{200[6-9],20[1-9][0-9],2100}-*.nc | wc -l`
      if [ $NHISTF -eq 0 ] ; then
        echo "History files from "${YEARBEG}"-"${YEAREND}" not on "${LOCAL_HIST}". Exiting."
        ./update_status error "$CASE $HIST $TPER"
        exit 1
      fi ;;
    * ) 
      echo "Unable to continue because "$LMEX" not known."
      ./update_status error "$CASE $HIST $TPER $LMEX"
      exit 1 ;;
  esac
fi
#
# Last millenium portion (850-1849)
#
# Link history files - all for everything besides pop.h and pop.h.nday1,
# one century at a time for pop.h and pop.h.nday1
#
if [ "$LMEX" = "lm" ] ; then
  if [ "$HIST" = "pop.h" ] || [ "$HIST" = "pop.h.nday1" ] ; then
    echo ${CASE}"."${HIST}" files on disk, softlinking."
    for ICEN in 08 09 10 11 12 13 14 15 16 17 18 ; do
      rm -f ${CASE}.${HIST}.${ICEN}[0-9]*.nc 
      if [ ! -f .comp.${CASE}.${HIST}.${ICEN} ] ; then
        if [ "$ICEN" = "18" ] ; then
          NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.${ICEN}[0-4]*.nc | wc -l`
        else
          NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.${ICEN}[0-9]*.nc | wc -l`
        fi
        if [ $NHISTF -eq 0 ] ; then 
          echo ${NHISTF}" files in "${LOCAL_HIST}"/"${CASE}"."${HIST}"."${ICEN}". Incorrect - exiting."
          ./update_status error "$CASE $HIST $TPER"
          exit 1
        else
          if [ "$ICEN" = "18" ] ; then
            ln -s -f ${LOCAL_HIST}/${CASE}.${HIST}.${ICEN}[0-4]*.nc .
          else
            ln -s -f ${LOCAL_HIST}/${CASE}.${HIST}.${ICEN}[0-9]*.nc .
          fi
        fi
        NHISTF=`/bin/ls ${CASE}.${HIST}.${ICEN}*.nc | wc -l`
        if [ "$ICEN" = "18" ] || [ "$ICEN" = "08" ] ; then
          GOODHC=600
        else
          GOODHC=1200
        fi
        if [ $NHISTF -ne $GOODHC ] ; then
          echo ${NHISTF}" should be "${GOODHC}". File count mismatch. Exit."
          exit 1
        fi
#
# Create output filename time period suffix
#
        case "$TPER" in
          mon )
            OUTTIME=${ICEN}0001-${ICEN}9912
            if [ "$ICEN" = "18" ] ; then
              OUTTIME=${ICEN}0001-${ICEN}4912
            fi
            if [ "$ICEN" = "08" ] ; then
              OUTTIME=${ICEN}5001-${ICEN}9912
            fi ;;
          day ) 
            OUTTIME=${ICEN}000101-${ICEN}991231
            if [ "$ICEN" = "18" ] ; then
              OUTTIME=${ICEN}000101-${ICEN}491231
            fi
            if [ "$ICEN" = "08" ] ; then
              OUTTIME=${ICEN}500101-${ICEN}991231
            fi ;;
        esac
        export OUTTIME
#
# Extract each field from all files
#
        echo -n "TS var_extract start: " ; date
        ./var_extract
        if [ $? -ne 0 ] ; then
          echo "var_extract failed"
          ./update_status error "$CASE $HIST $TPER"
          exit 1
        fi
        echo -n "TS var_extract end  : " ; date
#
# Store completed data on archival system
#
        echo -n "TS archive start: " ; date
        ./store_to_archive_var
        if [ $? -ne 0 ] ; then
          echo "store_to_archive failed"
          ./update_status error "$CASE $HIST $TPER"
          exit 1
        else
          echo -n "TS archive end: " ; date
        fi
#
# Move completed data on to DISK_PROC
#
        echo -n "TS disk move start: " ; date
        ./disk_move_var
        if [ $? -ne 0 ] ; then
          echo "disk_move_var failed"
          ./update_status error "$CASE $HIST $TPER"
          exit 1
        else
          echo -n "TS disk_move_var end: " ; date
        fi
        touch .comp.${CASE}.${HIST}.${ICEN}
        rm ${CASE}.${HIST}.${ICEN}*nc
      fi
    done
#
# All other output streams
#
  else
#
# Make sure there's the correct number of files
#
    NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.{08[5-9],09[0-9],10[0-9],11[0-9],12[0-9],13[0-9],14[0-9],15[0-9],16[0-9],17[0-9],18[0-4]}?-*.nc | wc -l`
    if [ $NHISTF -eq 0 ] ; then 
      echo "No files in "${LOCAL_HIST}"/"${CASE}"."${HIST}". Incorrect - exiting."
      exit 1
    fi
    ln -s -f ${LOCAL_HIST}/${CASE}.${HIST}.{08[5-9],09[0-9],10[0-9],11[0-9],12[0-9],13[0-9],14[0-9],15[0-9],16[0-9],17[0-9],18[0-4]}?-*.nc .
    NHISTF=`/bin/ls ${CASE}.${HIST}.{08[5-9],09[0-9],10[0-9],11[0-9],12[0-9],13[0-9],14[0-9],15[0-9],16[0-9],17[0-9],18[0-4]}?-*.nc | wc -l`
    case "$HIST" in 
      cam.h0 | cice.h | cice.h1 | clm2.h0 | rtm.h0 )
        if [ $NHISTF -ne $MNCOUNT ] ; then
          echo ${NHISTF}" should be "${MNCOUNT}". File count mismatch. Exit."
          exit 1
        fi ;;
      cam.h1 | clm2.h1 )
        if [ $NHISTF = 1001 ] || [ $NHISTF = 1000 ] ; then
          echo ${NHISTF}" correct for "${HIST}
        else
          echo ${NHISTF}" should be 1000 or 1001. File count mismatch. Exit."
          exit 1
        fi ;;
    esac
#
# Create output filename time period suffix
#
    case "$TPER" in
      mon )
        OUTTIME=085001-184912 ;;
      day ) 
        OUTTIME=08500101-18491231 ;;
    esac
    export OUTTIME
#
# Extract each field from all files
#
    echo -n "TS var_extract start: " ; date
    ./var_extract
    if [ $? -ne 0 ] ; then
      echo "var_extract failed"
      ./update_status error "$CASE $HIST $TPER"
      exit 1
    fi
    echo -n "TS var_extract end  : " ; date
#
# Store completed data on archival system
#
    echo -n "TS archive start: " ; date
    ./store_to_archive_var
    if [ $? -ne 0 ] ; then
      echo "store_to_archive failed"
      ./update_status error "$CASE $HIST $TPER"
      exit 1
    else
      echo -n "TS archive end: " ; date
    fi
#
# Move completed data on to DISK_PROC
#
    echo -n "TS disk move start: " ; date
    ./disk_move_var
    if [ $? -ne 0 ] ; then
      echo "disk_move_var failed"
      ./update_status error "$CASE $HIST $TPER"
      exit 1
    else
      echo -n "TS disk_move_var end: " ; date
    fi
  fi
fi
#
# Historical extension - 1850 to 2005
#
# Link history files - all for everything
#
# Make sure there's the correct number of files
#
if [ "$LMEX" = "ext" ] ; then
  rm -f ${CASE}.${HIST}.[0-9]*.nc
  ln -s -f ${LOCAL_HIST}/${CASE}.${HIST}.{18[5-9][0-9],19[0-9][0-9],200[0-5]}-*.nc .
  NHISTF=`/bin/ls ${CASE}.${HIST}.*.nc | wc -l`
  case "$HIST" in 
    cam.h0 | cice.h | cice.h1 | clm2.h0 | rtm.h0 | pop.h | pop.h.nday1 )
      if [ $NHISTF -ne 1872 ] ; then
        echo ${NHISTF}" should be 1872. File count mismatch. Exit."
        exit 1
      fi ;;
    cam.h1 | clm2.h1 )
      if [ $NHISTF = 156 ] || [ $NHISTF = 157 ] ; then
        echo ""
      else
        echo ${NHISTF}" should be 156 or 157. File count mismatch. Exit."
        exit 1
      fi ;;
  esac
#
# Create output filename time period suffix
#
  case "$TPER" in
    mon )
      OUTTIME=185001-200512 ;;
    day ) 
      OUTTIME=18500101-20051231 ;;
    hr6 ) 
      OUTTIME=1850010100Z-2005123118Z ;;
  esac
  export OUTTIME
#
# Extract each field from all files
#
  echo -n "TS var_extract start: " ; date
  ./var_extract
  if [ $? -ne 0 ] ; then
    echo "var_extract failed"
    ./update_status error "$CASE $HIST $TPER"
    exit 1
  fi
  echo -n "TS var_extract end  : " ; date
#
# Store completed data on archival system
#
  echo -n "TS archive start: " ; date
  ./store_to_archive_var
  if [ $? -ne 0 ] ; then
    echo "store_to_archive failed"
    ./update_status error "$CASE $HIST $TPER"
    exit 1
  else
    echo -n "TS archive end: " ; date
  fi
#
# Move completed data on to DISK_PROC
#
  echo -n "TS disk move start: " ; date
 ./disk_move_var
  if [ $? -ne 0 ] ; then
    echo "disk_move_var failed"
    ./update_status error "$CASE $HIST $TPER"
    exit 1
  else
    echo -n "TS disk_move_var end: " ; date
  fi
fi
#
# RCP extension - 2006 to 2100
#
# Link history files - all for everything
#
# Make sure there's the correct number of files
#
if [ "$LMEX" = "rcp" ] ; then
  NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.{200[6-9],20[1-9][0-9],2100}-*.nc | wc -l`
  if [ $NHISTF -eq 0 ] ; then 
    echo "No files in "${LOCAL_HIST}"/"${CASE}"."${HIST}". Incorrect - exiting."
    exit 1
  fi
  ln -s -f  ${LOCAL_HIST}/${CASE}.${HIST}.{200[6-9],20[1-9][0-9],2100}-*.nc .
  NHISTF=`/bin/ls ${CASE}.${HIST}.*.nc | wc -l`
  case "$HIST" in 
    cam.h0 | cice.h | clm2.h0 | pop.h | pop.h.nday1 | rtm.h0 )
      if [ $NHISTF -ne 1140 ] ; then
        echo ${NHISTF}" should be 1140. File count mismatch. Exit."
        exit 1
      fi ;;
    cice.h1 )
      if [ $NHISTF -ne 34675 ] ; then
        echo ${NHISTF}" should be 34675. File count mismatch. Exit."
        exit 1
      fi ;;
    cam.h1 | clm2.h1 )
      if [ $NHISTF -ne 95 ] ; then
        echo ${NHISTF}" should be 95. File count mismatch. Exit."
        exit 1
      fi ;;
  esac
#
# Create output filename time period suffix
#
  case "$TPER" in
    mon )
      OUTTIME=200601-210012 ;;
    day ) 
      OUTTIME=20060101-21001231 ;;
    hr6 ) 
      OUTTIME=2006010100Z-2100123118Z ;;
  esac
  export OUTTIME
#
# Extract each field from all files
#
  echo -n "TS var_extract start: " ; date
  ./var_extract
  if [ $? -ne 0 ] ; then
    echo "var_extract failed"
    ./update_status error "$CASE $HIST $TPER"
    exit 1
  fi
  echo -n "TS var_extract end  : " ; date
#
# Store completed data on archival system
#
  echo -n "TS archive start: " ; date
  ./store_to_archive_var
  if [ $? -ne 0 ] ; then
    echo "store_to_archive failed"
    ./update_status error "$CASE $HIST $TPER"
    exit 1
  else
    echo -n "TS archive end: " ; date
  fi
#
# Move completed data on to DISK_PROC
#
  echo -n "TS disk move start: " ; date
 ./disk_move_var
  if [ $? -ne 0 ] ; then
    echo "disk_move_var failed"
    ./update_status error "$CASE $HIST $TPER"
    exit 1
  else
    echo -n "TS disk_move_var end: " ; date
  fi
fi
#
# Completed
#
./update_status complete
echo -n "TS COMPLETE: " ; date
@


1.4
log
@*** empty log message ***
@
text
@d59 1
a59 1
    NCODIR=/glade/apps/opt/nco/4.3.7/gnu/4.7.2/bin
d62 11
a72 6
    PROCBASE=/glade/p/cesm0005/proc/$USER/$CASE ; export PROCBASE
    LOCALDSK=/glade/p/cesm0005/csm/$CASE        ; export LOCALDSK
    ARCHIVE_BASE=/CCSM/csm/CESM-CAM5-LME        ; export ARCHIVE_BASE
    DISK_BASE=/glade/p/cesm0005/CESM-CAM5-LME   ; export DISK_BASE
    LD_LIBRARY_PATH=/glade/apps/opt/hdf5/1.8.9/pgi/12.5/lib:${LD_LIBRARY_PATH} ; export LD_LIBRARY_PATH
    LD_LIBRARY_PATH=/glade/apps/opt/szlib/2.1/pgi/12.5/lib:${LD_LIBRARY_PATH}  ; export LD_LIBRARY_PATH
d80 4
a83 1
export LD_LIBRARY_PATH
d124 3
d171 2
a172 2
if [ ! -d $CACHEDIR ] ; then 
  mkdir -p $CACHEDIR 
d176 5
a180 5
ln -s -f $BASEDIR/var_extract          .
ln -s -f $BASEDIR/store_to_archive_var .
ln -s -f $BASEDIR/archive_write_var    .
ln -s -f $BASEDIR/disk_move_var        .
ln -s -f $BASEDIR/update_status        .
d189 27
a215 15
  if [ "$LMEX" = "lm" ] ; then
    NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.{08[5-9],09[0-9],10[0-9],11[0-9],12[0-9],13[0-9],14[0-9],15[0-9],16[0-9],17[0-9],18[0-4]}?-*.nc | wc -l`
    if [ $NHISTF -eq 0 ] ; then
      echo "History files from 850-1849 not on "${LOCAL_HIST}". Exiting."
      ./update_status error "$CASE $HIST $TPER"
      exit 1
    fi
  else
    NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.{18[5-9],19[0-9],200}?-*.nc | wc -l`
    if [ $NHISTF -eq 0 ] ; then
      echo "History files from 1850-2005 not on "${LOCAL_HIST}". Exiting."
      ./update_status error "$CASE $HIST $TPER"
      exit 1
    fi
  fi
d227 1
d332 2
a333 2
        if [ $NHISTF -ne 12000 ] ; then
          echo ${NHISTF}" should be 12000. File count mismatch. Exit."
d390 1
a390 1
else
d398 2
a399 5
  NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.{18[5-9][0-9],19[0-9][0-9],200[0-5]}-*.nc | wc -l`
  if [ $NHISTF -eq 0 ] ; then 
    echo "No files in "${LOCAL_HIST}"/"${CASE}"."${HIST}". Incorrect - exiting."
    exit 1
  fi
d403 1
a403 1
    cam.h0 | cice.h | cice.h1 | clm2.h0 | rtm.h0 | pop.h )
d424 82
@


1.3
log
@*** empty log message ***
@
text
@d122 1
a122 1
LOCAL_PROC=${LOCAL_PROC}/${TPER}
d313 4
a316 2
        if [ $NHISTF -ne 1001 ] ; then
          echo ${NHISTF}" should be 1001. File count mismatch. Exit."
a378 5
  NHISTF=`/bin/ls ${CASE}.${HIST}.{08[5-9],09[0-9],10[0-9],11[0-9],12[0-9],13[0-9],14[0-9],15[0-9],16[0-9],17[0-9],18[0-4]}?-*.nc | wc -l`
  if [ $NHISTF -ne 0 ] ; then 
    mkdir ./.LM
    mv ${CASE}.${HIST}.{08[5-9],09[0-9],10[0-9],11[0-9],12[0-9],13[0-9],14[0-9],15[0-9],16[0-9],17[0-9],18[0-4]}?-*.nc ./.LM
  fi
@


1.2
log
@*** empty log message ***
@
text
@d62 4
a65 11
    if [ ${CASE} = "b.e11.B1850C5CN.f19_g16.008" ] ; then
      PROCBASE=/glade/scratch/$USER/$CASE         ; export PROCBASE
      LOCALDSK=/glade/scratch/$USER/$CASE         ; export LOCALDSK
      ARCHIVE_BASE=/CCSM/csm/$CASE                ; export ARCHIVE_BASE
      DISK_BASE=/glade/p/cesm0005/CESM-CAM5-LME   ; export DISK_BASE
    else
      PROCBASE=/glade/p/cesm0005/proc/$USER/$CASE ; export PROCBASE
      LOCALDSK=/glade/p/cesm0005/csm/$CASE        ; export LOCALDSK
      ARCHIVE_BASE=/CCSM/csm/CESM-CAM5-LME        ; export ARCHIVE_BASE
      DISK_BASE=/glade/p/cesm0005/CESM-CAM5-LME   ; export DISK_BASE
    fi
@


1.1
log
@Initial revision
@
text
@d4 1
d8 1
a8 1
# Template for processing CCSM history netCDF files into single-field format 
d10 1
a10 1
# Extract information from "experiments.txt"
a13 4
#  55 -  74  model_id (CCSM4, CESM-CAM5, CESM-BGC, CESM-CHEM, CESM-WACCM, CESM1-CAM5.1-FV2, etc)
#  75 -  76  Location (NC = NCAR; NE = NERSC; OR = ORNL)
#  80 -  94  Official MIP name, or very brief description (N/A if not applicable)
#  95 - 104  RIP code (cm5) or realization number (cm3) (N/A if not applicable)
a28 3
  LOCATION=`egrep "^$CASE " $EXPFILE | cut -c75-  | cut -d" " -f1`
   DESCRIP=`egrep "^$CASE " $EXPFILE | cut -c80-  | cut -d" " -f1`
   REALIZN=`egrep "^$CASE " $EXPFILE | cut -c95-  | cut -d" " -f1`
a34 1
   COMPSET=`egrep "^$CASE " $EXPFILE | cut -c195- | cut -d" " -f1`
d40 1
d44 1
a44 1
if ! [ $LOCATION ] ; then
d46 1
a56 10
  silver* )                                # silver @@ CGD/NCAR
    BASEDIR=${HOME}/CCP_Processing_Suite
    NCKS=/usr/local/bin/ncks             ; export NCKS
    NCRA=/usr/local/bin/ncra             ; export NCRA
    NCRCAT=/usr/local/bin/ncrcat         ; export NCRCAT
    PROCBASE=/datalocal/proc/$USER/$CASE ; export PROCBASE
    LOCALDSK=/datalocal/proc/$CASE       ; export LOCALDSK
    ARCHIVE_BASE=/CCSM/csm               ; export ARCHIVE_BASE
    ;;

d59 14
a72 6
    NCKS=/glade/apps/opt/nco/4.3.4/gnu/nco-4.3.4/bin/ncks      ; export NCKS
    NCRA=/glade/apps/opt/nco/4.3.4/gnu/nco-4.3.4/bin/ncra      ; export NCRA
    NCRCAT=/glade/apps/opt/nco/4.3.4/gnu/nco-4.3.4/bin/ncrcat  ; export NCRCAT
    PROCBASE=/glade/p/cesm0005/proc/$USER/$CASE ; export PROCBASE
    LOCALDSK=/glade/p/cesm0005/csm/$CASE       ; export LOCALDSK
    ARCHIVE_BASE=/CCSM/csm/CESM-CAM5-LME       ; export ARCHIVE_BASE
d78 1
d91 1
a91 1
  cam2 | cam )
d103 1
d114 1
a116 2
  ann )
    ARCHIVE_PROC=${ARCHIVE_PROC}/annual   ;;
d118 2
a119 1
    ARCHIVE_PROC=${ARCHIVE_PROC}/monthly  ;;
d121 2
a122 3
    ARCHIVE_PROC=${ARCHIVE_PROC}/daily    ;;
  hr6 )
    ARCHIVE_PROC=${ARCHIVE_PROC}/hourly6  ;;
d125 1
d137 6
a142 5
echo "           Case name : "$CASE ; export CASE
echo "   History file type : "$HIST ; export HIST
echo "         Time period : "$TPER ; export TPER
echo "   by var processing : YES"
echo "     Processed files : "$ARCHIVE_PROC  ; export ARCHIVE_PROC
d144 9
a152 13
echo "            Location : "$LOCATION ; export LOCATION
echo "         Description : "$DESCRIP  ; export DESCRIP
echo "     Realization/RIP : "$REALIZN  ; export REALIZN
echo "         Parent case : "$PARENT   ; export PARENT
echo "         Branch date : "$BRANCH   ; export BRANCH
echo "          Resolution : "$RES      ; export RES
echo "            Hardware : "$HARDWARE ; export HARDWARE
echo "             Compset : "$COMPSET  ; export COMPSET
echo "      Repository tag : "$REPOTAG  ; export REPOTAG
echo "          Begin year : "$YEARBEG  ; export YEARBEG
echo "            End year : "$YEAREND  ; export YEAREND
echo "          Year count : "$YRCOUNT  ; export YRCOUNT
echo "        Months count : "$MNCOUNT  ; export MNCOUNT
d154 3
a156 3
echo "   Archival base dir : "$ARCHIVE_BASE  ; export ARCHIVE_BASE
echo "       History files : "$ARCHIVE_HIST  ; export ARCHIVE_HIST
echo "       History names : "$HIST          ; export HIST
d158 5
a162 5
echo "     Processing host : "$PROCHOST      ; export PROCHOST
echo " Local history files : "$LOCAL_HIST    ; export LOCAL_HIST
echo "      Processing dir : "$LOCAL_PROC    ; export LOCAL_PROC
echo "   Archive cache dir : "$CACHEDIR      ; export CACHEDIR
echo " Processing code dir : "$BASEDIR       ; export BASEDIR
d172 2
a173 2
ln -s -f $BASEDIR/archive_list         .
ln -s -f $BASEDIR/archive_read         .
d175 1
a175 8
ln -s -f $BASEDIR/var_split            .
ln -s -f $BASEDIR/hist_mon_to_year     .
ln -s -f $BASEDIR/var_year_to_all      .
ln -s -f $BASEDIR/var_lme_year_to_cen  .
ln -s -f $BASEDIR/concatenate_data     .
ln -s -f $BASEDIR/concatenate_lme_data .
ln -s -f $BASEDIR/compress_data        .
ln -s -f $BASEDIR/store_to_archive_var .
d180 1
a180 5
# Start actual processing, one year at a time
#
# Start from end and go to beginning
#
YEARNOW=$YEAREND;export YEARNOW
d184 17
a200 1
# Big processing loop
d202 1
a202 11
while [ $YEARNOW -ge $YEARBEG ] ; do
  ./update_status $YEARNOW
  if [ ! -f .comp.$CASE.$HIST.$YEARNOW.nc ] ; then
    echo -n "TS PRO "${CASE}"."${HIST}"."${YEARNOW}": " ; date
    if [ -d $LOCAL_HIST ] ; then
      NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.${YEARNOW}* | wc -l`
      if [ $NHISTF -ne 0 ] ; then
        echo ${CASE}"."${HIST}"."${YEARNOW}" files on disk, softlinking."
        ln -s -f ${LOCAL_HIST}/${CASE}.${HIST}.${YEARNOW}* .
      fi
    else
d204 2
a205 1
# Get archive listing
d207 17
a223 19
      ARCHIVE_LIST=archive.$CASE.$HIST
      if [ ! -f $ARCHIVE_LIST ] ; then
        echo "Getting archival list of "$CASE" "$HIST
        ./archive_list $ARCHIVE_LIST
      fi
      ./archive_read $ARCHIVE_LIST $YEARNOW
      if [ $? -ne 0 ] ; then
        echo "Error from archive_read"
       ./update_status error "$CASE $HIST $TPER"
       exit 1
      fi
    fi
    if [ -f $CASE.$HIST.$YEARNOW*.tar ] ; then
      NTARFL=`/bin/ls $CASE.$HIST.$YEARNOW*.tar | wc -l`
      if [ $NTARFL -ne 0 ] ; then
        for TARFILE in `/bin/ls $CASE.$HIST.$YEARNOW*.tar` ; do
          tar xf $TARFILE
          if [ $? -ne 0 ] ; then
            echo "Error untarring "$TARFILE
d225 1
a225 1
            rm -f $TARFILE
d227 56
a282 3
        done
      fi
    fi
d284 1
a284 1
# Convert all YEARNOW file(s) to netCDF-4
d286 2
a287 4
    for FILE in `/bin/ls $CASE.$HIST.${YEARNOW}*.nc` ; do
      TYPE=`$NCKS -M $FILE | egrep "type" | cut -d"=" -f6` ; export TYPE
      if [ "$TYPE" != "NC_FORMAT_NETCDF4" ] ; then
        $NCKS -4 $FILE ${FILE}4
d289 2
a290 1
          echo "Cannot convert "${FILE}" to netCDF-4. Exiting."
d293 1
a293 1
          mv ${FILE}4 $FILE
d295 2
d300 1
a300 1
# Check on data type to see if it needs time splitting and reconcatenating first
d302 3
a304 3
    case "$TPER" in
# 
# Daily data - requires lots of checks, usually
d306 19
a324 39
      day )
      case "$HTYP" in
        cam | clm2 )
          NFNC=`echo $CASE.$HIST.${YEARNOW}-01-01-00000.nc | wc -w`
          if [ ${NFNC} -ne 0 ] ; then
            for FILE in `/bin/ls $CASE.$HIST.${YEARNOW}-01-01-00000.nc` ; do
              echo "time_split not required on "$FILE" 1 year length already from same year. Renaming."
              TRIMD=`echo $FILE | sed -e 's/\-01\-01\-00000//g'`
              mv $FILE $TRIMD
            done
          fi ;;
        cice )
          NFNC=`echo $CASE.$HIST.${YEARNOW}-??.nc | wc -w`
          if [ ${NFNC} -eq 12 ] ; then
            ./hist_mon_to_year
            if [ $? -ne 0 ] ; then
              echo "Error from hist_mon_to_year on file "$FILE
              ./update_status error hist_mon_to_year
              exit 1
            fi
          fi ;;
        pop )
          NFNC=`echo $CASE.$HIST.${YEARNOW}-??-??.nc | wc -w`
          if [ ${NFNC} -ne 0 ] ; then
            for FILE in `/bin/ls $CASE.$HIST.${YEARNOW}-??-??.nc` ; do
              TRIMD=`echo $FILE | sed -e 's/-01.nc$/.nc/g'`
              mv $FILE $TRIMD
              TRIMD=`echo $FILE | sed -e 's/-01-02.nc$/-01.nc/g'`
              mv $FILE $TRIMD
              echo "time_split not required on "$FILE" 1 month already."
            done
            ./hist_mon_to_year
            if [ $? -ne 0 ] ; then
              echo "Error from hist_mon_to_year on file "$FILE
              ./update_status error hist_mon_to_year
              exit 1
            fi
          fi ;;
      esac ;;
d326 1
a326 1
# Monthly data, hopefully no time splitting needed
d328 1
d330 3
a332 9
        NFNC=`echo $CASE.$HIST.${YEARNOW}-??.nc | wc -w`
        if [ ${NFNC} -eq 12 ] ; then
          ./hist_mon_to_year
          if [ $? -ne 0 ] ; then
            echo "Error from hist_mon_to_year on files "$CASE.$HIST.$YEARNOW
            ./update_status error hist_mon_to_year
            exit 1
          fi
        fi ;;
d334 1
d336 1
a336 1
# var_split each history file that is now one years' worth of data
d338 6
a343 12
    NFNC=`echo $CASE.$HIST.${YEARNOW}.nc | wc -w`
    if [ ${NFNC} -eq 1 ] ; then
      for FILE in `/bin/ls $CASE.$HIST.${YEARNOW}.nc` ; do
        ./var_split $FILE erase
        if [ $? -ne 0 ] ; then
          echo "Error from var_split on file "$FILE
          ./update_status error var_split
          exit 1
        else
          touch .comp.$FILE
        fi
      done
d345 3
a347 1
  fi
d349 9
d359 1
a359 1
# If pop.h (mon or day), run concatenator, compressor, and archiver
d361 8
a368 12
  if [ "$HIST" = "pop.h" ] || [ "$HIST" = "pop.h.nday1" ] ; then
    ICEN=$((YEARNOW%100))
    if [ $ICEN -eq 0 ] ; then
      echo -n "TS pop.h concat  start  : " ; date
      ./concatenate_lme_data
      echo -n "TS pop.h concat  end    : " ; date
      echo -n "TS pop.h compress start : " ; date
      ./compress_data
      echo -n "TS pop.h compress end   : " ; date
      echo -n "TS pop.h archive start  : " ; date
      ./store_to_archive_var
      echo -n "TS pop.h archive   end  : " ; date
d371 12
a382 3
  YEARNOW=`expr $YEARNOW - 1`
  if [ $YEARNOW -lt 1000 ] ; then
    YEARNOW=0${YEARNOW}
d384 4
a387 2
  if [ $YEARNOW -lt 100 ] ; then
    YEARNOW=0${YEARNOW}
d389 35
a423 2
  if [ $YEARNOW -lt 10 ] ; then
    YEARNOW=0${YEARNOW}
d425 1
a425 2
  export YEARNOW
done
d427 1
a427 1
# Concatenate years -> all for non-pop.h data
d429 11
a439 1
# Compress concatenated data
d441 9
a449 8
if [ "$HIST" != "pop.h" ] ; then
  echo -n "TS final concat start: " ; date
  ./concatenate_data
  echo -n "TS final concat   end: " ; date
else
  echo -n "TS pop.h concat  start  : " ; date
  ./concatenate_lme_data
  echo -n "TS pop.h concat  end    : " ; date
a450 4
echo -n "TS compress     start: " ; date
./compress_data
#
# Store completed data on archival system
d452 1
a452 9
echo -n "TS archive start: " ; date
./store_to_archive_var
if [ $? -ne 0 ] ; then
  echo "store_to_archive failed"
  ./update_status error "$CASE $HIST $TPER"
  exit 1
else
  echo -n "TS archive end: " ; date
fi
@
