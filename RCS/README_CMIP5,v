head	1.1;
access;
symbols;
locks;
comment	@# @;


1.1
date	2013.04.04.14.50.49;	author strandwg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@Guidelines on how to use the CCP Processing Suite of scripts and tools to cre-
ate CMIP5-compliant data

General notes:
===============================================================================
1. The purpose of this software is to convert CESM postprocessed single-field
   format output to CMIP5-compliant format. It currently works only on the CISL
   mirage cluster and a few CGD machines (silver, primarily).

Dependencies:
===============================================================================
If run somewhere besides CISL and/or CGD, it requires two additional pieces of
software, 'uuid' and 'CMOR'. They will need to be built and properly linked via
the 'Makefile' for the code to work.

Functionality:
===============================================================================
The general functionality is as follows:

1. Specify the CESM casename, component, and CMIP5 "table" name (plus an op-
   tional argument for the specific CMIP5 variable names to process);
2. Run the script to generate the CMIP5-compliant data as configured above;
3. Publish the CMIP5-compliant data to an ESG data node;
4. Manually write the CMIP5-compliant data to archive.

The key scripts and their purpose are as follows:

Process_CMIP5: The script the user calls, to create the CMIP5 processing
               script.

process_cmip5_template: Used by Process_CMIP5, with changes given by the argu-
               ments to Process_CMIP5, to create the processing script itself.

experiments.txt : An ASCII-formatted listing of the relevant metadata for each
                  experiment; details on the format are given in the file

status_check     : Script that notifies user of start/finish, problems, etc. It
                  is tied closely to our postprocessing database, so you may
                  not want to use it.

In the directory CMOR2, the following are the key files:

RunCMOR         : The main script that run the Fortran CMOR code to create the
                  CMIP5 compliant data
*_CMOR.f90      : Fortran source code to take single-field postprocessed CESM
                  data and call the CMOR package to create CMIP5-compliant
                  data.
Gridfiles/*nc   : Required grid description files, specific to component and
                  resolution.

Key shell script variables in process_cmip5_template:
===============================================================================

BASEDIR   : Must be set to ${HOME}/CCP_Processing_Suite; location of all scripts
            and files

BINDIR    : Set to $HOME/bin; location of Fortran binaries

SVNBIN    : Set to `which svn'; location of svn binary

PROCBASE  : Location of local disk cache in which the processing will be done.
            This variable is machine-dependent:
            silver  : /datalocal/proc/$USER/$CASE
            mirage* : /glade/data01/CMIP5/proc/$USER/$CASE

DISK_BASE : Location of the disk cache for the previously post-processed data,
            i.e., the single-field format datasets that are piped through CMOR
            to create CMIP5-compliant data. This is where the post-processed
            data are read to from the archival system.
            This variable is machine-dependent:
            silver  : /datalocal/proc/$CASE
            mirage* : /glade/data01/CMIP5/CCSM/csm/$CASE
            (Depending on the user's group memberships, this may require some
             manual intervention to correct permissions problems on mirage*.)

These can be modified; look at the process_cmip5_template script to see which
other shell variables are dependent on them.

Usage:
===============================================================================
1. Modify experiments.txt as needed to reflect the specifics for your case. The
   key fields are:
   a. CESM case name;
   b. Model_ID - must be consistent with the PCMDI and METAFOR databases;
   c. MIP equivalent name for the CESM case name;
   d. RIP (realization + initialization + physics) code;
   e. RUN_REFCASE - called 'parent_experiment_id' in CMIP5-speak;
   f. RUN_REFDATE - 'branch_time' in CMIP5-speak;
   g. years of experiment (i.e., the start and end years of the simulation);
   h. GRID (resolution)
   i. COMPSET (N/A if not applicable)
   j. REPOTAG (N/A if not applicable)
   k. MACH (hardware)
   l. DOUT_L_MSROOT (root of postprocessed files location on archive)

2. Run Process_CMIP5:

prompt> ./Process_CMIP5 some_CESM_casename cam2.h0 Amon

OR

prompt> ./Process_CMIP5 some_CESM_casename cice.h OImon

OR

prompt> ./Process_CMIP5 some_CESM_casename pop.h Omon "tos sos"

OR

prompt> ./Process_CMIP5 some_CESM_casename clm2.h0 LImon "snd snw"


The arguments are as follows:

$1: The CESM case name to be processed
$2: The component name (i.e., cam2.h0, pop.h, clm2.h1, etc.)
$3: The CMIP5 'table' name (i.e., Amon, Omon, day, 6hrLev, etc.)
$4: OPTIONAL - blank-delimited list of specific CMIP5 variables to process, 
    enclosed in *double* quotes (i.e., "tas ta", or "soga masso toga".

$1-$3 are required.

The output is a shell script called "case_name_component_table_process.sh" 
that you can either start with a "Y" response to the "Run script now?" prompt 
or else not run and manually edit as needed with any other response.

Depending on the volume of data, the speed of archival retrieval and storage,
system load, etc. the processing can take anywhere from a day or so to a couple
of weeks.

Support:
===============================================================================
Please feel free to email me any questions - Gary Strand, strandwg@@ucar.edu@
