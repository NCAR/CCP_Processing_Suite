head	1.1;
access;
symbols;
locks;
comment	@# @;


1.1
date	2013.04.01.15.26.48;	author strandwg;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/bin/sh
# Read file(s) from a archival system
#
if [ $# -ne 2 ] ; then
  echo "Usage: archive_var_read ARCHIVE_PROC VARS"
  echo "Requires ARCHIVE_PROC and VARS"
  ./procstat.sh error archive_var_read
  exit 1
else
  ARCHIVE_PROC=$1
  VARS=$2
fi
#
if ! [ $ARCHIVE_PROC ] ; then
  echo "archive_var_read: "$ARCHIVE_PROC" undefined. Exit."
  ./procstat.sh error archive_var_read
  exit 1
fi
if [ ! $HIST ] ; then
  echo "archive_var_read: HIST undefined. Exit."
fi
if [ ! $VARS ] ; then
  echo "archive_var_read: VARS undefined. Exit."
fi
#
# Get files - check if hsi exists first
#
TEST4HSI=`which hsi 2>&1`
if [ $? -eq 0 ] ; then
  PROCHOST=`hostname`;export PROCHOST
  case "$PROCHOST" in 
    modeling1* )  # Funny bash implementation of hsi 
      HSI="hsi -s nocache -q" ;;
    * )           # Everywhere else
      HSI="hsi -q" ;;
  esac
#
  $HSI "ls -d ${ARCHIVE_PROC}" > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    if [ "$HIST" = "cice.h" ] || [ "$HIST" = "cice.h1" ] ; then
      $HSI "cd ${ARCHIVE_PROC} ; cget -u ${CASE}.${HIST}.{${VARS}}_?h.*.nc"
      if [ $? -ne 0 ] ; then
        echo "Error on hsi get of "$ARCHIVE_PROC" files. Stopping."
        ./procstat.sh error archive_var_read
        exit 1
      fi
    else
      $HSI "cd ${ARCHIVE_PROC} ; cget -u ${CASE}.${HIST}.{${VARS}}.*.nc"
      if [ $? -ne 0 ] ; then
        echo "Error on hsi get of "$ARCHIVE_PROC" files. Stopping."
        ./procstat.sh error archive_var_read
        exit 1
      fi
    fi
  else
    echo "Assuming files are already on disk, as "${ARCHIVE_PROC}" not found."
  fi
else
  echo "Cannot find hsi command."
  ./procstat.sh error archive_var_read
  exit 1
fi
@
