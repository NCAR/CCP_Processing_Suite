#!/bin/sh
# Read file(s) from a archival system
#
if [ $# -ne 2 ] ; then
  echo "Usage: archive_read ARCHIVE_LIST YEARNOW"
  echo "Requires ARCHIVE_LIST and YEARNOW"
  echo "CASE HIST ARCHIVE_HIST must be defined"
  ./status_check error archive_read
  exit 1
else
  ARCHIVE_LIST=$1
  YEARNOW=$2
fi
#
if ! [ -f $ARCHIVE_LIST ] ; then
  echo "archive_read: No "$ARCHIVE_LIST" file found. Exit."
  ./status_check error archive_read
  exit 1
fi
if [ ! $CASE ] ; then
  echo "archive_read: CASE undefined. Exit."
fi
if [ ! $HIST ] ; then
  echo "archive_read: HIST undefined. Exit."
fi
if [ ! $ARCHIVE_HIST ] ; then
  echo "archive_read: ARCHIVE_HIST undefined. Exit."
fi
#
# If hsi command exists, use it.
#
TEST4HSI=`which hsi 2<&1`
if [ $? -eq 0 ] ; then
  PROCHOST=`hostname`;export PROCHOST
  case "$PROCHOST" in 
    modeling1* )  # Funny bash implementation of hsi 
      HSI="hsi -s nocache" ;;
    * )           # Everywhere else
      HSI="hsi -q" ;;
  esac
  echo "HSI command: "${HSI}
#
  $HSI "cget -u ${ARCHIVE_HIST}/${CASE}.${HIST}.${YEARNOW}*"
  if [ $? -ne 0 ] ; then
    echo "Error on hsi get of "$ARCHIVE_HIST"/"$ARCHIVE_FILES
    ./status_check error archive_read
    exit 1
  fi
else
  echo "Cannot find hsi command."
  ./status_check error archive_read
  exit 1
fi
