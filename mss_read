#!/bin/sh
# Read file(s) from a archival system
#
if [ $# -ne 2 ] ; then
  echo "Usage: mss_read ARCHIVE_LIST YEARNOW"
  echo "Requires ARCHIVE_LIST and YEARNOW"
  echo "CASE HIST ARCHIVE_HIST must be defined"
  ./procstat.sh error mss_read
  exit 1
else
  ARCHIVE_LIST=$1
  YEARNOW=$2
fi
#
if ! [ -f $ARCHIVE_LIST ] ; then
  echo "mss_read: No "$ARCHIVE_LIST" file found. Exit."
  ./procstat.sh error mss_read
  exit 1
fi
if [ ! $CASE ] ; then
  echo "mss_read: CASE undefined. Exit."
fi
if [ ! $HIST ] ; then
  echo "mss_read: HIST undefined. Exit."
fi
if [ ! $ARCHIVE_HIST ] ; then
  echo "mss_read: ARCHIVE_HIST undefined. Exit."
fi
#
# Parse case and hist to deduce time(s) to read
#
TSTR=${CASE}.${HIST}
FLEN=`echo $TSTR | wc -c`
NDOT=0
CSTR=1
while [ $CSTR -le $FLEN ] ; do
  CURC=`echo $TSTR | cut -c${CSTR}-${CSTR}`
  if [ "$CURC" = "." ] ; then
     NDOT=`expr '(' $NDOT ')' '+' '1'`
  fi
  CSTR=`expr '(' $CSTR ')' '+' '1'`
done
NDOT=`expr '(' $NDOT ')' '+' '2'`
DAT=`egrep "${HIST}\.${YEARNOW}" $ARCHIVE_LIST | cut -d"." -f${NDOT}-`
#
LST=`echo $DAT | sed -e "s/ /,/g"`
#
if [ "`echo $LST | cut -d"." -f2`" = "tar" ] ; then
  ARCHIVE_FILES=$CASE.$HIST.${LST}
else
  ARCHIVE_FILES=$CASE.$HIST."{"${LST}"}"
fi
#
# If NERSC/ORNL hsi command exists, use it.
#
TEST4HSI=`which hsi 2<&1`
if [ $? -eq 0 ] ; then
  if [ `echo $LST | cut -d"." -f2` = "tar" ] ; then
    htar -x -f $ARCHIVE_HIST/$ARCHIVE_FILES
    if [ $? -ne 0 ] ; then
      hsi -q "get -U $ARCHIVE_HIST/$ARCHIVE_FILES"
      if [ $? -eq 0 ] ; then
        tar xf $ARCHIVE_FILES
        if [ $? -ne 0 ] ; then
          echo "htar and tar extraction failed on "$ARCHIVE_FILES
	    ./procstat.sh error mss_read
          exit 1
        else
          rm -f  $ARCHIVE_FILES
        fi
      else
        echo "Error on hsi get of "$ARCHIVE_HIST"/"$ARCHIVE_FILES
	  ./procstat.sh error mss_read
        exit 1
      fi
    fi
  else
    hsi -q "get $ARCHIVE_HIST/$ARCHIVE_FILES" 2>&1
    if [ $? -ne 0 ] ; then
      echo "Error on hsi get of "$ARCHIVE_HIST"/"$ARCHIVE_FILES
	./procstat.sh error mss_read
      exit 1
    fi
  fi
else
  echo "Cannot find hsi command."
  ./procstat.sh error mss_read
  exit 1
fi
