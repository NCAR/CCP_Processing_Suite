CASE=xxxCASExxx ; export CASE
HIST=xxxHISTxxx ; export HIST
TPER=xxxTPERxxx ; export TPER
#
echo -n "TS START: " ; date
#
# Template for processing CCSM history netCDF files into single-field format 
#
# Extract information from "experiments.txt"
#
#  Columns   Field
#   1 -  54  CCSM case name
#  55 -  74  model_id (CCSM4, CESM-CAM5, CESM-BGC, CESM-CHEM, CESM-WACCM, CESM1-CAM5.1-FV2, etc)
#  75 -  76  Location (NC = NCAR; NE = NERSC; OR = ORNL)
#  80 -  94  Official MIP name, or very brief description (N/A if not applicable)
#  95 - 104  RIP code (cm5) or realization number (cm3) (N/A if not applicable)
# 105 - 109  MIP (cm3 or cm5) experiment (N/A if not applicable)
# 110 - 149  RUN_REFCASE (parent case)
# 150 - 164  RUN_REFDATE (branch date, yyyy-mm-dd)
# 165 - 174  years of experiment (YYYY if unknown)
# 165 - 174  run years of experiment (YYYY if unknown)
# 175 - 184  CMIP5-requested years
# 185 - 194  GRID (resolution)
# 195 - 214  COMPSET (N/A if not applicable)
# 215 - 234  REPOTAG (N/A if not applicable)
# 234 - 249  Calendar dates of simulation execution (yyyy/mm-yyyy/mm)
# 250 - 259  MACH (hardware)
# 260 - end  DOUT_L_MSROOT (history file location on archive)
#
EXPFILE=${HOME}/CCP_Processing_Suite/experiments.txt ; export EXPFILE
if [ -f $EXPFILE ] ; then
  LOCATION=`egrep "^$CASE " $EXPFILE | cut -c75-  | cut -d" " -f1`
   DESCRIP=`egrep "^$CASE " $EXPFILE | cut -c80-  | cut -d" " -f1`
   REALIZN=`egrep "^$CASE " $EXPFILE | cut -c95-  | cut -d" " -f1`
   MIPNAME=`egrep "^$CASE " $EXPFILE | cut -c105-  | cut -d" " -f1`
    PARENT=`egrep "^$CASE " $EXPFILE | cut -c110- | cut -d" " -f1`
    BRANCH=`egrep "^$CASE " $EXPFILE | cut -c150- | cut -d" " -f1`
   YEARBEG=`egrep "^$CASE " $EXPFILE | cut -c165-168`
   YEAREND=`egrep "^$CASE " $EXPFILE | cut -c170-173`
       RES=`egrep "^$CASE " $EXPFILE | cut -c185- | cut -d" " -f1`
   COMPSET=`egrep "^$CASE " $EXPFILE | cut -c195- | cut -d" " -f1`
   REPOTAG=`egrep "^$CASE " $EXPFILE | cut -c215- | cut -d" " -f1`
  HARDWARE=`egrep "^$CASE " $EXPFILE | cut -c250- | cut -d" " -f1`
  HISTBASE=`egrep "^$CASE " $EXPFILE | cut -c260- | cut -d" " -f1`
else
  echo "Cannot find $EXPFILE. EXIT"
  exit 1
fi
#
if ! [ $LOCATION ] ; then
  echo "Unable to set variables because "$CASE" not found in $EXPFILE"
  exit 1
fi
#
# Acquire PROCHOST
#
PROCHOST=`hostname`;export PROCHOST
#
# resolve machine/site dependencies
#
case "$PROCHOST" in 
  silver* )                                # silver @ CGD/NCAR
    BASEDIR=${HOME}/CCP_Processing_Suite
    NCKS=/usr/local/bin/ncks             ; export NCKS
    NCRA=/usr/local/bin/ncra             ; export NCRA
    NCRCAT=/usr/local/bin/ncrcat         ; export NCRCAT
    PROCBASE=/datalocal/proc/$USER/$CASE ; export PROCBASE
    LOCALDSK=/datalocal/proc/$CASE       ; export LOCALDSK
    ARCHIVE_BASE=/CCSM/csm               ; export ARCHIVE_BASE
    ;;

  login1* )                                # tukey @ ANL
    BASEDIR=${HOME}/CCP_Processing_Suite
    NCKS=/usr/bin/ncks                   ; export NCKS
    NCRA=/usr/bin/ncra                   ; export NCRA
    NCRCAT=/usr/bin/ncrcat               ; export NCRCAT
    PROCBASE=/gpfs/mira-fs0/projects/CESM_Atmos/proc/$USER/$CASE ; export PROCBASE
    LOCALDSK=/gpfs/mira-fs0/projects/CESM_Atmos/archive/$CASE    ; export LOCALDSK
#    ARCHIVE_BASE=/CCSM/csm               ; export ARCHIVE_BASE
    ARCHIVE_BASE=/home/$USER              ; export ARCHIVE_BASE
    ;;

  tramhill* | hurricane* )                 # tramhill/hurricane @ CGD/NCAR
    BASEDIR=${HOME}/CCP_Processing_Suite
    NCKS=/usr/local/bin/ncks              ; export NCKS
    NCRA=/usr/local/bin/ncra              ; export NCRA
    NCRCAT=/usr/local/bin/ncrcat          ; export NCRCAT
    PROCBASE=/project/yampa01/$USER/$CASE ; export PROCBASE
    ARCHIVE_BASE=/CCSM/csm                ; export ARCHIVE_BASE
    ;;

  modeling1* )                             # modeling1 in ACD
    BASEDIR=${HOME}/CCP_Processing_Suite
    NCKS=/usr/local/bin/ncks              ; export NCKS
    NCRA=/usr/local/bin/ncra              ; export NCRA
    NCRCAT=/usr/local/bin/ncrcat          ; export NCRCAT
    PROCBASE=/data6/$USER/$CASE           ; export PROCBASE
    ARCHIVE_BASE=/CCSM/csm                ; export ARCHIVE_BASE
    ;;

  yslogin* | geyser* )                      # Yellowstone (geyser) @ CISL/NCAR
    BASEDIR=${HOME}/CCP_Processing_Suite
    NCKS=/glade/apps/opt/nco/4.3.4/gnu/nco-4.3.4/bin/ncks      ; export NCKS
    NCRA=/glade/apps/opt/nco/4.3.4/gnu/nco-4.3.4/bin/ncra      ; export NCRA
    NCRCAT=/glade/apps/opt/nco/4.3.4/gnu/nco-4.3.4/bin/ncrcat  ; export NCRCAT
    PROCBASE=/glade/scratch/$USER/$CASE           ; export PROCBASE
    LOCALDSK=/glade/scratch/$USER/$CASE           ; export LOCALDSK
    ARCHIVE_BASE=/CCSM/csm                        ; export ARCHIVE_BASE
    if [ "$MIPNAME" = "le5" ] ; then              # Special CESM1-CAM5-BGC large ensemble runs
      PROCBASE=/glade/p/cesm0005/proc/$USER/$CASE ; export PROCBASE
      LOCALDSK=/glade/p/cesm0005/csm/$CASE       ; export LOCALDSK
      ARCHIVE_BASE=/CCSM/csm/CESM-CAM5-BGC-LE    ; export ARCHIVE_BASE
      LD_LIBRARY_PATH=/glade/apps/opt/hdf5/1.8.9/pgi/12.5/lib:${LD_LIBRARY_PATH} ; export LD_LIBRARY_PATH
      LD_LIBRARY_PATH=/glade/apps/opt/szlib/2.1/pgi/12.5/lib:${LD_LIBRARY_PATH}  ; export LD_LIBRARY_PATH
    fi
    if [ "$MIPNAME" = "lea" ] ; then              # Special Aixue 20C runs
      ARCHIVE_BASE=/home/ahu/csm                 ; export ARCHIVE_BASE
    fi
    if [ `echo $CASE | cut -d"." -f1-3` = "b.e10.B20ANTHROC5CN" ] ; then
      PROCBASE=/glade/p/cesm0005/proc/$USER/$CASE ; export PROCBASE
      LOCALDSK=/glade/p/cesm0005/csm/$CASE       ; export LOCALDSK
    fi
    ;;

  nid* | hopper* )                              # hopper @ NERSC
    BASEDIR=${HOME}/CCP_Processing_Suite
    NCKS=/usr/common/usg/nco/4.0.8/bin/ncks     ; export NCKS
    NCRA=/usr/common/usg/nco/4.0.8/bin/ncra     ; export NCRA
    NCRCAT=/usr/common/usg/nco/4.0.8/bin/ncrcat ; export NCRCAT
    PROCBASE=/global/scratch2/sd/$USER/$CASE ; export PROCBASE
    LOCALDSK=/global/scratch2/sd/$USER/$CASE ; export LOCALDSK
    ARCHIVE_BASE=/home/c/ccsm/csm           ; export ARCHIVE_BASE
    if ! [ $LD_LIBRARY_PATH ] ; then
      LD_LIBRARY_PATH=/usr/common/usg/nco/4.0.8/lib:/opt/pgi/11.9.0/linux86-64/11.9/libso:/opt/pgi/11.9.0/linux86-64/11.9/lib:/opt/cray/hdf5/1.8.5.0/hdf5-pgi/lib:/opt/cray/netcdf/4.1.1.0/netcdf-pgi/lib:/opt/moab/6.1.8/lib
    else
      LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/common/usg/nco/4.0.8/lib:/opt/pgi/11.9.0/linux86-64/11.9/libso:/opt/pgi/11.9.0/linux86-64/11.9/lib:/opt/cray/hdf5/1.8.5.0/hdf5-pgi/lib:/opt/cray/netcdf/4.1.1.0/netcdf-pgi/lib:/opt/moab/6.1.8/lib
    fi
    export LD_LIBRARY_PATH
    ;;

  c1* )                                # carver @ NERSC
    BASEDIR=${HOME}/CCP_Processing_Suite
    NCKS=/usr/common/usg/nco/4.0.5/bin/ncks     ; export NCKS
    NCRA=/usr/common/usg/nco/4.0.5/bin/ncra     ; export NCRA
    NCRCAT=/usr/common/usg/nco/4.0.5/bin/ncrcat ; export NCRCAT
    PROCBASE=/global/scratch2/sd/$USER/$CASE ; export PROCBASE
    LOCALDSK=/global/scratch2/sd/$USER/$CASE ; export LOCALDSK
    ARCHIVE_BASE=/home/c/ccsm/csm           ; export ARCHIVE_BASE
    if ! [ $LD_LIBRARY_PATH ] ; then
      LD_LIBRARY_PATH=/usr/common/usg/nco/4.0.5/lib:/usr/common/usg/netcdf/4.1.1/pgi/lib:/usr/syscom/opt/torque/default/lib:/usr/common/usg/openmpi/1.4.5/pgi/lib:/usr/common/usg/pgi/12.9/linux86-64/12.9/libso:/usr/syscom/nsg/lib
    else
      LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/common/usg/nco/4.0.5/lib:/usr/common/usg/netcdf/4.1.1/pgi/lib:/usr/syscom/opt/torque/default/lib:/usr/common/usg/openmpi/1.4.5/pgi/lib:/usr/common/usg/pgi/12.9/linux86-64/12.9/libso:/usr/syscom/nsg/lib
    fi
    export LD_LIBRARY_PATH
    ;;

  rhea* )                                # rhea @ ORNL
    BASEDIR=${HOME}/CCP_Processing_Suite
    NCKS=/ccs/home/wgstrand/bin/ncks                   ; export NCKS
    NCRA=/ccs/home/wgstrand/bin/ncks                   ; export NCRA
    NCRCAT=/ccs/home/wgstrand/bin/ncrcat               ; export NCRCAT
    PROCBASE=/lustre/atlas1/cli017/scratch/$USER/$CASE ; export PROCBASE
    LOCALDSK=/lustre/atlas1/cli017/scratch/$USER/$CASE ; export LOCALDSK
    ARCHIVE_BASE=/f2/ccsm/csm                          ; export ARCHIVE_BASE
    if ! [ $LD_LIBRARY_PATH ] ; then
      LD_LIBRARY_PATH=/sw/analysis-x64/ompi/1.4.2/centos5.5_gnu4.4.4/lib:/ccs/compilers/gcc/centos5.5-x86_64/4.4.4/lib64:/sw/analysis-x64/udunits/2.1.21/centos5.5_gnu4.4.4/lib:/sw/analysis-x64/netcdf/4.1.1/centos5.5_gnu4.4.4/lib:/sw/analysis-x64/szip/2.1/centos5.5_gnu4.4.4/lib:/sw/analysis-x64/python/2.7/centos5.5_gnu4.4.3/2.7_install_dir/lib/
    else
      LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/sw/analysis-x64/ompi/1.4.2/centos5.5_gnu4.4.4/lib:/ccs/compilers/gcc/centos5.5-x86_64/4.4.4/lib64:/sw/analysis-x64/udunits/2.1.21/centos5.5_gnu4.4.4/lib:/sw/analysis-x64/netcdf/4.1.1/centos5.5_gnu4.4.4/lib:/sw/analysis-x64/szip/2.1/centos5.5_gnu4.4.4/lib:/sw/analysis-x64/python/2.7/centos5.5_gnu4.4.3/2.7_install_dir/lib/
    fi
    ;;
  * ) 
    echo "Unable to continue because "$PROCHOST" not known."
    exit 1 ;;
esac
#
export LD_LIBRARY_PATH
#
# Strip off first part of $HIST
#
HTYP=`echo $HIST | cut -d'.' -f1` ; export HTYP
#
# Convert history type to component name
#
case "$HTYP" in
  cam2 | cam )
    COMP_NAME=atm ;;
  clm2 ) 
    COMP_NAME=lnd ;;
  pop  ) 
    COMP_NAME=ocn ;;
  rtm  ) 
    COMP_NAME=rof ;;
  csim | cice ) 
    COMP_NAME=ice ;;
  * ) 
    echo "Unable to continue because "$HIST" not known."
    exit 1 ;;
esac
#
# Set up local names and archival names
#
LOCAL_HIST=$LOCALDSK/$COMP_NAME/hist
LOCAL_PROC=$PROCBASE/$COMP_NAME
ARCHIVE_HIST=$HISTBASE/$CASE/$COMP_NAME/hist
#
if [ "$MIPNAME" = "le5" ] ; then # CESM1-CAM5-BGC large ensemble and CESM1-CAM5 last millenium ensemble
   ARCHIVE_PROC=$ARCHIVE_BASE/$COMP_NAME/proc/tseries
else
   ARCHIVE_PROC=$ARCHIVE_BASE/$CASE/$COMP_NAME/proc/tseries
fi
#
case "$TPER" in
  ann )
    ARCHIVE_PROC=${ARCHIVE_PROC}/annual   ;;
  mon )
    ARCHIVE_PROC=${ARCHIVE_PROC}/monthly  ;;
  day )
    ARCHIVE_PROC=${ARCHIVE_PROC}/daily    ;;
  hr6 )
    ARCHIVE_PROC=${ARCHIVE_PROC}/hourly6  ;;
  hr3 )
    ARCHIVE_PROC=${ARCHIVE_PROC}/hourly3  ;;
  hr1 )
    ARCHIVE_PROC=${ARCHIVE_PROC}/hourly1  ;;
  m30 )
    ARCHIVE_PROC=${ARCHIVE_PROC}/minute30 ;;
  * ) 
    echo "Unable to continue because "$TPER" not known."
    exit 1 ;;
esac
#
LOCAL_PROC=${LOCAL_PROC}/${TPER}
CACHEDIR=${LOCAL_PROC}/to_archive
#
YRCOUNT=`expr '(' $YEAREND '-' $YEARBEG ')' '+' '1'`
MNCOUNT=`expr '(' '(' $YEAREND '-' $YEARBEG ')' '+' '1' ')' '*' '12'`
#
# Print out values
#
echo "           Case name : "$CASE ; export CASE
echo "   History file type : "$HIST ; export HIST
echo "         Time period : "$TPER ; export TPER
echo "   by var processing : YES"
echo "     Processed files : "$ARCHIVE_PROC  ; export ARCHIVE_PROC
if [ "$LOCATION" = "NC" ] ; then
  HARDWARE=${HARDWARE}".ucar.edu"
fi
if [ "$LOCATION" = "NE" ] ; then
  HARDWARE=${HARDWARE}".nersc.gov"
fi
if [ "$LOCATION" = "OR" ] ; then
  HARDWARE=${HARDWARE}".ccs.ornl.gov"
fi
echo "            Location : "$LOCATION ; export LOCATION
echo "         Description : "$DESCRIP  ; export DESCRIP
echo "     Realization/RIP : "$REALIZN  ; export REALIZN
echo "         Parent case : "$PARENT   ; export PARENT
echo "         Branch date : "$BRANCH   ; export BRANCH
echo "          Resolution : "$RES      ; export RES
echo "            Hardware : "$HARDWARE ; export HARDWARE
echo "             Compset : "$COMPSET  ; export COMPSET
echo "      Repository tag : "$REPOTAG  ; export REPOTAG
echo "          Begin year : "$YEARBEG  ; export YEARBEG
echo "            End year : "$YEAREND  ; export YEAREND
echo "          Year count : "$YRCOUNT  ; export YRCOUNT
echo "        Months count : "$MNCOUNT  ; export MNCOUNT
echo ""
echo "   Archival base dir : "$ARCHIVE_BASE  ; export ARCHIVE_BASE
echo "       History files : "$ARCHIVE_HIST  ; export ARCHIVE_HIST
echo "       History names : "$HIST          ; export HIST
echo ""
echo "     Processing host : "$PROCHOST      ; export PROCHOST
echo " Local history files : "$LOCAL_HIST    ; export LOCAL_HIST
echo "      Processing dir : "$LOCAL_PROC    ; export LOCAL_PROC
echo "   Archive cache dir : "$CACHEDIR      ; export CACHEDIR
echo " Processing code dir : "$BASEDIR       ; export BASEDIR
#  
if [ ! -d $LOCAL_PROC ] ; then 
  mkdir -p $LOCAL_PROC 
fi
if [ ! -d $CACHEDIR ] ; then 
  mkdir -p $CACHEDIR 
fi
cd $LOCAL_PROC
#
case "$TPER" in
  day | hr6 | hr3 | hr1 | m30 )
    ln -s -f $BASEDIR/time_split     .
    ln -s -f $BASEDIR/days_to_year  .
    ;;
esac
#
ln -s -f $BASEDIR/archive_list      .
ln -s -f $BASEDIR/archive_read      .
ln -s -f $BASEDIR/archive_write     .
ln -s -f $BASEDIR/var_split         .
ln -s -f $BASEDIR/hist_mon_to_year  .
ln -s -f $BASEDIR/var_year_to_all   .
ln -s -f $BASEDIR/concatenate_data  .
ln -s -f $BASEDIR/compress_data     .
ln -s -f $BASEDIR/store_to_archive  .
ln -s -f $BASEDIR/update_status     .
#
cd $LOCAL_PROC
#
# Start actual processing, one year at a time
#
# Start from end and go to beginning
#
YEARNOW=$YEAREND;export YEARNOW
#
./update_status start
#
# Big processing loop
#
while [ $YEARNOW -ge $YEARBEG ] ; do
  ./update_status $YEARNOW
  if [ ! -f .comp.$CASE.$HIST.$YEARNOW.nc ] ; then
    echo -n "TS PRO "${CASE}"."${HIST}"."${YEARNOW}": " ; date
    if [ -d $LOCAL_HIST ] ; then
      NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.${YEARNOW}* | wc -l`
      if [ $NHISTF -ne 0 ] ; then
        echo ${CASE}"."${HIST}"."${YEARNOW}" files on disk, softlinking."
        ln -s -f ${LOCAL_HIST}/${CASE}.${HIST}.${YEARNOW}* .
      fi
    else
#
# Get archive listing
#
      ARCHIVE_LIST=archive.$CASE.$HIST
      if [ ! -f $ARCHIVE_LIST ] ; then
        echo "Getting archival list of "$CASE" "$HIST
        ./archive_list $ARCHIVE_LIST
      fi
      ./archive_read $ARCHIVE_LIST $YEARNOW
      if [ $? -ne 0 ] ; then
        echo "Error from archive_read"
       ./update_status error "$CASE $HIST $TPER"
       exit 1
      fi
    fi
    if [ -f $CASE.$HIST.$YEARNOW*.tar ] ; then
      NTARFL=`/bin/ls $CASE.$HIST.$YEARNOW*.tar | wc -l`
      if [ $NTARFL -ne 0 ] ; then
        for TARFILE in `/bin/ls $CASE.$HIST.$YEARNOW*.tar` ; do
          tar xf $TARFILE
          if [ $? -ne 0 ] ; then
            echo "Error untarring "$TARFILE
          else
            rm -f $TARFILE
          fi
        done
      fi
    fi
#
# Convert all YEARNOW file(s) to netCDF-4
#
    if [ `echo $PROCHOST | cut -c1-2` != "c1" ] ; then
      for FILE in `/bin/ls $CASE.$HIST.${YEARNOW}*.nc` ; do
        TYPE=`$NCKS -M $FILE | egrep "type" | cut -d"=" -f6` ; export TYPE
        if [ "$TYPE" != "NC_FORMAT_NETCDF4" ] ; then
          $NCKS -4 $FILE ${FILE}4
          if [ $? -ne 0 ] ; then
            echo "Cannot convert "${FILE}" to netCDF-4. Exiting."
            exit 1
          else
            mv ${FILE}4 $FILE
          fi
        fi
      done
    fi
#
# Check on data type to see if it needs time splitting and reconcatenating first
#
    case "$TPER" in
# 
# Daily data - requires lots of checks, usually
#
      day )
      case "$HTYP" in
        cam2 | cam )
          NFNC=`echo $CASE.$HIST.${YEARNOW}-??-??-?????.nc | wc -w`
          if [ ${NFNC} -ne 0 ] ; then
            for FILE in `/bin/ls $CASE.$HIST.${YEARNOW}-??-??-?????.nc` ; do
#
# Check for exactly 365 samples from the same year
#
              NTIMES=`$NCKS -s "%8.8i\n" -F -H -C -v date $FILE | egrep "^[0-9]" | wc -l`
              NYEARS=`$NCKS -s "%8.8i\n" -F -H -C -v date $FILE | egrep "^[0-9]" | cut -c1-4 | uniq | wc -l`
              if [ $NTIMES -eq 365 ] && [ $NYEARS -eq 1 ] ; then
                echo "time_split not required on "$FILE" 1 year length already from same year. Renaming."
                TRIMD=`echo $FILE | sed -e 's/\-01\-01\-00000//g'`
                mv $FILE $TRIMD
              else
                echo "time_split-ting on "$FILE
                ./time_split $FILE erase
                ./days_to_year erase
              fi
            done
          fi ;;
        clm2 )
          NFNC=`echo $CASE.$HIST.${YEARNOW}-??-??-?????.nc | wc -w`
          if [ ${NFNC} -ne 0 ] ; then
            for FILE in `/bin/ls $CASE.$HIST.${YEARNOW}-??-??-00000.nc` ; do
#
# Check for exactly 365 samples from the same year
#
              NTIMES=`$NCKS -s "%8.8i\n" -F -H -C -v mcdate $FILE | egrep "^[0-9]" | wc -l`
              NYEARS=`$NCKS -s "%8.8i\n" -F -H -C -v mcdate $FILE | egrep "^[0-9]" | cut -c1-4 | uniq | wc -l`
              if [ $NTIMES -eq 365 ] && [ $NYEARS -eq 1 ] ; then
                echo "time_split not required on "$FILE" 1 year length already from same year. Renaming."
                TRIMD=`echo $FILE | sed -e 's/\-01\-01\-00000//g'`
                mv $FILE $TRIMD
              else
                echo "time_split-ting on "$FILE
                ./time_split $FILE erase
                ./days_to_year erase
              fi
            done
          fi ;;
        cice )
          NFNC=`echo $CASE.$HIST.${YEARNOW}-??.nc | wc -w`
          if [ ${NFNC} -eq 12 ] ; then
            ./hist_mon_to_year
            if [ $? -ne 0 ] ; then
              echo "Error from hist_mon_to_year on file "$FILE
              ./update_status error hist_mon_to_year
              exit 1
            fi
          fi ;;
        pop )
          NFNC=`echo $CASE.$HIST.${YEARNOW}-??-??.nc | wc -w`
          if [ ${NFNC} -ne 0 ] ; then
            for FILE in `/bin/ls $CASE.$HIST.${YEARNOW}-??-??.nc` ; do
              TRIMD=`echo $FILE | sed -e 's/-01.nc$/.nc/g'`
              mv $FILE $TRIMD
              echo "time_split not required on "$FILE" 1 month already."
            done
            ./hist_mon_to_year
            if [ $? -ne 0 ] ; then
              echo "Error from hist_mon_to_year on file "$FILE
              ./update_status error hist_mon_to_year
              exit 1
            fi
          fi ;;
        rtm )
          NFNC=`echo $CASE.$HIST.${YEARNOW}-01-02-00000.nc | wc -w`
          if [ ${NFNC} -ne 0 ] ; then
            for FILE in `/bin/ls $CASE.$HIST.${YEARNOW}-??-01.nc` ; do
              TRIMD=`echo $FILE | sed -e 's/\-01\.nc$/\.nc/g'`
              mv $FILE $TRIMD
              echo "time_split not required on "$FILE" 1 month already."
            done
            ./hist_mon_to_year
            if [ $? -ne 0 ] ; then
              echo "Error from hist_mon_to_year on files "$CASE.$HIST.$YEARNOW
              ./update_status error hist_mon_to_year
              exit 1
            fi
          fi
        esac ;;
#
# Monthly data, hopefully no time splitting needed
#
      mon )
        NFNC=`echo $CASE.$HIST.${YEARNOW}-??.nc | wc -w`
        if [ ${NFNC} -eq 12 ] ; then
          ./hist_mon_to_year
          if [ $? -ne 0 ] ; then
            echo "Error from hist_mon_to_year on files "$CASE.$HIST.$YEARNOW
            ./update_status error hist_mon_to_year
            exit 1
          fi
        fi ;;
# 
# 6-hourly data - may require lots of checks, usually
#
      hr6 )
      case "$HTYP" in
        cice )
          NFNC=`echo $CASE.$HIST.${YEARNOW}-??.nc | wc -w`
          if [ ${NFNC} -eq 12 ] ; then
            ./hist_mon_to_year
            if [ $? -ne 0 ] ; then
              echo "Error from hist_mon_to_year on files "$CASE.$HIST.$YEARNOW
              ./update_status error hist_mon_to_year
              exit 1
            fi
          fi ;;
      esac ;;
    esac
#
# var_split each history file that is now one years' worth of data
#
    NFNC=`echo $CASE.$HIST.${YEARNOW}.nc | wc -w`
    if [ ${NFNC} -eq 1 ] ; then
      for FILE in `/bin/ls $CASE.$HIST.${YEARNOW}.nc` ; do
        ./var_split $FILE erase
        if [ $? -ne 0 ] ; then
          echo "Error from var_split on file "$FILE
          ./update_status error var_split
          exit 1
        else
          touch .comp.$FILE
        fi
      done
    fi
  fi
#
  YEARNOW=`expr $YEARNOW - 1`
  if [ $YEARNOW -lt 1000 ] ; then
    YEARNOW=0${YEARNOW}
  fi
  if [ $YEARNOW -lt 100 ] ; then
    YEARNOW=0${YEARNOW}
  fi
  if [ $YEARNOW -lt 10 ] ; then
    YEARNOW=0${YEARNOW}
  fi
  export YEARNOW
done
#
# Concatenate years -> all
#
echo -n "TS final concat start: " ; date
./concatenate_data
echo -n "TS final concat   end: " ; date
#
# Compress data
#
echo -n "TS compression start: " ; date
./compress_data
echo -n "TS compression   end: " ; date
#
# Store completed data on archival system
#
echo -n "TS archive start: " ; date
./store_to_archive
if [ $? -ne 0 ] ; then
  echo "store_to_archive failed"
  ./update_status error "$CASE $HIST $TPER"
  exit 1
fi
echo -n "TS archive end: " ; date
./update_status complete
echo -n "TS COMPLETE: " ; date
