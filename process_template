#
export MP_TIMEOUT=14400
export MP_PULSE=1800
export MP_DEBUG_NOTIMEOUT=yes
#
# Necessary modules to load
#
eval `/glade/apps/opt/lmod/lmod/libexec/lmod bash load python`
eval `/glade/apps/opt/lmod/lmod/libexec/lmod bash load all-python-libs`
PATH=/glade/u/home/strandwg/.local/bin:${PATH} ; export PATH
#
PYTHONPATH=/glade/u/home/strandwg/.local/lib/python2.7/site-packages:${PYTHONPATH}
#
CASE=xxxCASExxx ; export CASE
HIST=xxxHISTxxx ; export HIST
TPER=xxxTPERxxx ; export TPER
LENG=xxxLENGxxx ; export LENG
#
echo -n "TS START: " ; date
#
# Template for processing CCSM history netCDF files into single-field format 
#
# Extract information from "experiments.txt"
#
#  Columns   Field
#   1 -  54  CCSM case name
#  55 -  74  model_id (CCSM4, CESM-CAM5, CESM-BGC, CESM-CHEM, CESM-WACCM, CESM1-CAM5.1-FV2, etc)
#  75 -  76  Location (NC = NCAR; NE = NERSC; OR = ORNL)
#  80 -  94  Official MIP name, or very brief description (N/A if not applicable)
#  95 - 104  RIP code (cm5) or realization number (cm3) (N/A if not applicable)
# 105 - 109  MIP (cm3 or cm5) experiment (N/A if not applicable)
# 110 - 149  RUN_REFCASE (parent case)
# 150 - 164  RUN_REFDATE (branch date, yyyy-mm-dd)
# 165 - 174  years of experiment (YYYY if unknown)
# 165 - 174  run years of experiment (YYYY if unknown)
# 175 - 184  CMIP5-requested years
# 185 - 194  GRID (resolution)
# 195 - 214  COMPSET (N/A if not applicable)
# 215 - 234  REPOTAG (N/A if not applicable)
# 234 - 249  Calendar dates of simulation execution (yyyy/mm-yyyy/mm)
# 250 - 259  MACH (hardware)
# 260 - end  DOUT_L_MSROOT (history file location on archive)
#
EXPFILE=${HOME}/CCP_Processing_Suite/experiments.txt ; export EXPFILE
if [ -f $EXPFILE ] ; then
  LOCATION=`egrep "^$CASE " $EXPFILE | cut -c75-  | cut -d" " -f1`
   DESCRIP=`egrep "^$CASE " $EXPFILE | cut -c80-  | cut -d" " -f1`
   REALIZN=`egrep "^$CASE " $EXPFILE | cut -c95-  | cut -d" " -f1`
   MIPNAME=`egrep "^$CASE " $EXPFILE | cut -c105-  | cut -d" " -f1`
    PARENT=`egrep "^$CASE " $EXPFILE | cut -c110- | cut -d" " -f1`
    BRANCH=`egrep "^$CASE " $EXPFILE | cut -c150- | cut -d" " -f1`
   YEARBEG=`egrep "^$CASE " $EXPFILE | cut -c165-168`
   YEAREND=`egrep "^$CASE " $EXPFILE | cut -c170-173`
       RES=`egrep "^$CASE " $EXPFILE | cut -c185- | cut -d" " -f1`
   COMPSET=`egrep "^$CASE " $EXPFILE | cut -c195- | cut -d" " -f1`
   REPOTAG=`egrep "^$CASE " $EXPFILE | cut -c215- | cut -d" " -f1`
  HARDWARE=`egrep "^$CASE " $EXPFILE | cut -c250- | cut -d" " -f1`
  HISTBASE=`egrep "^$CASE " $EXPFILE | cut -c260- | cut -d" " -f1`
else
  echo "Cannot find $EXPFILE. EXIT"
  exit 1
fi
#
if ! [ $LOCATION ] ; then
  echo "Unable to set variables because "$CASE" not found in $EXPFILE"
  exit 1
fi
#
# Resolve machine dependencies
#
if [ -f ${HOME}/CCP_Processing_Suite/machine_depends ] ; then
  source ${HOME}/CCP_Processing_Suite/machine_depends
else
  echo ${HOME}"/CCP_Processing_Suite/machine_depends missing. Fix. Dying."
  exit 1
fi
#
# Strip off first part of $HIST
#
HTYP=`echo $HIST | cut -d'.' -f1` ; export HTYP
#
# Convert history type to component name
#
case "$HTYP" in
  cam2 | cam )
    COMP_NAME=atm ;;
  clm2 ) 
    COMP_NAME=lnd ;;
  pop  ) 
    COMP_NAME=ocn ;;
  rtm  ) 
    COMP_NAME=rof ;;
  csim | cice ) 
    COMP_NAME=ice ;;
  * ) 
    echo "Unable to continue because "$HIST" not known."
    exit 1 ;;
esac
#
# Set up local names and archival names
#
LOCAL_HIST=$LOCALDSK/$COMP_NAME/hist
LOCAL_PROC=$PROCBASE/$COMP_NAME
ARCHIVE_HIST=$HISTBASE/$CASE/$COMP_NAME/hist
ARCHIVE_PROC=$ARCHIVE_BASE/$CASE/$COMP_NAME/proc/tseries
#
case "$TPER" in
  ann )
    ARCHIVE_PROC=${ARCHIVE_PROC}/annual   ;;
  mon )
    ARCHIVE_PROC=${ARCHIVE_PROC}/monthly  ;;
  day )
    ARCHIVE_PROC=${ARCHIVE_PROC}/daily    ;;
  hr6 )
    ARCHIVE_PROC=${ARCHIVE_PROC}/hourly6  ;;
  hr3 )
    ARCHIVE_PROC=${ARCHIVE_PROC}/hourly3  ;;
  hr1 )
    ARCHIVE_PROC=${ARCHIVE_PROC}/hourly1  ;;
  m30 )
    ARCHIVE_PROC=${ARCHIVE_PROC}/minute30 ;;
  * ) 
    echo "Unable to continue because "$TPER" not known."
    exit 1 ;;
esac
#
LOCAL_PROC=${LOCAL_PROC}/${TPER}
CACHEDIR=${LOCAL_PROC}/to_archive
#
YRCOUNT=`expr '(' $YEAREND '-' $YEARBEG ')' '+' '1'`
MNCOUNT=`expr '(' '(' $YEAREND '-' $YEARBEG ')' '+' '1' ')' '*' '12'`
#
# Print out values
#
echo "           Case name : "$CASE ; export CASE
echo "   History file type : "$HIST ; export HIST
echo "         Time period : "$TPER ; export TPER
echo "   by var processing : YES"
echo "     Processed files : "$ARCHIVE_PROC  ; export ARCHIVE_PROC
if [ "$LOCATION" = "NC" ] ; then
  HARDWARE=${HARDWARE}".ucar.edu"
fi
if [ "$LOCATION" = "NE" ] ; then
  HARDWARE=${HARDWARE}".nersc.gov"
fi
if [ "$LOCATION" = "OR" ] ; then
  HARDWARE=${HARDWARE}".ccs.ornl.gov"
fi
echo "            Location : "$LOCATION ; export LOCATION
echo "         Description : "$DESCRIP  ; export DESCRIP
echo "     Realization/RIP : "$REALIZN  ; export REALIZN
echo "         Parent case : "$PARENT   ; export PARENT
echo "         Branch date : "$BRANCH   ; export BRANCH
echo "          Resolution : "$RES      ; export RES
echo "            Hardware : "$HARDWARE ; export HARDWARE
echo "             Compset : "$COMPSET  ; export COMPSET
echo "      Repository tag : "$REPOTAG  ; export REPOTAG
echo "          Begin year : "$YEARBEG  ; export YEARBEG
echo "            End year : "$YEAREND  ; export YEAREND
echo "          Year count : "$YRCOUNT  ; export YRCOUNT
echo "        Months count : "$MNCOUNT  ; export MNCOUNT
echo ""
echo "   Archival base dir : "$ARCHIVE_BASE  ; export ARCHIVE_BASE
echo "       History files : "$ARCHIVE_HIST  ; export ARCHIVE_HIST
echo "       History names : "$HIST          ; export HIST
echo ""
echo "     Processing host : "$PROCHOST      ; export PROCHOST
echo " Local history files : "$LOCAL_HIST    ; export LOCAL_HIST
echo "      Processing dir : "$LOCAL_PROC    ; export LOCAL_PROC
echo "   Archive cache dir : "$CACHEDIR      ; export CACHEDIR
echo " Processing code dir : "$BASEDIR       ; export BASEDIR
#  
if [ ! -d $LOCAL_PROC ] ; then 
  mkdir -p $LOCAL_PROC 
fi
if [ ! -d $CACHEDIR ] ; then 
  mkdir -p $CACHEDIR 
fi
cd $LOCAL_PROC
#
# Decide to compress or not compress output
#
case "$HTYP" in
  cam2 | cam )
    case "$TPER" in
      ann | mon )
        NCFORMAT=netcdf4c ;;
      day | hr6 | hr3 | hr1 | m30 )
        NCFORMAT=netcdf4 ;;
    esac ;;
  clm2 | pop | rtm | csim | cice ) 
    NCFORMAT=netcdf4c ;;
esac
#
ln -s -f $BASEDIR/run_slice2series  Transpose_Data
ln -s -f $BASEDIR/archive_write     .
ln -s -f $BASEDIR/store_to_archive  .
ln -s -f $BASEDIR/update_status     .
#
cd $LOCAL_PROC
#
# Start actual processing
#
if [ "$LENG" = "byy" ] ; then
#
# Start from end and go to beginning
#
  YEARNOW=$YEAREND ; export YEARNOW
  ./update_status start
#
# Big processing loop
#
  while [ $YEARNOW -ge $YEARBEG ] ; do
    ./update_status $YEARNOW
    if [ ! -f .comp.${CASE}.${HIST}.${YEARNOW}.nc ] ; then
      echo -n "TS PRO "${CASE}"."${HIST}"."${YEARNOW}": " ; date
      if [ -d $LOCAL_HIST ] ; then
        NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.${YEARNOW}* | wc -l`
        if [ $NHISTF -ne 0 ] ; then
          echo ${CASE}"."${HIST}"."${YEARNOW}" files on disk, softlinking."
          rm -f ${CASE}.${HIST}.[0-9]*
          ln -s -f ${LOCAL_HIST}/${CASE}.${HIST}.${YEARNOW}* .
        fi
      else
        echo ${CASE}"."${HIST}"."${YEARNOW}" files missing from disk, acquire."
        exit 1
      fi
#
      case "$TPER" in
        ann )
          OUTTIME=${YEARNOW}-${YEARNOW} ;;
        mon )
          OUTTIME=${YEARNOW}01-${YEARNOW}12 ;;
        day )
          OUTTIME=${YEARNOW}0101-${YEARNOW}1231 ;;
        hr3 )
          OUTTIME=${YEARNOW}010100Z-${YEARNOW}123121Z ;;
        hr6 )
          OUTTIME=${YEARNOW}010100Z-${YEARNOW}123118Z ;;
        hr1 )
          OUTTIME=${YEARNOW}010100Z-${YEARNOW}123123Z ;;
        m30 )
          OUTTIME=${YEARNOW}01010000Z-${YEARNOW}12312330Z ;;
        * ) 
          echo "Unable to set OUTTIME because "$TPER" not known."
          exit 1 ;;
      esac
      export OUTTIME
#
# Transpose_Data this year
#
      NFNC=`echo $CASE.$HIST.${YEARNOW}*.nc | wc -w`
      if [ ${NFNC} -ne 0 ] ; then
        ./Transpose_Data
        if [ $? -ne 0 ] ; then
          echo "Error from Transpose_Data at year "${YEARNOW}
          ./update_status error Transpose_Data
          exit 1
        else
          touch .comp.${CASE}.${HIST}.${YEARNOW}.nc
        fi
      else
        echo "Error from softlink of "${CASE}"."${HIST}"."${YEARNOW}" files. Count: "${NFNC}
        ./update_status error link
        exit 1
      fi
    fi
#
# Store completed data on archival system
#
    echo -n "TS archive start: " ; date
    ./store_to_archive
    if [ $? -ne 0 ] ; then
      echo "store_to_archive failed"
      ./update_status error "$CASE $HIST $TPER"
      exit 1
    fi
    echo -n "TS archive end: " ; date
    YEARNOW=`expr $YEARNOW - 1`
    if [ $YEARNOW -lt 1000 ] ; then
      YEARNOW=0${YEARNOW}
    fi
    if [ $YEARNOW -lt 100 ] ; then
      YEARNOW=0${YEARNOW}
    fi
    if [ $YEARNOW -lt 10 ] ; then
      YEARNOW=0${YEARNOW}
    fi
    export YEARNOW
  done
#
# Do all times
#
else
#
#
  case "$TPER" in
    ann )
      OUTTIME=${YEARBEG}-${YEAREND} ;;
    mon )
      OUTTIME=${YEARBEG}01-${YEAREND}12 ;;
    day )
      OUTTIME=${YEARBEG}0101-${YEAREND}1231 ;;
    hr3 )
      OUTTIME=${YEARBEG}010100Z-${YEAREND}123121Z ;;
    hr6 )
      OUTTIME=${YEARBEG}010100Z-${YEAREND}123118Z ;;
    hr1 )
      OUTTIME=${YEARBEG}010100Z-${YEAREND}123123Z ;;
    m30 )
      OUTTIME=${YEARBEG}01010000Z-${YEAREND}12312330Z ;;
    * ) 
      echo "Unable to set OUTTIME because "$TPER" not known."
      exit 1 ;;
  esac
  export OUTTIME
#
  ./update_status $YEARBEG
  echo -n "TS PRO "${CASE}"."${HIST}": " ; date
  if [ -d $LOCAL_HIST ] ; then
    NHISTF=`/bin/ls ${LOCAL_HIST}/${CASE}.${HIST}.[0-9]* | wc -l`
    if [ $NHISTF -ne 0 ] ; then
      echo ${CASE}"."${HIST}". files on disk, softlinking."
      rm -f ${CASE}.${HIST}.[0-9]*
      ln -s -f ${LOCAL_HIST}/${CASE}.${HIST}.[0-9]* .
    fi
  else
    echo ${CASE}"."${HIST}" files missing from disk, acquire."
    exit 1
  fi
#
# Transpose_Data all years
#
  ./Transpose_Data
  if [ $? -ne 0 ] ; then
    echo "Error from Transpose_Data"
    ./update_status error Transpose_Data
    exit 1
  fi
#
# Store completed data on archival system
#
  echo -n "TS archive start: " ; date
  ./store_to_archive
  if [ $? -ne 0 ] ; then
    echo "store_to_archive failed"
    ./update_status error "$CASE $HIST $TPER"
    exit 1
  fi
  echo -n "TS archive end: " ; date
fi
#
./update_status complete
echo -n "TS COMPLETE: " ; date
#
exit
