   CASE=xxxCASExxx ; export CASE
   HIST=xxxHISTxxx ; export HIST
   TPER=xxxTPERxxx ; export TPER
DO_PROC=xxxPROCxxx ; export DO_PROC
DO_CMIP=xxxCMIPxxx ; export DO_CMIP
#
# Template for processing CCSM history netCDF files into single-field format 
# and/or CMIP format
#
# Extract information from "experiments.txt"
#
#  Columns   Field
#   1 -  39  CCSM case name
#  40 -  41  Location (NC = NCAR; NE = NERSC; OR = ORNL)
#  45 -  64  Very brief description and/or PCMDI name (n/a if not applicable)
#  65 -  69  Realization number (2 digits) (0 if not applicable)
#  70 -  72  Is a CMIP3 (cm3) or CMIP5 (cm5) experiment?
#  75 - 100  Parent CCSM case name
# 105 - 114  Branch date (yyyy-mm-dd, "none" if out-of-the-box)
# 120 - 123  Year began
# 125 - 128  Year ended
# 130 - 138  Resolution
# 140 - 149  Hardware
# 150 - end  History file location on archive
#
EXPFILE=${HOME}/CCP_Processing_Suite/experiments.txt ; export EXPFILE
if [ -f $EXPFILE ] ; then
  LOCATION=`egrep "^$CASE " $EXPFILE | cut -c40-  | cut -d" " -f1`
   DESCRIP=`egrep "^$CASE " $EXPFILE | cut -c45-  | cut -d" " -f1`
   REALIZN=`egrep "^$CASE " $EXPFILE | cut -c65-  | cut -d" " -f1`
      CMIP=`egrep "^$CASE " $EXPFILE | cut -c70-  | cut -d" " -f1`
    PARENT=`egrep "^$CASE " $EXPFILE | cut -c75-  | cut -d" " -f1`
    BRANCH=`egrep "^$CASE " $EXPFILE | cut -c105- | cut -d" " -f1`
   YEARBEG=`egrep "^$CASE " $EXPFILE | cut -c120- | cut -d" " -f1`
   YEAREND=`egrep "^$CASE " $EXPFILE | cut -c125- | cut -d" " -f1`
       RES=`egrep "^$CASE " $EXPFILE | cut -c130- | cut -d" " -f1`
  HARDWARE=`egrep "^$CASE " $EXPFILE | cut -c140- | cut -d" " -f1`
  HISTBASE=`egrep "^$CASE " $EXPFILE | cut -c150- | cut -d" " -f1`
else
  echo "Cannot find $EXPFILE. EXIT"
  exit 1
fi
#
if ! [ $LOCATION ] ; then
  echo "Unable to set variables because "$CASE" not found in $EXPFILE"
  exit 1
fi
#
YRCOUNT=`expr '(' $YEAREND '-' $YEARBEG ')' '+' '1'`
MNCOUNT=`expr '(' '(' $YEAREND '-' $YEARBEG ')' '+' '1' ')' '*' '12'`
#
# Processed data archival locations
#
case "$LOCATION" in
  NC )                                        # NCAR experiments
    MSSBASE=/CCSM/csm               ;;
  NE )                                        # NERSC experiments
    MSSBASE=/home/c/ccsm/csm        ;;
  OR )                                        # ORNL experiments
    MSSBASE=/f2/ccsm/csm            ;;
  * )
    echo "Unable to set variables because "$LOCATION" not found in "$EXPFILE
    exit 1 ;;
esac
export MSSBASE
MSSCMIP=$MSSBASE/CMIP5
#
# Check PROCHOST against LOCATION
#
PROCHOST=`hostname`;export PROCHOST
#
if [ "$LOCATION" = "NE" ] ; then
  if [ "`echo $PROCHOST | cut -c1-6`" != "euclid" ] ; then
    echo "Add "$PROCHOST" for location "$LOCATION
    exit 1
  fi
fi
if [ "$LOCATION" = "NC" ] ; then
  if [ "$PROCHOST" != "copper.cgd.ucar.edu" ] ; then
    echo "Add "$PROCHOST" for location "$LOCATION
    exit 1
  fi
fi
if [ "$LOCATION" = "OR" ] ; then
  if [ "`echo $PROCHOST | cut -c1-4`" != "lens" ] ; then
    echo "Add "$PROCHOST" for location "$LOCATION
    exit 1
  fi
fi
#
# Strip off first part of $HIST
#
HTYP=`echo $HIST | cut -d'.' -f1` ; export HTYP
#
# File archival locations
#
case "$HTYP" in
  cam2 )
    MSSHIST=$HISTBASE/$CASE/atm/hist
    MSSPROC=$MSSBASE/$CASE/atm/proc/tseries  ;;
  clm2 ) 
    MSSHIST=$HISTBASE/$CASE/lnd/hist
    MSSPROC=$MSSBASE/$CASE/lnd/proc/tseries  ;;
  pop  ) 
    MSSHIST=$HISTBASE/$CASE/ocn/hist
    MSSPROC=$MSSBASE/$CASE/ocn/proc/tseries  ;;
  csim | cice ) 
    MSSHIST=$HISTBASE/$CASE/ice/hist
    MSSPROC=$MSSBASE/$CASE/ice/proc/tseries  ;;
  * ) 
    echo "Unable to continue because "$HIST" not known."
    exit 1 ;;
esac
#
case "$TPER" in
  mon )
    MSSPROC=${MSSPROC}/monthly  ;;
  day )
    MSSPROC=${MSSPROC}/daily    ;;
  hr6 )
    MSSPROC=${MSSPROC}/hourly6  ;;
  hr3 )
    MSSPROC=${MSSPROC}/hourly3  ;;
  * ) 
    echo "Unable to continue because "$TPER" not known."
    exit 1 ;;
esac
#
# resolve machine/site dependencies
#
case "$PROCHOST" in 
  copper* )                                # copper @ CGD/NCAR
    BASEDIR=${HOME}/CCP_Processing_Suite
    UUID=/home/strandwg/bin/uuid         ; export UUID
    NCKS=/usr/local/bin/ncks         ; export NCKS
    NCRCAT=/usr/local/bin/ncrcat     ; export NCRCAT
    NCATTED=/usr/local/bin/ncatted   ; export NCATTED
    NCARG_ROOT=/contrib/ncarg            ; export NCARG_ROOT
    PROCBASE=/datalocal/proc/$USER/$CASE ; export PROCBASE
    ;;

  euclid* )                                # euclid @ NERSC
    BASEDIR=${HOME}/CCP_Processing_Suite
    UUID=/global/u2/s/strandwg/bin/ncks     ; export UUID
    NCKS=/global/u2/s/strandwg/bin/ncks     ; export NCKS
    NCRCAT=/global/u2/s/strandwg/bin/ncrcat ; export NCRCAT
    NCATTED=/global/u2/s/strandwg/bin/ncatted ; export NCATTED
    NCARG_ROOT=/usr/common/usg/ncar/5.2.0          ; export NCARG_ROOT
    PROCBASE=/global/scratch/sd/$USER/$CASE      ; export PROCBASE
    ;;

  lens* )                                # lens @ ORNL
    BASEDIR=${HOME}/CCP_Processing_Suite
    UUID=/ccs/home/wgstrand/bin/ncks                   ; export UUID
    NCKS=/ccs/home/wgstrand/bin/ncks                   ; export NCKS
    NCRCAT=/ccs/home/wgstrand/bin/ncrcat               ; export NCRCAT
    NCATTED=/ccs/home/wgstrand/bin/ncatted             ; export NCATTED
    NCARG_ROOT=/sw/analysis-x64/ncl/5.0.0/sl5.0_binary ; export NCARG_ROOT
    PROCBASE=/tmp/work/$USER/$CASE                     ; export PROCBASE
    ;;
  * ) 
    echo "Unable to continue because "$PROCHOST" not known."
    exit 1 ;;
esac
#
case "$HTYP" in
  cam2 ) PROCDIR=$PROCBASE/atm ;;
  clm2 ) PROCDIR=$PROCBASE/lnd ;;
  pop  ) PROCDIR=$PROCBASE/ocn ;;
  csim ) PROCDIR=$PROCBASE/ice ;;
  cice ) PROCDIR=$PROCBASE/ice ;;
  * ) 
    echo "Unable to continue because "$HIST" not known."
    exit 1 ;;
esac
#
# For CMIP processing, get NCL script name
#
if [ $DO_CMIP -ne 0 ] ; then
  NCL=${NCARG_ROOT}/bin/ncl ; export NCL
  NCL_VERSION=`$NCL -V`     ; export NCL_VERSION
 case "$HTYP" in
    cam2 ) 
      case "$TPER" in
        mon ) NCL_SCRIPT=CCSM_Amon_${CMIP}.ncl ;;
        day ) NCL_SCRIPT=CCSM_da_${CMIP}.ncl   ;;
        hr6 ) NCL_SCRIPT=CCSM_atm6_${CMIP}.ncl ;;
        hr3 ) NCL_SCRIPT=CCSM_atm3_${CMIP}.ncl ;;
        *   ) 
          echo "Unable to continue because "$TPER" not known for NCL_SCRIPT."
          exit 1 ;;
      esac ;;
    clm2 ) 
      case "$TPER" in
        mon ) NCL_SCRIPT=CCSM_Lmon_${CMIP}.ncl ;;
        day ) NCL_SCRIPT=CCSM_lndd_${CMIP}.ncl ;;
        hr6 ) NCL_SCRIPT=CCSM_lnd6_${CMIP}.ncl ;;
        hr3 ) NCL_SCRIPT=CCSM_lnd3_${CMIP}.ncl ;;
        *   ) 
          echo "Unable to continue because "$TPER" not known for NCL_SCRIPT."
          exit 1 ;;
      esac ;;
    pop  ) 
      case "$TPER" in
        mon ) NCL_SCRIPT=CCSM_Omon_${CMIP}.ncl ;;
        day ) NCL_SCRIPT=CCSM_ocnd_${CMIP}.ncl ;;
        hr6 ) NCL_SCRIPT=CCSM_ocn6_${CMIP}.ncl ;;
        hr3 ) NCL_SCRIPT=CCSM_ocn3_${CMIP}.ncl ;;
        *   ) 
          echo "Unable to continue because "$TPER" not known for NCL_SCRIPT."
          exit 1 ;;
      esac ;;
    cice | csim  ) 
      case "$TPER" in
        mon ) NCL_SCRIPT=CCSM_LImon_${CMIP}.ncl ;;
        day ) NCL_SCRIPT=CCSM_iced_${CMIP}.ncl ;;
        hr6 ) NCL_SCRIPT=CCSM_ice6_${CMIP}.ncl ;;
        hr3 ) NCL_SCRIPT=CCSM_ice3_${CMIP}.ncl ;;
        *   ) 
          echo "Unable to continue because "$TPER" not known for NCL_SCRIPT."
          exit 1 ;;
      esac ;;
    *   ) 
      echo "Unable to continue because "$HTYP" not known for NCL_SCRIPT."
      exit 1 ;;
  esac
  export NCL_SCRIPT
  if [ ! -f ${BASEDIR}/${NCL_SCRIPT} ] ; then
    echo "Unable to continue because "${BASEDIR}/${NCL_SCRIPT}" not found."
    exit 1
  fi
fi
#
PROCDIR=${PROCDIR}/${TPER}
CACHEDIR=${PROCDIR}/to_archive
#
# Print out values
#
echo "           Case name : "$CASE ; export CASE
echo "   History file type : "$HIST ; export HIST
if [ $DO_PROC -ne 0 ] ; then
  echo "   by var processing : YES"
  echo "     Processed files : "$MSSPROC  ; export MSSPROC
else
  echo "   by var processing : NO"
fi
if [ $DO_CMIP -ne 0 ] ; then
  if [ "$CMIP" != "---" ] ; then
    echo "         CMIP format : "$CMIP        ; export CMIP
    echo "                 NCL : "$NCL         ; export NCL
    echo "         NCL version : "$NCL_VERSION ; export NCL_VERSION
    echo "     NCL script name : "$NCL_SCRIPT  ; export NCL_SCRIPT
    echo "   CMIP format files : "$MSSCMIP     ; export MSSCMIP
  fi
else
  echo "     CMIP processing : NO"
fi
if [ "$LOCATION" = "NC" ] ; then
  HARDWARE=${HARDWARE}".ucar.edu"
fi
if [ "$LOCATION" = "NE" ] ; then
  HARDWARE=${HARDWARE}".nersc.gov"
fi
if [ "$LOCATION" = "OR" ] ; then
  HARDWARE=${HARDWARE}".ccs.ornl.gov"
fi
echo "            Location : "$LOCATION ; export LOCATION
echo "         Description : "$DESCRIP  ; export DESCRIP
echo "         Realization : "$REALIZN  ; export REALIZN
echo "         Parent case : "$PARENT   ; export PARENT
echo "         Branch date : "$BRANCH   ; export BRANCH
echo "          Resolution : "$RES      ; export RES
echo "            Hardware : "$HARDWARE ; export HARDWARE
echo "          Begin year : "$YEARBEG  ; export YEARBEG
echo "            End year : "$YEAREND  ; export YEAREND
echo "          Year count : "$YRCOUNT  ; export YRCOUNT
echo "        Months count : "$MNCOUNT  ; export MNCOUNT
echo ""
echo "       History files : "$MSSHIST  ; export MSSHIST
echo "       History names : "$HIST     ; export HIST
echo "   Archival base dir : "$MSSBASE  ; export MSSBASE
echo ""
echo "     Processing host : "$PROCHOST ; export PROCHOST
echo "      Processing dir : "$PROCDIR  ; export PROCDIR
echo "   Archive cache dir : "$CACHEDIR ; export CACHEDIR
echo " Processing code dir : "$BASEDIR  ; export BASEDIR
#  
if [ ! -d $PROCDIR ] ; then 
  mkdir -p $PROCDIR 
fi
if [ ! -d $CACHEDIR ] ; then 
  mkdir -p $CACHEDIR 
fi
cd $PROCDIR
#
if [ $DO_CMIP -ne 0 ] ; then
  if [ ! -f ${BASEDIR}/${NCL_SCRIPT} ] ; then
    echo "Unable to continue because "$NCL_SCRIPT" not found."
    exit 1
  fi
#
  if [ ! -d $PROCDIR/CMIP ] ; then
     mkdir -p $PROCDIR/CMIP
  fi
  if [ "$TPER" != "mon" ] ; then
    ln -s -f $BASEDIR/time_split    .
    ln -s -f $BASEDIR/days_to_month .
  fi
  cd $PROCDIR
  ln -s -f $BASEDIR/create_cm5_data     .
  ln -s -f ${BASEDIR}/${NCL_SCRIPT}     .
  ln -s -f $BASEDIR/attributes_ccsm.ncl .
  ln -s -f $BASEDIR/mss_list   .
  ln -s -f $BASEDIR/mss_read   .
  ln -s -f $BASEDIR/mss_write  .
  cd $PROCDIR/CMIP
  ln -s -f $BASEDIR/mss_list   .
  ln -s -f $BASEDIR/mss_read   .
  ln -s -f $BASEDIR/mss_write  .
  ln -s -f $BASEDIR/cm5_var_mon_to_year .
  ln -s -f $BASEDIR/cm5_var_year_to_all .
  cd $PROCDIR
fi
#
if [ $DO_PROC -ne 0 ] ; then
  if [ "$TPER" != "mon" ] ; then
    ln -s -f $BASEDIR/time_split    .
    ln -s -f $BASEDIR/days_to_month .
  fi
  ln -s -f $BASEDIR/mss_list   .
  ln -s -f $BASEDIR/mss_read   .
  ln -s -f $BASEDIR/mss_write  .
  ln -s -f $BASEDIR/var_split  .
  ln -s -f $BASEDIR/var_mon_to_year .
  ln -s -f $BASEDIR/var_year_to_dec .
  ln -s -f $BASEDIR/var_year_to_5yr .
  ln -s -f $BASEDIR/var_year_to_all .
  ln -s -f $BASEDIR/add_year        .
fi
#
ln -s -f $BASEDIR/concatenate_data    .
ln -s -f $BASEDIR/store_to_archive    .
#
CURDIR=$PWD
#
cd $PROCDIR
YEARNOW=$YEARBEG;export YEARNOW
while [ $YEARNOW -le $YEAREND ] ; do
  YRCHECK=.comp.$CASE.$HIST.$YEARNOW
  if [ ! -f $YRCHECK ] ; then
    echo "Processing "$CASE"."$HIST"."$YEARNOW" at "`date`
    MSSLIST=MSS.$CASE.$HIST
    if [ ! -f $MSSLIST ] ; then
      echo "Getting archival list of "$CASE" "$HIST
      ./mss_list $MSSLIST
    fi
    if [ "$TPER" = "mon" ] ; then
      if [ `ls ${CASE}.${HIST}.${YEARNOW}-??.nc | wc -l` -ne 12 ] ; then
        ./mss_read $MSSLIST $YEARNOW
        if [ $? -ne 0 ] ; then
          echo "Error from mss_read"
          exit 1
        fi
      fi
    else
      ./mss_read $MSSLIST $YEARNOW
      if [ $? -ne 0 ] ; then
        echo "Error from mss_read"
        exit 1
      fi
    fi
    if [ "$TPER" = "mon" ] ; then
      for FILE in `ls $CASE.$HIST.${YEARNOW}-??.nc` ; do
        if [ $DO_CMIP -ne 0 ] ; then
          ./create_cm5_data $FILE
          if [ $? -ne 0 ] ; then
            echo "Error from create_cm5_data on file "$FILE
            exit 1
          fi
          touch .cmip.$FILE
          if [ $DO_PROC -eq 0 ] ; then
            rm -f $FILE
          fi
        fi
        if [ $DO_PROC -ne 0 ] ; then
          ./var_split $FILE erase
          if [ $? -ne 0 ] ; then
            echo "Error from var_split on file "$FILE
            exit 1
          else
            touch .proc.$FILE
          fi
        fi
        if [ -f .proc.$FILE ] || [ -f .cmip.$FILE ] ; then
          touch .comp.$FILE
          rm -f .proc.$FILE .cmip.$FILE
        fi
      done
    else
      for FILE in `ls $CASE.$HIST.${YEARNOW}*.nc` ; do
        NTIMES=`$NCKS -M $FILE | egrep "name = time" | cut -d"=" -f3`
        if [ $NTIMES -ne 365 ] ; then
          ./time_split $FILE erase
          ./days_to_month erase
        fi
      done
      for FILE in `ls $CASE.$HIST.${YEARNOW}*.nc` ; do
        if [ $DO_CMIP -ne 0 ] ; then
          ./create_cm5_data $FILE
          if [ $? -ne 0 ] ; then
            echo "Error from create_cm5_data on file "$FILE
            exit 1
          else
            touch .cmip.$FILE
          fi
          if [ $DO_PROC -eq 0 ] ; then
            rm -f $FILE
          fi
        fi
        if [ $DO_PROC -ne 0 ] ; then
          ./var_split $FILE erase
          if [ $? -ne 0 ] ; then
            echo "Error from var_split on file "$FILE
            exit 1
          else
            touch .proc.$FILE
          fi
        fi
        if [ -f .proc.$FILE ] || [ -f .cmip.$FILE ] ; then
          touch .comp.$FILE
        fi
      done
    fi
    if [ `ls .comp.$CASE.$HIST.${YEARNOW}*.nc | wc -l` -eq 1 ] ; then
      touch $YRCHECK
      rm .????.$CASE.$HIST.${YEARNOW}*.nc
    else
      if [ `ls .comp.$CASE.$HIST.${YEARNOW}*.nc | wc -l` -eq 12 ] ; then
        touch $YRCHECK
        rm .????.$CASE.$HIST.${YEARNOW}*.nc
      fi
    fi
  fi
  CHECKDEC=`expr $YEARNOW % 10`
  if [ $CHECKDEC -eq 0 ] ; then
    echo "Concatenating years at "${YEARNOW}" at "`date`
    ./concatenate_data Y
  fi
  if [ "$HIST" = "pop.h" ] && [ "$TPER" = "mon" ] ; then
    ./concatenate_data D
  fi
  if [ "$HIST" = "cam2.h1" ] && [ "$TPER" = "day" ] ; then
    ./concatenate_data D
  fi
  YEARNOW=`expr $YEARNOW + 1`;export YEARNOW
done
#
# Concatenate months -> years, years -> all (if possible)
#
echo "Final concatenating of "$CASE"."$HIST" at "`date`
./concatenate_data Y
if [ $? -eq 0 ] ; then
  ./concatenate_data A
  if [ $? -eq 0 ] ; then
    if [ "$YEAREND" = "2100" ] || [ "$YEAREND" = "2005" ] ; then
      if [ "$HIST" = "pop.h" ] && [ "$TPER" = "mon" ] ; then
        ./concatenate_data $YEAREND
        if [ $? -ne 0 ] ; then
          echo "concatenate_data "${YEAREND}" failed"
          exit 1
        fi
      fi
      if [ "$HIST" = "cam2.h1" ] && [ "$TPER" = "day" ] ; then
        ./concatenate_data $YEAREND
        if [ $? -ne 0 ] ; then
          echo "concatenate_data "${YEAREND}" failed"
          exit 1
        fi
      fi
    fi
  else
    echo "concatenate_data A failed"
    exit 1
  fi
else
  echo "concatenate_data Y failed"
  exit 1
fi
#
# Store completed data on archival system
#
./store_to_archive
if [ $? -ne 0 ] ; then
  echo "store_to_archive failed"
  exit 1
fi
