#!/bin/sh
#
#
if [ $# -eq 0 ] ; then
   echo "Usage: var_split_vars file vars [erase]"
   echo "3 args means erase file after fields extracted."
   ./procstat.sh error var_split_vars
   exit 1
elif [ $# -eq 2 ] ; then
   FILE=$1
   VARS=$2
elif [ $# -eq 3 ] ; then
   FILE=$1
   VARS=$2
else
   echo "Usage: var_split_vars file $vars [erase]"
   echo "3 args means erase file after fields extracted."
   ./procstat.sh error var_split
   exit 1
fi
echo $VARS
# 
# Check for ncks
#
if [ ! $NCKS ] ; then
  TEST4NCKS=`which ncks 2>&1`
  if [ $? -eq 0 ] ; then
    NCKS=`which ncks`
  else
    echo "NCKS not in PATH - UNDEFINED"
    exit 1
  fi
fi
#
# Parse filename
#
FLEN=`echo $FILE | wc -c`
NDOT=0
CSTR=1
while [ $CSTR -le $FLEN ] ; do
  CURC=`echo $FILE | cut -c${CSTR}-${CSTR}`
  if [ "$CURC" = "." ] ; then
     NDOT=`expr '(' $NDOT ')' '+' '1'`
  fi
  CSTR=`expr '(' $CSTR ')' '+' '1'`
done
IDOT=1
DCAS=1
DVAR=1
DHT1=1
DHT2=1
DPFX=1
DSFX=1
while [ $IDOT -le $NDOT ] ; do
  CURC=`echo $FILE | cut -d "." -f${IDOT}-${IDOT}`
  case "$CURC" in
    cam2 | cam | clm2 | pop | csim | cice )
      DPFX=`expr '(' $IDOT ')' '+' '1'`
      DSFX=`expr '(' $DPFX ')' '+' '1'`
      DHT1=$IDOT ;;
  esac
  IDOT=`expr '(' $IDOT ')' '+' '1'`
done
DCMP=$DHT1
#
COMP=`echo $FILE | cut -d"." -f${DCMP}`
#
# Check to see if $FILE is a POP daily tape denoted by 'pop.h.h2|nday1|pop.h.ecosys.year1' string
#
if [ "$COMP" = "pop" ] ; then
  DYCK=`expr '(' $DCMP ')' '+' '2'`
  ODAY=`echo $FILE | cut -d"." -f${DYCK}`
  if [ "$ODAY" = "nday1" ] || [ "$ODAY" = "h2" ] ; then
    DPFX=`expr '(' $DPFX ')' '+' '1'`
    DSFX=`expr '(' $DSFX ')' '+' '1'`
  fi
  if [ "$ODAY" = "ecosys" ] ; then
    DPFX=`expr '(' $DPFX ')' '+' '2'`
    DSFX=`expr '(' $DSFX ')' '+' '2'`
  fi
fi
#
OUTPFX=`echo $FILE | cut -d"." -f1-${DPFX}`
OUTSFX=`echo $FILE | cut -d"." -f${DSFX}-`
#
# Save "$NCKS -m" metadata output for this file
#
rm -f meta.${FILE} ; $NCKS -m $FILE > meta.${FILE}
#
# Scalar (i.e., single value) fields, to be put in all output files
#
SCALARS=`cat meta.${FILE} | egrep "( 0 dimension|# dim\. = 0)" | cut -d":" -f1`
#
# Time-variant fields, the fields we will be splitting upon
#
TIMEVAR=`cat meta.${FILE} | egrep "dimension 0: time" | cut -d" " -f1`
#
# Time-invariant fields, to be put in all output files
#
TIMEINV=`cat meta.${FILE} | egrep "dimension 0:" | egrep -v " dimension 0: time" | cut -d" " -f1`
#
#
# Find time-variant fields that are more than 1 dimension, i.e., not dimensioned just along time
# Those that are 1-dimensional and along time only are not put into separate output files
#
for V in $TIMEVAR ; do
   NDIMS=`cat meta.${FILE} | egrep "^${V}:" | cut -d"," -f2`
#   echo "Checking "${V}" NDIMS: "${NDIMS}
   case "$NDIMS" in 
     " 1 dimension" )
       HEADER=`echo ${HEADER}${V}" "` ;; 
    " 2 dimensions" )
      if [ "$V" = "time_bnds" ] || [ "$V" = "time_bound" ] || [ "$V" = "time_bounds" ] || [ "$V" = "date_written" ] || [ "$V" = "time_written" ] ; then
        HEADER=`echo ${HEADER}${V}" "`
      else
        for X in $VARS ; do
          if [ "$V" = "$X" ] ; then
            TIMEV2D=`echo ${TIMEV2D}${V}" "`
          fi
        done
      fi ;; 
    " 3 dimensions" )
      for X in $VARS ; do
        if [ "$V" = "$X" ] ; then
          TIMEV3D=`echo ${TIMEV3D}${V}" "`
        fi
      done ;;
    " 4 dimensions" )
      for X in $VARS ; do
        if [ "$V" = "$X" ] ; then
          TIMEV4D=`echo ${TIMEV4D}${V}" "`
        fi
      done ;;
    " 5 dimensions" )
      for X in $VARS ; do
        if [ "$V" = "$X" ] ; then
          TIMEV5D=`echo ${TIMEV4D}${V}" "`
        fi
      done ;;
   esac
done
#
if [ `echo $HEADER | wc -w` -ne 0 ] ; then
  if [ `echo $TIMEINV | wc -w` -ne 0 ] ; then
    if [ `echo $SCALAR | wc -w` -ne 0 ] ; then
      HEADER=`echo ${SCALAR}${HEADER}${TIMEINV} | sed -e 's/ /,/g'`
    fi
    HEADER=`echo ${HEADER}${TIMEINV} | sed -e 's/ /,/g'`
  fi
fi
#echo "TIMEV1D: "$TIMEV1D
#echo 
#echo "TIMEV2D: "$TIMEV2D
#echo 
#echo "TIMEV3D: "$TIMEV3D
#echo 
#echo "TIMEV4D: "$TIMEV4D
#echo 
#echo "TIMEV5D: "$TIMEV5D
#echo 
#
# Add SCALARS (if present) to HEADER
#
if [ `echo $SCALARS | wc -w` -ne 0 ] ; then
  SCALARS=`echo $SCALARS | sed -e 's/ /,/g'`
  HEADER=`echo $HEADER","$SCALARS`
fi
#echo "HEADER: "$HEADER
#
# 2D time-dependent vars
#
if [ `echo $TIMEV2D | wc -w` -ne 0 ] ; then
  for f in $TIMEV2D ; do
    if [ ! -d ${f}_2d.d ] ; then
      mkdir ${f}_2d.d
    fi
    OUT=${f}_2d.d/${OUTPFX}.${f}.${OUTSFX}
    $NCKS -O -v ${HEADER},${f} $FILE $OUT
    if [ $? -ne 0 ] ; then
      echo "NCKS -O -v ${HEADER},${f} $FILE $OUT failed"
      ./procstat.sh error var_split_vars
      exit 1
    fi
 done
fi
#
# 3D time-dependent vars
#
if [ `echo $TIMEV3D | wc -w` -ne 0 ] ; then
  for f in $TIMEV3D ; do
    if [ ! -d ${f}_3d.d ] ; then
      mkdir ${f}_3d.d
    fi
    if [ "$COMP" = "cice" ] ; then
      OUT=${f}_3d.d/${OUTPFX}.${f}_nh.${OUTSFX}
      $NCKS -O -d nj,280,383 -v ${HEADER},${f} $FILE $OUT
      OUT=${f}_3d.d/${OUTPFX}.${f}_sh.${OUTSFX}
      $NCKS -O -d nj,0,75 -v ${HEADER},${f} $FILE $OUT
    else
      OUT=${f}_3d.d/${OUTPFX}.${f}.${OUTSFX}
      $NCKS -O -v ${HEADER},${f} $FILE $OUT
      if [ $? -ne 0 ] ; then
        echo "NCKS -O -v ${HEADER},${f} $FILE $OUT failed"
        ./procstat.sh error var_split_vars
        exit 1
      fi
    fi
 done
fi
#
# 4D time-dependent vars
#
if [ `echo $TIMEV4D | wc -w` -ne 0 ] ; then
  for f in $TIMEV4D ; do
    if [ ! -d ${f}_4d.d ] ; then
      mkdir ${f}_4d.d
    fi
    OUT=${f}_4d.d/${OUTPFX}.${f}.${OUTSFX}
    $NCKS -O -v ${HEADER},${f} $FILE $OUT
    if [ $? -ne 0 ] ; then
      echo "NCKS -O -v ${HEADER},${f} $FILE $OUT failed"
      ./procstat.sh error var_split_vars
      exit 1
    fi
 done
fi
#
# 5D time-dependent vars
#
if [ `echo $TIMEV5D | wc -w` -ne 0 ] ; then
  for f in $TIMEV5D ; do
    if [ ! -d ${f}_5d.d ] ; then
      mkdir ${f}_5d.d
    fi
    OUT=${f}_5d.d/${OUTPFX}.${f}.${OUTSFX}
    $NCKS -O -v ${HEADER},${f} $FILE $OUT
    if [ $? -ne 0 ] ; then
      echo "NCKS -O -v ${HEADER},${f} $FILE $OUT failed"
      ./procstat.sh error var_split_vars
      exit 1
    fi
 done
fi
#
rm -f meta.${FILE}
#
if [ $# -gt 2 ] ; then
  rm -f $FILE
fi
